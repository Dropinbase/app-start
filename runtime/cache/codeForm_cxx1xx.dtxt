(function() {
    var require = ['/dropins/setNgMaterial/dibForm/js/component/formPaging.js',  
		'/dropins/setNgMaterial/dibForm/js/services/dibForm.js'
	];
    require.push('/dropins/setNgMaterial/dibGlobals/js/component/selectDefault.js');
    var files = [];
    angular.forEach(require, function (file,index) { 
        files.push(DIB.base_url+'/files'+file);
    });
    files.push( DIB.base_url + '/dropins/setNgMaterial/dibGrid/Template/controller/beneficiaryGrid.js');
    files.push( DIB.base_url + '/dropins/setNgMaterial/dibForm/Template/controller/beneficiaryForm.js');
    files.push( DIB.base_url + '/dropins/setNgMaterial/dibGrid/Template/controller/importStrateGrid.js');
    files.push( DIB.base_url + '/dropins/setNgMaterial/dibForm/Template/controller/importStrateForm.js');
    files.push( DIB.base_url + '/dropins/setNgMaterial/dibGrid/Template/controller/inetBfaGrid.js');
    files.push( DIB.base_url + '/dropins/setNgMaterial/dibForm/Template/controller/inetBfaForm.js');
    files.push( DIB.base_url + '/dropins/setNgMaterial/dibGrid/Template/controller/shareGrid.js');
    files.push( DIB.base_url + '/dropins/setNgMaterial/dibForm/Template/controller/shareForm.js');
    files.push( DIB.base_url + '/dropins/setNgMaterial/dibGrid/Template/controller/xxxbenCodeGrid.js');
    files.push( DIB.base_url + '/dropins/setNgMaterial/dibForm/Template/controller/xxxbenCodeForm.js');
    var codeForm = angular.module('codeForm', [files]);
    var codeForm = angular.module('codeForm');
    codeForm.component('codeForm', {
        controllerAs: 'codeForm',
        templateUrl: DIB.base_url + '/dropins/setNgMaterial/dibForm/Template/view/codeForm.html',
        controller : component__codeForm
    });
    component__codeForm.$inject = [ '$scope','$element','dibCrud','dibNavigation','dibAction','dibContainer','dibDiscover','dibRecord','dibUtility','dibCommon','$log','$q','$ocLazyLoad', 
            'dibForm', 'dibMessage','$location','dibAction','dibUtility', '$timeout', 'dibActiveFilterState'];
    function component__codeForm($scope,$element,dibCrud,dibNavigation,dibAction,dibContainer,dibDiscover,dibRecord,dibUtility,dibCommon,$log,$q,$ocLazyLoad, 
            dibForm, dibMessage,$location,dibAction,dibUtility, $timeout, dibActiveFilterState) {
        var ctrl = this;        
                    $scope.container = {};
            $scope.container.Id = '9135';
            $scope.container.Name = 'codeForm';
            $scope.container.SubContainerItemAliases = []; 
            var crudController = "/peff/Crud";
                    $scope.model = {};
        $scope.model._GET = {};
        $scope.model['code'] = '';
        $scope.model._GET['code'] = dibContainer.modelItem({
            key : 'code',
            dataType : "text", 
            create : true,
            update : true,
            service : null,
            itemAlias : 'code_pk'
        });
        $scope.model['inhouse'] = '';
        $scope.model._GET['inhouse'] = dibContainer.modelItem({
            key : 'inhouse',
            dataType : "boolean", 
            create : true,
            update : true,
            service : null,
            itemAlias : false
        });
        $scope.model['type'] = '';
        $scope.model._GET['type'] = dibContainer.modelItem({
            key : 'type',
            dataType : "text", 
            create : true,
            update : true,
            service : null,
            itemAlias : false
        });
        $scope.model['classification'] = '';
        $scope.model._GET['classification'] = dibContainer.modelItem({
            key : 'classification',
            dataType : "text", 
            create : true,
            update : true,
            service : null,
            itemAlias : false
        });
        $scope.model['notes'] = '';
        $scope.model._GET['notes'] = dibContainer.modelItem({
            key : 'notes',
            dataType : "text", 
            create : true,
            update : true,
            service : null,
            itemAlias : false
        });
        $scope.view = {};
            $scope.view.code_pk = {'disabled' : false,'visible' : true, 'class' : null, 'style' : null };
            var reloadContainerFunctions = [];
            dibContainer.watchModel($scope);
	        $scope.dibCommon = dibCommon;
            $scope.primaryKeys = ["code"];
        var $dibContainer = $element.first();
        $scope.menus = {};
    $scope.dropdowns = {};
            $scope.openAuditTrail = function (portAlias) {
                            var primaryKeyData = dibRecord.primaryKeyAuditIds($scope.primaryKeys, $scope.model);
                            if (primaryKeyData.length > 0) {
                            dibCommon.goTo(DIB.audit_trail_container,portAlias,true,"?filter_pef_table_id=4611&filter_record_id="+primaryKeyData);
                        } else {
                            dibCommon.goTo(DIB.audit_trail_container,portAlias,true,"?filter_pef_table_id=4611");
                        }
            };
        ctrl.$onInit = function () {
            $scope.addModel = function () { 
                dibForm.addModel($scope, "codeForm");
            };
            $scope.deleteRecord = function (options) {
                dibForm.deleteRecord('codeForm', $scope, $scope.codeForm, options, crudController).then(function (){
                });
            };         
            /**
            *  Saving record in this model
            */
            $scope.saveModel = function (options) {
                if ($scope.loadingData) return $q.reject('Busy loading...');
                if (dibForm.validate($scope, $scope.codeForm)) {
                    $scope.loadingData =  true;
                    var primaryKeyData = dibRecord.primaryKeyData($scope.primaryKeys, $scope.model);
                    return dibForm.updateRecord('codeForm', $scope, $scope.codeForm, crudController, options).then(function () { 
                        if (Object.keys(primaryKeyData).length>0) {
                        } else {
                            loadForm();
                        }
                        return $q.when();
                    });
                }
            };
            var mdTabs = $("[dib-container=codeForm]").closest('md-tabs');
            var tabsScope = null;
            if (mdTabs.length === 0) {
                mdTabs = null;
            }
            else {
                tabsScope = mdTabs.scope();
            }
            $scope.$watch('codeForm.$dirty', function (newValue, oldValue) { 
                dibNavigation.containerDirty = newValue;
                if (dibNavigation.containerDirty && !!mdTabs && !!tabsScope) {
                    var currentIndex = tabsScope.selectedIndex;
                    dibNavigation.addSaveFailedPromise(function(tabIndex) {
                        tabsScope.selectedIndex = tabIndex;
                        return $q.when();
                    }, [currentIndex]);
                }
            },true);
            dibNavigation.addSavePromise($scope.saveModel);
            //Giving the form the ability to handle dependency data (if an event is trigger on another component that has a refresh item alias point to the form/child form)
            $scope.setDependencyData = function (object) { 
                return dibForm.setDependencyData($scope,object);
            };
            $scope.itemAliasData = function () {
                return angular.copy($scope.primaryKeyData);
            };
            /**
            * Clear the form from records and dependancy data
            */
            $scope.clearForm = function () {
                if ($scope.loadingData) return;
                $scope.primaryKeyData = null;
                $scope.reloadContainer();
                dibForm.clean($scope.codeForm,$scope.model);
            };
            $scope.reloadContainer = function (options) {
                $scope.autoRefresh = true;
                loadForm ();
            };
            $scope.$watch('model', function (oldVal, newVal) {
            },true);  
        };
        ctrl.$postLink = function () {
            var isUrlContainer = dibContainer.urlContainer('codeForm');
            if (isUrlContainer) {
                //check if record is first or last
                if (!!$location.search()['record'] && $location.search()['record']!='new') {
                    $scope.$broadcast('load');
                }
            } else {
                $scope.$broadcast('load');
            }
            //var isUrlContainer = dibContainer.urlContainer('codeForm');
            //the if below we removed the requirement to match the url to the containerName, so we can load data into a window without the url changing. wizBuildAppAdv.
                $scope.reloadContainer({ force : true });
        };
        function loadForm () { 
            dibNavigation.reset();
            dibNavigation.addSavePromise($scope.saveModel);
            //clear the record status
            $scope.recordStatus = null;
            var isUrlContainer = dibContainer.urlContainer('codeForm');
            if (isUrlContainer) {
                //check if record is first or last
                if (!!$location.search()['record'] && $location.search()['record']!='new') {
                    return;
                }
            }
            //check if this is a child container 
            $scope.primaryKeyData = isUrlContainer ? dibDiscover.getPrimaryKeysFromUrl() : $scope.primaryKeyData;
            if (!!$scope.primaryKeyData === false) {
                $scope.primaryKeyData = {};
                //set all the primaryKeys to 0
                angular.forEach($scope.primaryKeys, function (key,index) { 
                    $scope.model[key] = 0;
                });
            }
            //remove active filter if no record are available
            if (Object.keys($scope.primaryKeyData).length ==0) {
                $scope.recordStatus = "create";
            } else {
                $scope.recordStatus = "update";
            }
            $scope.loadingData = true;
            $scope.currentPrimaryKeyData = $scope.primaryKeyData;
            dibCrud.read($scope,crudController,'codeForm',{
                primaryKeyData : $scope.currentPrimaryKeyData,
                createParams: "{}"
            },
            $scope
            ).then(function (model) {
                $scope.model = model;
                $scope.currentPrimaryKeyData = dibRecord.primaryKeyData($scope.primaryKeys, $scope.model);
                $scope.$broadcast('load');
                $scope.codeForm.$setUntouched();
                $scope.codeForm.$setPristine();
                //@TODO refactor start 
                var timeoutTest = $timeout(function () { 
                    dibContainer.reloadChildren({containerName: 'codeForm'});
                },500); 
                //@FRANCOIS @TODO Maybe we can change this to a better magic number :)
                // var eventDeregister = $rootScope.$on("dibAngular.subcontainerLoaded", function () {
                //     $timeout.cancel(timeoutTest);
                //     timeoutTest = $timeout(function () { 
                //         dibContainer.reloadChildren({containerName: 'codeForm'});
                //         eventDeregister();
                //     },500); 
                //     //@FRANCOIS @TODO Maybe we can change this to a better magic number :)
                // });
                //Refactor stop
                $log.debug("containerName read->model",$scope.model );
                $scope.loadingData =  false;
            }).catch(function (error) {
                $scope.$broadcast('load');
                $scope.loadingData =  false;
            });
        }
    }
})();
