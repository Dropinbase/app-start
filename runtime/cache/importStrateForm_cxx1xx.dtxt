(function() {
    var require = ['/dropins/setNgMaterial/dibForm/js/component/formPaging.js','/dropins/setNgMaterial/dibGlobals/js/component/timeDatePickerInput.js',  
		'/dropins/setNgMaterial/dibForm/js/services/dibForm.js'
	];
    require.push('/dropins/setNgMaterial/dibGlobals/js/component/selectDefault.js');
    var files = [];
    angular.forEach(require, function (file,index) { 
        files.push(DIB.base_url+'/files'+file);
    });
    files.push( DIB.base_url + '/dropins/setNgMaterial/dibGrid/Template/controller/beneficiaryGrid.js');
    files.push( DIB.base_url + '/dropins/setNgMaterial/dibForm/Template/controller/beneficiaryForm.js');
    var importStrateForm = angular.module('importStrateForm', [files]);
    importStrateForm.service('service211409',service211409); 
    service211409.$inject = ['dibAjax', 'dibDiscover', '$q'];
    function service211409(dibAjax, dibDiscover, $q) {
            return {
                list : list
            };       
            function list($scope, $element, query, modelType, page) {
                var $defer = $q.defer();
                var url = dibDiscover.updateQueryStringDropdown(DIB.base_url + "/peff/Crud/componentlist/importStrateForm?containerItemId=211409", query, modelType, page);
                var requestInfo = dibDiscover.addToUrl({
                    field :$('#ci211409'),
                    $scope : $scope,
                    container : $element,
                    url : url
                });
                return dibAjax.post(requestInfo, {
                    excludeFromCancels : true,
                    factoryResult : function (data) {
                        return data.records;
                    }
                });
            };
    };
    importStrateForm.service('service211413',service211413); 
    service211413.$inject = ['dibAjax', 'dibDiscover', '$q'];
    function service211413(dibAjax, dibDiscover, $q) {
            return {
                list : list
            };       
            function list($scope, $element, query, modelType, page) {
                var $defer = $q.defer();
                var url = dibDiscover.updateQueryStringDropdown(DIB.base_url + "/peff/Crud/componentlist/importStrateForm?containerItemId=211413", query, modelType, page);
                var requestInfo = dibDiscover.addToUrl({
                    field :$('#ci211413'),
                    $scope : $scope,
                    container : $element,
                    url : url
                });
                return dibAjax.post(requestInfo, {
                    excludeFromCancels : true,
                    factoryResult : function (data) {
                        return data.records;
                    }
                });
            };
    };
    importStrateForm.service('service211414',service211414); 
    service211414.$inject = ['dibAjax', 'dibDiscover', '$q'];
    function service211414(dibAjax, dibDiscover, $q) {
            return {
                list : list
            };       
            function list($scope, $element, query, modelType, page) {
                var $defer = $q.defer();
                var url = dibDiscover.updateQueryStringDropdown(DIB.base_url + "/peff/Crud/componentlist/importStrateForm?containerItemId=211414", query, modelType, page);
                var requestInfo = dibDiscover.addToUrl({
                    field :$('#ci211414'),
                    $scope : $scope,
                    container : $element,
                    url : url
                });
                return dibAjax.post(requestInfo, {
                    excludeFromCancels : true,
                    factoryResult : function (data) {
                        return data.records;
                    }
                });
            };
    };
    importStrateForm.service('service211415',service211415); 
    service211415.$inject = ['dibAjax', 'dibDiscover', '$q'];
    function service211415(dibAjax, dibDiscover, $q) {
            return {
                list : list
            };       
            function list($scope, $element, query, modelType, page) {
                var $defer = $q.defer();
                var url = dibDiscover.updateQueryStringDropdown(DIB.base_url + "/peff/Crud/componentlist/importStrateForm?containerItemId=211415", query, modelType, page);
                var requestInfo = dibDiscover.addToUrl({
                    field :$('#ci211415'),
                    $scope : $scope,
                    container : $element,
                    url : url
                });
                return dibAjax.post(requestInfo, {
                    excludeFromCancels : true,
                    factoryResult : function (data) {
                        return data.records;
                    }
                });
            };
    };
    importStrateForm.service('service211417',service211417); 
    service211417.$inject = ['dibAjax', 'dibDiscover', '$q'];
    function service211417(dibAjax, dibDiscover, $q) {
            return {
                list : list
            };       
            function list($scope, $element, query, modelType, page) {
                var $defer = $q.defer();
                var url = dibDiscover.updateQueryStringDropdown(DIB.base_url + "/peff/Crud/componentlist/importStrateForm?containerItemId=211417", query, modelType, page);
                var requestInfo = dibDiscover.addToUrl({
                    field :$('#ci211417'),
                    $scope : $scope,
                    container : $element,
                    url : url
                });
                return dibAjax.post(requestInfo, {
                    excludeFromCancels : true,
                    factoryResult : function (data) {
                        return data.records;
                    }
                });
            };
    };
    importStrateForm.service('service211432',service211432); 
    service211432.$inject = ['dibAjax', 'dibDiscover', '$q'];
    function service211432(dibAjax, dibDiscover, $q) {
            return {
                list : list
            };       
            function list($scope, $element, query, modelType, page) {
                var $defer = $q.defer();
                var url = dibDiscover.updateQueryStringDropdown(DIB.base_url + "/peff/Crud/componentlist/importStrateForm?containerItemId=211432", query, modelType, page);
                var requestInfo = dibDiscover.addToUrl({
                    field :$('#ci211432'),
                    $scope : $scope,
                    container : $element,
                    url : url
                });
                return dibAjax.post(requestInfo, {
                    excludeFromCancels : true,
                    factoryResult : function (data) {
                        return data.records;
                    }
                });
            };
    };
    var importStrateForm = angular.module('importStrateForm');
    importStrateForm.component('importStrateForm', {
        controllerAs: 'importStrateForm',
        templateUrl: DIB.base_url + '/dropins/setNgMaterial/dibForm/Template/view/importStrateForm.html',
        controller : component__importStrateForm
    });
    component__importStrateForm.$inject = [ '$scope','$element','dibCrud','dibNavigation','dibAction','dibContainer','dibDiscover','dibRecord','dibUtility','dibCommon','$log','$q','$ocLazyLoad', 
            'dibForm', 'dibMessage','$location','dibAction','dibUtility', '$timeout', 'dibActiveFilterState','service211409','service211413','service211414','service211415','service211417','service211432'];
    function component__importStrateForm($scope,$element,dibCrud,dibNavigation,dibAction,dibContainer,dibDiscover,dibRecord,dibUtility,dibCommon,$log,$q,$ocLazyLoad, 
            dibForm, dibMessage,$location,dibAction,dibUtility, $timeout, dibActiveFilterState,service211409,service211413,service211414,service211415,service211417,service211432) {
        var ctrl = this;        
                    $scope.container = {};
            $scope.container.Id = '9147';
            $scope.container.Name = 'importStrateForm';
            $scope.container.SubContainerItemAliases = []; 
            var crudController = "/peff/Crud";
                    $scope.model = {};
        $scope.model._GET = {};
        $scope.model['id'] = '';
        $scope.model._GET['id'] = dibContainer.modelItem({
            key : 'id',
            dataType : "number", 
            create : false,
            update : false,
            service : null,
            itemAlias : 'import_strate_pk'
        });
        $scope.model['batch_no'] = '';
        $scope.model._GET['batch_no'] = dibContainer.modelItem({
            key : 'batch_no',
            dataType : "number", 
            create : true,
            update : true,
            service : null,
            itemAlias : false
        });
        $scope.model['import_date'] = '';
        $scope.model._GET['import_date'] = dibContainer.modelItem({
            key : 'import_date',
            dataType : "dateTime", 
            create : true,
            update : true,
            service : null,
            itemAlias : false
        });
        $scope.model['file_no'] = '';
        $scope.model._GET['file_no'] = dibContainer.modelItem({
            key : 'file_no',
            dataType : "number", 
            create : true,
            update : true,
            service : null,
            itemAlias : false
        });
        $scope.model['account_type'] = '';
        $scope.model._GET['account_type'] = dibContainer.modelItem({
            key : 'account_type',
            dataType : "boolean", 
            create : true,
            update : true,
            service : null,
            itemAlias : false
        });
        $scope.model['reg_acc_no'] = '';
        $scope.model._GET['reg_acc_no'] = dibContainer.modelItem({
            key : 'reg_acc_no',
            dataType : "text", 
            create : true,
            update : true,
            service : null,
            itemAlias : false
        });
        $scope.model['select___dataset_id'] = '';
        $scope.model._GET['dataset_id'] = dibContainer.modelItem({
            key : 'dataset_id',
            dataType : "select", 
            create : true,
            update : true,
            service : service211409,
            itemAlias : false
        });
        $scope.model['ben_acc_no'] = '';
        $scope.model._GET['ben_acc_no'] = dibContainer.modelItem({
            key : 'ben_acc_no',
            dataType : "text", 
            create : true,
            update : true,
            service : null,
            itemAlias : false
        });
        $scope.model['client_name1'] = '';
        $scope.model._GET['client_name1'] = dibContainer.modelItem({
            key : 'client_name1',
            dataType : "text", 
            create : true,
            update : true,
            service : null,
            itemAlias : false
        });
        $scope.model['client_name2'] = '';
        $scope.model._GET['client_name2'] = dibContainer.modelItem({
            key : 'client_name2',
            dataType : "text", 
            create : true,
            update : true,
            service : null,
            itemAlias : false
        });
        $scope.model['select___nominee_id'] = '';
        $scope.model._GET['nominee_id'] = dibContainer.modelItem({
            key : 'nominee_id',
            dataType : "select", 
            create : true,
            update : true,
            service : service211413,
            itemAlias : false
        });
        $scope.model['select___beneficiary_id'] = '';
        $scope.model._GET['beneficiary_id'] = dibContainer.modelItem({
            key : 'beneficiary_id',
            dataType : "select", 
            create : true,
            update : true,
            service : service211414,
            itemAlias : false
        });
        $scope.model['select___code'] = '';
        $scope.model._GET['code'] = dibContainer.modelItem({
            key : 'code',
            dataType : "select", 
            create : true,
            update : true,
            service : service211415,
            itemAlias : false
        });
        $scope.model['unique_code_count'] = '';
        $scope.model._GET['unique_code_count'] = dibContainer.modelItem({
            key : 'unique_code_count',
            dataType : "number", 
            create : true,
            update : true,
            service : null,
            itemAlias : false
        });
        $scope.model['select___market_cap_id'] = '';
        $scope.model._GET['market_cap_id'] = dibContainer.modelItem({
            key : 'market_cap_id',
            dataType : "select", 
            create : true,
            update : true,
            service : service211417,
            itemAlias : false
        });
        $scope.model['address1'] = '';
        $scope.model._GET['address1'] = dibContainer.modelItem({
            key : 'address1',
            dataType : "text", 
            create : true,
            update : true,
            service : null,
            itemAlias : false
        });
        $scope.model['address2'] = '';
        $scope.model._GET['address2'] = dibContainer.modelItem({
            key : 'address2',
            dataType : "text", 
            create : true,
            update : true,
            service : null,
            itemAlias : false
        });
        $scope.model['address3'] = '';
        $scope.model._GET['address3'] = dibContainer.modelItem({
            key : 'address3',
            dataType : "text", 
            create : true,
            update : true,
            service : null,
            itemAlias : false
        });
        $scope.model['address4'] = '';
        $scope.model._GET['address4'] = dibContainer.modelItem({
            key : 'address4',
            dataType : "text", 
            create : true,
            update : true,
            service : null,
            itemAlias : false
        });
        $scope.model['postal_code'] = '';
        $scope.model._GET['postal_code'] = dibContainer.modelItem({
            key : 'postal_code',
            dataType : "text", 
            create : true,
            update : true,
            service : null,
            itemAlias : false
        });
        $scope.model['country_code'] = '';
        $scope.model._GET['country_code'] = dibContainer.modelItem({
            key : 'country_code',
            dataType : "text", 
            create : true,
            update : true,
            service : null,
            itemAlias : false
        });
        $scope.model['class_code'] = '';
        $scope.model._GET['class_code'] = dibContainer.modelItem({
            key : 'class_code',
            dataType : "text", 
            create : true,
            update : true,
            service : null,
            itemAlias : false
        });
        $scope.model['holdings'] = '';
        $scope.model._GET['holdings'] = dibContainer.modelItem({
            key : 'holdings',
            dataType : "text", 
            create : true,
            update : true,
            service : null,
            itemAlias : false
        });
        $scope.model['holdings2'] = '';
        $scope.model._GET['holdings2'] = dibContainer.modelItem({
            key : 'holdings2',
            dataType : "text", 
            create : true,
            update : true,
            service : null,
            itemAlias : false
        });
        $scope.model['shares'] = '';
        $scope.model._GET['shares'] = dibContainer.modelItem({
            key : 'shares',
            dataType : "number", 
            create : true,
            update : true,
            service : null,
            itemAlias : false
        });
        $scope.model['market_value'] = '';
        $scope.model._GET['market_value'] = dibContainer.modelItem({
            key : 'market_value',
            dataType : "number", 
            create : true,
            update : true,
            service : null,
            itemAlias : false
        });
        $scope.model['recon_ind'] = '';
        $scope.model._GET['recon_ind'] = dibContainer.modelItem({
            key : 'recon_ind',
            dataType : "text", 
            create : true,
            update : true,
            service : null,
            itemAlias : false
        });
        $scope.model['inst_holder'] = '';
        $scope.model._GET['inst_holder'] = dibContainer.modelItem({
            key : 'inst_holder',
            dataType : "text", 
            create : true,
            update : true,
            service : null,
            itemAlias : false
        });
        $scope.model['uniqueid'] = '';
        $scope.model._GET['uniqueid'] = dibContainer.modelItem({
            key : 'uniqueid',
            dataType : "text", 
            create : true,
            update : true,
            service : null,
            itemAlias : false
        });
        $scope.model['select___company_id'] = '';
        $scope.model._GET['company_id'] = dibContainer.modelItem({
            key : 'company_id',
            dataType : "select", 
            create : true,
            update : true,
            service : service211432,
            itemAlias : false
        });
        $scope.view = {};
            $scope.view.import_strate_pk = {'disabled' : false,'visible' : true, 'class' : null, 'style' : null };
            var reloadContainerFunctions = [];
            dibContainer.watchModel($scope);
	        $scope.dibCommon = dibCommon;
            $scope.primaryKeys = ["id"];
        var $dibContainer = $element.first();
        $scope.menus = {};
    $scope.dropdowns = {};
    $scope.dropdowns.service211409 = {};
    $scope.dropdowns.service211409.items = [];
    var setTimeoutCancel211409 = null;
    var $dibContainer = $element.first();
    var query211409;
    $scope.loadService211409 = function (query, skipTimeout) {
        if (query211409 != query) {
            query211409 = query;
            if (!!skipTimeout) {
                return service211409.list($scope,$dibContainer, query).then(function (items) {
                    $scope.dropdowns.service211409.items = items;
                });
            } else {
                clearTimeout(setTimeoutCancel211409);
                setTimeoutCancel211409 = setTimeout(function () { 
                    service211409.list($scope,$dibContainer, query).then(function (items) {
                        $scope.dropdowns.service211409.items = items;
                    });
                }, 100);
            }
        } 
    };
    $scope.dropdowns.service211409.searchTextChange = function (query) {
        $scope.loadService211409(query);
    };
    $scope.dropdowns.service211409.getItems = function (query,modelType) {
        return service211409.list($scope,$dibContainer, query,modelType);
    };
    $scope.select211409 = function (model,modelName,fieldName) {
        if (!!modelName == false) modelName ="model";
        var $element =  $('#ci211409');
        if (!!$element.attr('select-model') === false) { 
            $element = $element.find('[select-model]');
        }
        var modelName =  'selected___' + fieldName;
        $element.trigger('select');
        if (!!model[modelName]  === false) { 
            return  false;
        }
        angular.forEach($scope.dropdowns.service211409.items, function (item, index)   {
            if (item.id == model[modelName]['id']) {
                model[modelName]['id_display_value'] = item.id_display_value; 
                return false;
            }
        });
    };
    $scope.dropdowns.service211413 = {};
    $scope.dropdowns.service211413.items = [];
    var setTimeoutCancel211413 = null;
    var $dibContainer = $element.first();
    var query211413;
    $scope.loadService211413 = function (query, skipTimeout) {
        if (query211413 != query) {
            query211413 = query;
            if (!!skipTimeout) {
                return service211413.list($scope,$dibContainer, query).then(function (items) {
                    $scope.dropdowns.service211413.items = items;
                });
            } else {
                clearTimeout(setTimeoutCancel211413);
                setTimeoutCancel211413 = setTimeout(function () { 
                    service211413.list($scope,$dibContainer, query).then(function (items) {
                        $scope.dropdowns.service211413.items = items;
                    });
                }, 100);
            }
        } 
    };
    $scope.dropdowns.service211413.searchTextChange = function (query) {
        $scope.loadService211413(query);
    };
    $scope.dropdowns.service211413.getItems = function (query,modelType) {
        return service211413.list($scope,$dibContainer, query,modelType);
    };
    $scope.select211413 = function (model,modelName,fieldName) {
        if (!!modelName == false) modelName ="model";
        var $element =  $('#ci211413');
        if (!!$element.attr('select-model') === false) { 
            $element = $element.find('[select-model]');
        }
        var modelName =  'selected___' + fieldName;
        $element.trigger('select');
        if (!!model[modelName]  === false) { 
            return  false;
        }
        angular.forEach($scope.dropdowns.service211413.items, function (item, index)   {
            if (item.id == model[modelName]['id']) {
                model[modelName]['id_display_value'] = item.id_display_value; 
                return false;
            }
        });
    };
    $scope.dropdowns.service211414 = {};
    $scope.dropdowns.service211414.items = [];
    var setTimeoutCancel211414 = null;
    var $dibContainer = $element.first();
    var query211414;
    $scope.loadService211414 = function (query, skipTimeout) {
        if (query211414 != query) {
            query211414 = query;
            if (!!skipTimeout) {
                return service211414.list($scope,$dibContainer, query).then(function (items) {
                    $scope.dropdowns.service211414.items = items;
                });
            } else {
                clearTimeout(setTimeoutCancel211414);
                setTimeoutCancel211414 = setTimeout(function () { 
                    service211414.list($scope,$dibContainer, query).then(function (items) {
                        $scope.dropdowns.service211414.items = items;
                    });
                }, 100);
            }
        } 
    };
    $scope.dropdowns.service211414.searchTextChange = function (query) {
        $scope.loadService211414(query);
    };
    $scope.dropdowns.service211414.getItems = function (query,modelType) {
        return service211414.list($scope,$dibContainer, query,modelType);
    };
    $scope.select211414 = function (model,modelName,fieldName) {
        if (!!modelName == false) modelName ="model";
        var $element =  $('#ci211414');
        if (!!$element.attr('select-model') === false) { 
            $element = $element.find('[select-model]');
        }
        var modelName =  'selected___' + fieldName;
        $element.trigger('select');
        if (!!model[modelName]  === false) { 
            return  false;
        }
        angular.forEach($scope.dropdowns.service211414.items, function (item, index)   {
            if (item.id == model[modelName]['id']) {
                model[modelName]['id_display_value'] = item.id_display_value; 
                return false;
            }
        });
    };
    $scope.dropdowns.service211415 = {};
    $scope.dropdowns.service211415.items = [];
    var setTimeoutCancel211415 = null;
    var $dibContainer = $element.first();
    var query211415;
    $scope.loadService211415 = function (query, skipTimeout) {
        if (query211415 != query) {
            query211415 = query;
            if (!!skipTimeout) {
                return service211415.list($scope,$dibContainer, query).then(function (items) {
                    $scope.dropdowns.service211415.items = items;
                });
            } else {
                clearTimeout(setTimeoutCancel211415);
                setTimeoutCancel211415 = setTimeout(function () { 
                    service211415.list($scope,$dibContainer, query).then(function (items) {
                        $scope.dropdowns.service211415.items = items;
                    });
                }, 100);
            }
        } 
    };
    $scope.dropdowns.service211415.searchTextChange = function (query) {
        $scope.loadService211415(query);
    };
    $scope.dropdowns.service211415.getItems = function (query,modelType) {
        return service211415.list($scope,$dibContainer, query,modelType);
    };
    $scope.select211415 = function (model,modelName,fieldName) {
        if (!!modelName == false) modelName ="model";
        var $element =  $('#ci211415');
        if (!!$element.attr('select-model') === false) { 
            $element = $element.find('[select-model]');
        }
        var modelName =  'selected___' + fieldName;
        $element.trigger('select');
        if (!!model[modelName]  === false) { 
            return  false;
        }
        angular.forEach($scope.dropdowns.service211415.items, function (item, index)   {
            if (item.id == model[modelName]['id']) {
                model[modelName]['id_display_value'] = item.id_display_value; 
                return false;
            }
        });
    };
    $scope.dropdowns.service211417 = {};
    $scope.dropdowns.service211417.items = [];
    var setTimeoutCancel211417 = null;
    var $dibContainer = $element.first();
    var query211417;
    $scope.loadService211417 = function (query, skipTimeout) {
        if (query211417 != query) {
            query211417 = query;
            if (!!skipTimeout) {
                return service211417.list($scope,$dibContainer, query).then(function (items) {
                    $scope.dropdowns.service211417.items = items;
                });
            } else {
                clearTimeout(setTimeoutCancel211417);
                setTimeoutCancel211417 = setTimeout(function () { 
                    service211417.list($scope,$dibContainer, query).then(function (items) {
                        $scope.dropdowns.service211417.items = items;
                    });
                }, 100);
            }
        } 
    };
    $scope.dropdowns.service211417.searchTextChange = function (query) {
        $scope.loadService211417(query);
    };
    $scope.dropdowns.service211417.getItems = function (query,modelType) {
        return service211417.list($scope,$dibContainer, query,modelType);
    };
    $scope.select211417 = function (model,modelName,fieldName) {
        if (!!modelName == false) modelName ="model";
        var $element =  $('#ci211417');
        if (!!$element.attr('select-model') === false) { 
            $element = $element.find('[select-model]');
        }
        var modelName =  'selected___' + fieldName;
        $element.trigger('select');
        if (!!model[modelName]  === false) { 
            return  false;
        }
        angular.forEach($scope.dropdowns.service211417.items, function (item, index)   {
            if (item.id == model[modelName]['id']) {
                model[modelName]['id_display_value'] = item.id_display_value; 
                return false;
            }
        });
    };
    $scope.dropdowns.service211432 = {};
    $scope.dropdowns.service211432.items = [];
    var setTimeoutCancel211432 = null;
    var $dibContainer = $element.first();
    var query211432;
    $scope.loadService211432 = function (query, skipTimeout) {
        if (query211432 != query) {
            query211432 = query;
            if (!!skipTimeout) {
                return service211432.list($scope,$dibContainer, query).then(function (items) {
                    $scope.dropdowns.service211432.items = items;
                });
            } else {
                clearTimeout(setTimeoutCancel211432);
                setTimeoutCancel211432 = setTimeout(function () { 
                    service211432.list($scope,$dibContainer, query).then(function (items) {
                        $scope.dropdowns.service211432.items = items;
                    });
                }, 100);
            }
        } 
    };
    $scope.dropdowns.service211432.searchTextChange = function (query) {
        $scope.loadService211432(query);
    };
    $scope.dropdowns.service211432.getItems = function (query,modelType) {
        return service211432.list($scope,$dibContainer, query,modelType);
    };
    $scope.select211432 = function (model,modelName,fieldName) {
        if (!!modelName == false) modelName ="model";
        var $element =  $('#ci211432');
        if (!!$element.attr('select-model') === false) { 
            $element = $element.find('[select-model]');
        }
        var modelName =  'selected___' + fieldName;
        $element.trigger('select');
        if (!!model[modelName]  === false) { 
            return  false;
        }
        angular.forEach($scope.dropdowns.service211432.items, function (item, index)   {
            if (item.id == model[modelName]['id']) {
                model[modelName]['id_display_value'] = item.id_display_value; 
                return false;
            }
        });
    };
            $scope.openAuditTrail = function (portAlias) {
                            var primaryKeyData = dibRecord.primaryKeyAuditIds($scope.primaryKeys, $scope.model);
                            if (primaryKeyData.length > 0) {
                            dibCommon.goTo(DIB.audit_trail_container,portAlias,true,"?filter_pef_table_id=4619&filter_record_id="+primaryKeyData);
                        } else {
                            dibCommon.goTo(DIB.audit_trail_container,portAlias,true,"?filter_pef_table_id=4619");
                        }
            };
        ctrl.$onInit = function () {
            $scope.addModel = function () { 
                dibForm.addModel($scope, "importStrateForm");
            };
            $scope.deleteRecord = function (options) {
                dibForm.deleteRecord('importStrateForm', $scope, $scope.importStrateForm, options, crudController).then(function (){
                });
            };         
            /**
            *  Saving record in this model
            */
            $scope.saveModel = function (options) {
                if ($scope.loadingData) return $q.reject('Busy loading...');
                if (dibForm.validate($scope, $scope.importStrateForm)) {
                    $scope.loadingData =  true;
                    var primaryKeyData = dibRecord.primaryKeyData($scope.primaryKeys, $scope.model);
                    return dibForm.updateRecord('importStrateForm', $scope, $scope.importStrateForm, crudController, options).then(function () { 
                        if (Object.keys(primaryKeyData).length>0) {
                        } else {
                            loadForm();
                        }
                        return $q.when();
                    });
                }
            };
            var mdTabs = $("[dib-container=importStrateForm]").closest('md-tabs');
            var tabsScope = null;
            if (mdTabs.length === 0) {
                mdTabs = null;
            }
            else {
                tabsScope = mdTabs.scope();
            }
            $scope.$watch('importStrateForm.$dirty', function (newValue, oldValue) { 
                dibNavigation.containerDirty = newValue;
                if (dibNavigation.containerDirty && !!mdTabs && !!tabsScope) {
                    var currentIndex = tabsScope.selectedIndex;
                    dibNavigation.addSaveFailedPromise(function(tabIndex) {
                        tabsScope.selectedIndex = tabIndex;
                        return $q.when();
                    }, [currentIndex]);
                }
            },true);
            dibNavigation.addSavePromise($scope.saveModel);
            //Giving the form the ability to handle dependency data (if an event is trigger on another component that has a refresh item alias point to the form/child form)
            $scope.setDependencyData = function (object) { 
                return dibForm.setDependencyData($scope,object);
            };
            $scope.itemAliasData = function () {
                return angular.copy($scope.primaryKeyData);
            };
            /**
            * Clear the form from records and dependancy data
            */
            $scope.clearForm = function () {
                if ($scope.loadingData) return;
                $scope.primaryKeyData = null;
                $scope.reloadContainer();
                dibForm.clean($scope.importStrateForm,$scope.model);
            };
            $scope.reloadContainer = function (options) {
                $scope.autoRefresh = true;
                loadForm ();
            };
            $scope.$watch('model', function (oldVal, newVal) {
            },true);  
        };
        ctrl.$postLink = function () {
            var isUrlContainer = dibContainer.urlContainer('importStrateForm');
            if (isUrlContainer) {
                //check if record is first or last
                if (!!$location.search()['record'] && $location.search()['record']!='new') {
                    $scope.$broadcast('load');
                }
            } else {
                $scope.$broadcast('load');
            }
            //var isUrlContainer = dibContainer.urlContainer('importStrateForm');
            //the if below we removed the requirement to match the url to the containerName, so we can load data into a window without the url changing. wizBuildAppAdv.
                $scope.reloadContainer({ force : true });
        };
        function loadForm () { 
            dibNavigation.reset();
            dibNavigation.addSavePromise($scope.saveModel);
            //clear the record status
            $scope.recordStatus = null;
            var isUrlContainer = dibContainer.urlContainer('importStrateForm');
            if (isUrlContainer) {
                //check if record is first or last
                if (!!$location.search()['record'] && $location.search()['record']!='new') {
                    return;
                }
            }
            //check if this is a child container 
            $scope.primaryKeyData = isUrlContainer ? dibDiscover.getPrimaryKeysFromUrl() : $scope.primaryKeyData;
            if (!!$scope.primaryKeyData === false) {
                $scope.primaryKeyData = {};
                //set all the primaryKeys to 0
                angular.forEach($scope.primaryKeys, function (key,index) { 
                    $scope.model[key] = 0;
                });
            }
            //remove active filter if no record are available
            if (Object.keys($scope.primaryKeyData).length ==0) {
                $scope.recordStatus = "create";
            } else {
                $scope.recordStatus = "update";
            }
            $scope.loadingData = true;
            $scope.currentPrimaryKeyData = $scope.primaryKeyData;
            dibCrud.read($scope,crudController,'importStrateForm',{
                primaryKeyData : $scope.currentPrimaryKeyData,
                createParams: "{}"
            },
            $scope
            ).then(function (model) {
                $scope.model = model;
                $scope.currentPrimaryKeyData = dibRecord.primaryKeyData($scope.primaryKeys, $scope.model);
                $scope.$broadcast('load');
                $scope.importStrateForm.$setUntouched();
                $scope.importStrateForm.$setPristine();
                //@TODO refactor start 
                var timeoutTest = $timeout(function () { 
                    dibContainer.reloadChildren({containerName: 'importStrateForm'});
                },500); 
                //@FRANCOIS @TODO Maybe we can change this to a better magic number :)
                // var eventDeregister = $rootScope.$on("dibAngular.subcontainerLoaded", function () {
                //     $timeout.cancel(timeoutTest);
                //     timeoutTest = $timeout(function () { 
                //         dibContainer.reloadChildren({containerName: 'importStrateForm'});
                //         eventDeregister();
                //     },500); 
                //     //@FRANCOIS @TODO Maybe we can change this to a better magic number :)
                // });
                //Refactor stop
                $log.debug("containerName read->model",$scope.model );
                $scope.loadingData =  false;
            }).catch(function (error) {
                $scope.$broadcast('load');
                $scope.loadingData =  false;
            });
        }
    }
})();
