(function() {
  var require = ['/dropins/setNgMaterial/dibForm/js/component/formPaging.js' ];
  require.push('/dropins/setNgMaterial/dibGlobals/js/component/selectDefault.js');
  var files = [];
  angular.forEach(require, function (file,index) { 
    files.push(DIB__base_url+'/files'+file);
  });
    var helpCategoryForm = angular.module('helpCategoryForm', [files]).run(['$rootScope', 'actionLoaderService', function($rootScope, actionLoaderService) {
            var actions = ['dibGlobals.action.OpenContainer','dibGlobals.action.ToggleMenu'];
            if (!actions || actions.length === 0) {
                return;
            }
            actionLoaderService.loadDibActionDefinitions(actions);
    }]);
var helpCategoryForm = angular.module('helpCategoryForm');
helpCategoryForm.component('helpCategoryForm', {
    controllerAs: 'helpCategoryForm',
    templateUrl: DIB__base_url + '/dropins/setNgMaterial/dibForm/Template/view/helpCategoryForm.html',
    controller : component__helpCategoryForm
});
component__helpCategoryForm.$inject = [  
            '$scope', '$ocLazyLoad', '$rootScope', '$log', 'discoverService', 'messageService','$location','actionService', '$q','utilityService', '$timeout', 'activeFilterOverride','containerService','recordFactory','crudService','utilityService'];
    function component__helpCategoryForm($scope, $ocLazyLoad, $rootScope, $log, discoverService, messageService,$location,actionService, $q,utilityService, $timeout, activeFilterOverride,containerService,recordFactory,crudService,utilityService) {
        var vm = this;        
        vm.$onInit = function () {
                        $scope.container = {};
            $scope.container.Id = '8368';
            $scope.container.Name = 'helpCategoryForm';
            $("[dib-container='helpCategoryForm']").trigger('load');
            var crudController = "/peff/Crud";
                    $scope.model = {};
        $scope.model._GET = recordFactory.modelConstruct();
        $scope.model._GET['help_category_id'] = containerService.modelItem("number", 
            false,
            false
        );
        $scope.model._GET['name'] = containerService.modelItem("text", 
            false,
            false
        );
        $scope.model._GET['parent_category_id'] = containerService.modelItem("number", 
            false,
            false
        );
        $scope.model._GET['url'] = containerService.modelItem("text", 
            false,
            false
        );
        $scope.view = {};
            var reloadContainerFunctions = [];
            containerService.watchModel($scope);
	        $scope.common = $rootScope.common;
            $scope.primaryKeys = ["help_category_id"];
        $scope.menus = {};
        $scope.dropdowns = {};
        //load all dropdowns required for this container
            $scope.openAuditTrail = function (portAlias) {
                            var primaryKeyData = recordFactory.primaryKeyAuditIds($scope.primaryKeys, $scope.model);
                            if (primaryKeyData.length > 0) {
                            $scope.common.goTo(DIB__audit_trail_container,portAlias,true,"?filter_pef_table_id=4039&filter_record_id="+primaryKeyData);
                        } else {
                            $scope.common.goTo(DIB__audit_trail_container,portAlias,true,"?filter_pef_table_id=4039");
                        }
            };
            /**
            * Add a new record 
            */
            $scope.addModel = function (options) { 
                if ($scope.loadingData) return;
                var isUrlContainer = containerService.urlContainer("helpCategoryForm");
                if (isUrlContainer){
                    utilityService.updateUrlPrimaryKeys($scope, true, {});
                    $location.search("record","new");
                } 
                $scope.clearForm();  
                $scope.recordStatus = "create";
            };
            /**
            * Delete the record from the database
            */
            $scope.deleteModel = function (options) { 
                if ($scope.loadingData) return;
                if ($scope.recordStatus == "create") {
                    messageService.callout({
                        message : 'No valid record to delete.',
                        type: "notice"
                    });
                    return;
                }
                messageService.confirm({
                    title: 'Delete record',
                    text : 'Warning - are you sure you want to permanently delete the current records?'
                }).then(function () { 
                    $scope.recordStatus = null;
                    var primaryKeyData = recordFactory.primaryKeyData($scope.primaryKeys, $scope.model);
                    return crudService.delete(crudController,'helpCategoryForm',{
                            primaryKeyData : oldPrimaryKeyData
                    }).then(function (model) { 
                        $scope.loadingData =  false;
                        $("[dib-container=helpCategoryForm]").trigger('delete');
                        $scope.helpCategoryForm.$setUntouched();
                        $scope.helpCategoryForm.$setPristine();
                        messageService.callout({
                            message : "Record successfully deleted.",
                            type : 'success'
                        });
                        var isUrlContainer = containerService.urlContainer('helpCategoryForm');
                        if (isUrlContainer) {
                            utilityService.updateUrlPrimaryKeys($scope, options.redirect, model);
                        } else {
                            $scope.addModel();
                        }
                    }, function (data) { 
                        $scope.loadingData =  false;
                    });
                });
            };         
            /**
            *  Saving record in this model
            */
            $scope.saveModel = function (options) {
                if ($scope.loadingData) return;
                if (!$scope.helpCategoryForm.$valid) { 
                    $scope.recordStatus = null;
                    containerService.makeFormDirty($scope.helpCategoryForm);
                    var errorMsg = "";
                    angular.forEach($scope.helpCategoryForm.$error, function (errorCategory,index) { 
                        angular.forEach(errorCategory, function (error, key) { 
                            errorMsg += index + ":"+error.$name + "; ";
                        });
                    });
                    var msg = 'Resolve validation errors to save on fields: '+errorMsg + '';
                    messageService.callout({
                        message : msg,
                        type : 'warning',
                        duration : 10000
                    });
                    return $q.reject(msg);
                } 
                $scope.loadingData =  true;
                var primaryKeyData = recordFactory.primaryKeyData($scope.primaryKeys, $scope.model);
                $("[dib-container=helpCategoryForm]").trigger('beforeUpdate');
                return crudService.update(crudController,'helpCategoryForm',{
                            primaryKeyData : oldPrimaryKeyData
            }, $scope).then(function (model) {
                    oldPrimaryKeyData = primaryKeyData;
                    $scope.loadingData =  false;
                    $scope.helpCategoryForm.$setUntouched();
                    $scope.helpCategoryForm.$setPristine();
                    $rootScope._navigation.reset();
                    if (Object.keys(primaryKeyData).length>0) {
                        $("[dib-container=helpCategoryForm]").trigger('update');
                        messageService.callout({
                            message : "Record successfully saved.",
                            type : 'success'
                        });
                        return $q.reject($scope);
                    } else {
                        $("[dib-container=helpCategoryForm]").trigger('create');
                        messageService.callout({
                            message : "Record successfully created.",
                            type : 'success'
                        });
                        var isUrlContainer = containerService.urlContainer('helpCategoryForm');
                        if (isUrlContainer) {
                            utilityService.updateUrlPrimaryKeys($scope,  options.redirect, model);
                        } else {
                            //if primary key data is empty then we assume a new record has been created and store the model received against the primaryKeyData
                            $scope.primaryKeyData = model;
                            oldPrimaryKeyData = $scope.primaryKeyData;
                            activeFilterOverride.remove = true;
                            loadForm();
                        }
                        return $q.resolve($scope);
                    }
                }, function () {
                    $scope.loadingData =  false;
                    return $q.reject($scope);
                });
            };
            var mdTabs = $("[dib-container=helpCategoryForm]").closest('md-tabs');
            var tabsScope = null;
            if (mdTabs.length === 0) {
                mdTabs = null;
            }
            else {
                tabsScope = mdTabs.scope();
            }
            $scope.$watch('helpCategoryForm.$dirty', function (newValue, oldValue) { 
                $rootScope._navigation.containerDirty = newValue;
                if ($rootScope._navigation.containerDirty && !!mdTabs && !!tabsScope) {
                    var currentIndex = tabsScope.selectedIndex;
                    $rootScope._navigation.addSaveFailedPromise(function(tabIndex) {
                        tabsScope.selectedIndex = tabIndex;
                        return $q.when();
                    }, [currentIndex]);
                }
            },true);
            $rootScope._navigation.addSavePromise($scope.saveModel);
            //Giving the form the ability to handle dependency data (if an event is trigger on another component that has a refresh item alias point to the form/child form)
            $scope.setDependencyData = function (object) { 
                    $scope.primaryKeyData = recordFactory.primaryKeyData($scope.primaryKeys, object);
                    return $q.when();
            };
            /**
            * Clear the form from records and dependancy data
            */
            $scope.clearForm = function () {
                if ($scope.loadingData) return;
                $scope.primaryKeyData = null;
                $scope.reloadContainer();
                containerService.cleanForm($scope.helpCategoryForm,$scope.model);
                $("[dib-container=helpCategoryForm]").trigger('clearDependency');
            };
            var oldPrimaryKeyData;
            function loadForm () { 
                $("[dib-container=helpCategoryForm]").trigger('beforeload');
                //clear the record status
                $scope.recordStatus = null;
                var isUrlContainer = containerService.urlContainer('helpCategoryForm');
                if (isUrlContainer) {
                    //check if record is first or last
                    if (!!$location.search()['record'] && $location.search()['record']!='new') {
                        return;
                    }
                }
                //check if this is a child container 
                $scope.primaryKeyData = isUrlContainer ? discoverService.getPrimaryKeysFromUrl() : $scope.primaryKeyData;
                if (!!$scope.primaryKeyData === false) {
                $scope.primaryKeyData = {};
                //set all the primaryKeys to 0
                angular.forEach($scope.primaryKeys, function (key,index) { 
                    $scope.model[key] = 0;
                });
                }
                //remove active filter if no record are available
                if (Object.keys($scope.primaryKeyData).length ==0) {
                    activeFilterOverride.remove = true;
                    $scope.recordStatus = "create";
                } else {
                    $scope.recordStatus = "update";
                }
                $scope.loadingData = true;
                oldPrimaryKeyData = $scope.primaryKeyData;
                crudService.read(crudController,'helpCategoryForm',{
                    primaryKeyData : oldPrimaryKeyData,
                    createParams: "{}"
                },
                $scope
                ).then(function (model) {
                    $scope.model = model;
                    $("[dib-container=helpCategoryForm]").trigger('load');
                    $scope.helpCategoryForm.$setUntouched();
                    $scope.helpCategoryForm.$setPristine();
                    //@TODO refactor start 
                    var timeoutTest = $timeout(function () { 
                        containerService.reloadChildren({containerName: 'helpCategoryForm'});
                    },500); 
                    //@FRANCOIS @TODO Maybe we can change this to a better magic number :)
                    var eventDeregister = $rootScope.$on("dibAngular.subcontainerLoaded", function () {
                        $timeout.cancel(timeoutTest);
                        timeoutTest = $timeout(function () { 
                            containerService.reloadChildren({containerName: 'helpCategoryForm'});
                            eventDeregister();
                        },500); 
                        //@FRANCOIS @TODO Maybe we can change this to a better magic number :)
                    });
                    //Refactor stop
                    $log.debug("containerName read->model",$scope.model );
                    $scope.loadingData =  false;
                }, function () {
                    $scope.loadingData =  false;
                });
            }
            $scope.reloadContainer = function (options) {
                $("[dib-container=helpCategoryForm]").trigger('beforeReloadContainer');
                $scope.autoRefresh = true;
                loadForm ();
            };
            var isUrlContainer = containerService.urlContainer('helpCategoryForm');
            loadForm ();
            $scope.$watch('model', function (oldVal, newVal) {
                $("[dib-container=helpCategoryForm]").trigger('modelChange');
            },true);  
        }
    }
})();
