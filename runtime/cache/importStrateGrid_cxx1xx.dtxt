(function() {
    var require = ['/dropins/setNgMaterial/dibGlobals/js/component/timeDatePickerInput.js', 
		'/dropins/setNgMaterial/dibGrid/js/components/dibTableWidth.js',
  		'/dropins/setNgMaterial/dibGrid/js/components/dibInlineEdit.js',
  		'/dropins/setNgMaterial/dibGrid/js/services/dibGrid.js',
	    '/dropins/setNgMaterial/dibForm/js/services/dibForm.js'
  ];
    require.push('/dropins/setNgMaterial/dibGlobals/js/component/selectDefault.js');
    var files = [];
    angular.forEach(require, function (file,index) { 
        files.push(DIB.base_url+'/files'+file);
    });
    var importStrateGrid = angular.module('importStrateGrid', [files]);
    importStrateGrid.service('service211378',service211378); 
    service211378.$inject = ['dibAjax', 'dibDiscover', '$q'];
    function service211378(dibAjax, dibDiscover, $q) {
            return {
                list : list
            };       
            function list($scope, $element, query, modelType, page) {
                var $defer = $q.defer();
                var url = dibDiscover.updateQueryStringDropdown(DIB.base_url + "/peff/Crud/componentlist/importStrateGrid?containerItemId=211378", query, modelType, page);
                var requestInfo = dibDiscover.addToUrl({
                    field :$('#ci211378'),
                    $scope : $scope,
                    container : $element,
                    url : url
                });
                return dibAjax.post(requestInfo, {
                    excludeFromCancels : true,
                    factoryResult : function (data) {
                        return data.records;
                    }
                });
            };
    };
    importStrateGrid.service('service211382',service211382); 
    service211382.$inject = ['dibAjax', 'dibDiscover', '$q'];
    function service211382(dibAjax, dibDiscover, $q) {
            return {
                list : list
            };       
            function list($scope, $element, query, modelType, page) {
                var $defer = $q.defer();
                var url = dibDiscover.updateQueryStringDropdown(DIB.base_url + "/peff/Crud/componentlist/importStrateGrid?containerItemId=211382", query, modelType, page);
                var requestInfo = dibDiscover.addToUrl({
                    field :$('#ci211382'),
                    $scope : $scope,
                    container : $element,
                    url : url
                });
                return dibAjax.post(requestInfo, {
                    excludeFromCancels : true,
                    factoryResult : function (data) {
                        return data.records;
                    }
                });
            };
    };
    importStrateGrid.service('service211383',service211383); 
    service211383.$inject = ['dibAjax', 'dibDiscover', '$q'];
    function service211383(dibAjax, dibDiscover, $q) {
            return {
                list : list
            };       
            function list($scope, $element, query, modelType, page) {
                var $defer = $q.defer();
                var url = dibDiscover.updateQueryStringDropdown(DIB.base_url + "/peff/Crud/componentlist/importStrateGrid?containerItemId=211383", query, modelType, page);
                var requestInfo = dibDiscover.addToUrl({
                    field :$('#ci211383'),
                    $scope : $scope,
                    container : $element,
                    url : url
                });
                return dibAjax.post(requestInfo, {
                    excludeFromCancels : true,
                    factoryResult : function (data) {
                        return data.records;
                    }
                });
            };
    };
    importStrateGrid.service('service211384',service211384); 
    service211384.$inject = ['dibAjax', 'dibDiscover', '$q'];
    function service211384(dibAjax, dibDiscover, $q) {
            return {
                list : list
            };       
            function list($scope, $element, query, modelType, page) {
                var $defer = $q.defer();
                var url = dibDiscover.updateQueryStringDropdown(DIB.base_url + "/peff/Crud/componentlist/importStrateGrid?containerItemId=211384", query, modelType, page);
                var requestInfo = dibDiscover.addToUrl({
                    field :$('#ci211384'),
                    $scope : $scope,
                    container : $element,
                    url : url
                });
                return dibAjax.post(requestInfo, {
                    excludeFromCancels : true,
                    factoryResult : function (data) {
                        return data.records;
                    }
                });
            };
    };
    importStrateGrid.service('service211386',service211386); 
    service211386.$inject = ['dibAjax', 'dibDiscover', '$q'];
    function service211386(dibAjax, dibDiscover, $q) {
            return {
                list : list
            };       
            function list($scope, $element, query, modelType, page) {
                var $defer = $q.defer();
                var url = dibDiscover.updateQueryStringDropdown(DIB.base_url + "/peff/Crud/componentlist/importStrateGrid?containerItemId=211386", query, modelType, page);
                var requestInfo = dibDiscover.addToUrl({
                    field :$('#ci211386'),
                    $scope : $scope,
                    container : $element,
                    url : url
                });
                return dibAjax.post(requestInfo, {
                    excludeFromCancels : true,
                    factoryResult : function (data) {
                        return data.records;
                    }
                });
            };
    };
    importStrateGrid.service('service211401',service211401); 
    service211401.$inject = ['dibAjax', 'dibDiscover', '$q'];
    function service211401(dibAjax, dibDiscover, $q) {
            return {
                list : list
            };       
            function list($scope, $element, query, modelType, page) {
                var $defer = $q.defer();
                var url = dibDiscover.updateQueryStringDropdown(DIB.base_url + "/peff/Crud/componentlist/importStrateGrid?containerItemId=211401", query, modelType, page);
                var requestInfo = dibDiscover.addToUrl({
                    field :$('#ci211401'),
                    $scope : $scope,
                    container : $element,
                    url : url
                });
                return dibAjax.post(requestInfo, {
                    excludeFromCancels : true,
                    factoryResult : function (data) {
                        return data.records;
                    }
                });
            };
    };
    importStrateGrid.service('service211378',service211378); 
    service211378.$inject = ['dibAjax', 'dibDiscover', '$q'];
    function service211378(dibAjax, dibDiscover, $q) {
            return {
                list : list
            };       
            function list($scope, $element, query, modelType, page) {
                var $defer = $q.defer();
                var url = dibDiscover.updateQueryStringDropdown(DIB.base_url + "/peff/Crud/componentlist/importStrateGrid?containerItemId=211378", query, modelType, page);
                var requestInfo = dibDiscover.addToUrl({
                    field :$('#ci211378'),
                    $scope : $scope,
                    container : $element,
                    url : url
                });
                return dibAjax.post(requestInfo, {
                    excludeFromCancels : true,
                    factoryResult : function (data) {
                        return data.records;
                    }
                });
            };
    };
    importStrateGrid.service('service211382',service211382); 
    service211382.$inject = ['dibAjax', 'dibDiscover', '$q'];
    function service211382(dibAjax, dibDiscover, $q) {
            return {
                list : list
            };       
            function list($scope, $element, query, modelType, page) {
                var $defer = $q.defer();
                var url = dibDiscover.updateQueryStringDropdown(DIB.base_url + "/peff/Crud/componentlist/importStrateGrid?containerItemId=211382", query, modelType, page);
                var requestInfo = dibDiscover.addToUrl({
                    field :$('#ci211382'),
                    $scope : $scope,
                    container : $element,
                    url : url
                });
                return dibAjax.post(requestInfo, {
                    excludeFromCancels : true,
                    factoryResult : function (data) {
                        return data.records;
                    }
                });
            };
    };
    importStrateGrid.service('service211383',service211383); 
    service211383.$inject = ['dibAjax', 'dibDiscover', '$q'];
    function service211383(dibAjax, dibDiscover, $q) {
            return {
                list : list
            };       
            function list($scope, $element, query, modelType, page) {
                var $defer = $q.defer();
                var url = dibDiscover.updateQueryStringDropdown(DIB.base_url + "/peff/Crud/componentlist/importStrateGrid?containerItemId=211383", query, modelType, page);
                var requestInfo = dibDiscover.addToUrl({
                    field :$('#ci211383'),
                    $scope : $scope,
                    container : $element,
                    url : url
                });
                return dibAjax.post(requestInfo, {
                    excludeFromCancels : true,
                    factoryResult : function (data) {
                        return data.records;
                    }
                });
            };
    };
    importStrateGrid.service('service211384',service211384); 
    service211384.$inject = ['dibAjax', 'dibDiscover', '$q'];
    function service211384(dibAjax, dibDiscover, $q) {
            return {
                list : list
            };       
            function list($scope, $element, query, modelType, page) {
                var $defer = $q.defer();
                var url = dibDiscover.updateQueryStringDropdown(DIB.base_url + "/peff/Crud/componentlist/importStrateGrid?containerItemId=211384", query, modelType, page);
                var requestInfo = dibDiscover.addToUrl({
                    field :$('#ci211384'),
                    $scope : $scope,
                    container : $element,
                    url : url
                });
                return dibAjax.post(requestInfo, {
                    excludeFromCancels : true,
                    factoryResult : function (data) {
                        return data.records;
                    }
                });
            };
    };
    importStrateGrid.service('service211386',service211386); 
    service211386.$inject = ['dibAjax', 'dibDiscover', '$q'];
    function service211386(dibAjax, dibDiscover, $q) {
            return {
                list : list
            };       
            function list($scope, $element, query, modelType, page) {
                var $defer = $q.defer();
                var url = dibDiscover.updateQueryStringDropdown(DIB.base_url + "/peff/Crud/componentlist/importStrateGrid?containerItemId=211386", query, modelType, page);
                var requestInfo = dibDiscover.addToUrl({
                    field :$('#ci211386'),
                    $scope : $scope,
                    container : $element,
                    url : url
                });
                return dibAjax.post(requestInfo, {
                    excludeFromCancels : true,
                    factoryResult : function (data) {
                        return data.records;
                    }
                });
            };
    };
    importStrateGrid.service('service211401',service211401); 
    service211401.$inject = ['dibAjax', 'dibDiscover', '$q'];
    function service211401(dibAjax, dibDiscover, $q) {
            return {
                list : list
            };       
            function list($scope, $element, query, modelType, page) {
                var $defer = $q.defer();
                var url = dibDiscover.updateQueryStringDropdown(DIB.base_url + "/peff/Crud/componentlist/importStrateGrid?containerItemId=211401", query, modelType, page);
                var requestInfo = dibDiscover.addToUrl({
                    field :$('#ci211401'),
                    $scope : $scope,
                    container : $element,
                    url : url
                });
                return dibAjax.post(requestInfo, {
                    excludeFromCancels : true,
                    factoryResult : function (data) {
                        return data.records;
                    }
                });
            };
    };
})();
(function() {
    var importStrateGrid = angular.module('importStrateGrid');
    importStrateGrid.component('importStrateGrid', {
        controllerAs: 'importStrateGrid',
        templateUrl: DIB.base_url + '/dropins/setNgMaterial/dibGrid/Template/view/importStrateGrid.html',
        controller : component__importStrateGrid
    });
    component__importStrateGrid.$inject = [ '$scope','$element','dibCrud','dibNavigation','dibAction','dibContainer','dibDiscover','dibRecord','dibUtility','dibCommon','$log','$q','$ocLazyLoad', 
              'dibGrid', 'dibForm', '$location', '$timeout', 'dibMessage','dibKeysPressed','service211378','service211382','service211383','service211384','service211386','service211401'];
    function component__importStrateGrid($scope,$element,dibCrud,dibNavigation,dibAction,dibContainer,dibDiscover,dibRecord,dibUtility,dibCommon,$log,$q,$ocLazyLoad, 
              dibGrid, dibForm, $location, $timeout, dibMessage,dibKeysPressed,service211378,service211382,service211383,service211384,service211386,service211401) {
        var ctrl = this;
                    $scope.container = {};
            $scope.container.Id = '9148';
            $scope.container.Name = 'importStrateGrid';
            $scope.container.SubContainerItemAliases = []; 
            var crudController = "/peff/Crud";
                    $scope.model = {};
        $scope.model._GET = {};
        $scope.model['id'] = '';
        $scope.model._GET['id'] = dibContainer.modelItem({
            key : 'id',
            dataType : "number", 
            create : false,
            update : false,
            service : null,
            itemAlias : false
        });
        $scope.model['batch_no'] = '';
        $scope.model._GET['batch_no'] = dibContainer.modelItem({
            key : 'batch_no',
            dataType : "number", 
            create : true,
            update : true,
            service : null,
            itemAlias : false
        });
        $scope.model['import_date'] = '';
        $scope.model._GET['import_date'] = dibContainer.modelItem({
            key : 'import_date',
            dataType : "dateTime", 
            create : true,
            update : true,
            service : null,
            itemAlias : false
        });
        $scope.model['file_no'] = '';
        $scope.model._GET['file_no'] = dibContainer.modelItem({
            key : 'file_no',
            dataType : "number", 
            create : true,
            update : true,
            service : null,
            itemAlias : false
        });
        $scope.model['account_type'] = '';
        $scope.model._GET['account_type'] = dibContainer.modelItem({
            key : 'account_type',
            dataType : "boolean", 
            create : true,
            update : true,
            service : null,
            itemAlias : false
        });
        $scope.model['reg_acc_no'] = '';
        $scope.model._GET['reg_acc_no'] = dibContainer.modelItem({
            key : 'reg_acc_no',
            dataType : "text", 
            create : true,
            update : true,
            service : null,
            itemAlias : false
        });
        $scope.model['select___dataset_id'] = '';
        $scope.model._GET['dataset_id'] = dibContainer.modelItem({
            key : 'dataset_id',
            dataType : "select", 
            create : true,
            update : true,
            service : service211378,
            itemAlias : false
        });
        $scope.model['ben_acc_no'] = '';
        $scope.model._GET['ben_acc_no'] = dibContainer.modelItem({
            key : 'ben_acc_no',
            dataType : "text", 
            create : true,
            update : true,
            service : null,
            itemAlias : false
        });
        $scope.model['client_name1'] = '';
        $scope.model._GET['client_name1'] = dibContainer.modelItem({
            key : 'client_name1',
            dataType : "text", 
            create : true,
            update : true,
            service : null,
            itemAlias : false
        });
        $scope.model['client_name2'] = '';
        $scope.model._GET['client_name2'] = dibContainer.modelItem({
            key : 'client_name2',
            dataType : "text", 
            create : true,
            update : true,
            service : null,
            itemAlias : false
        });
        $scope.model['select___nominee_id'] = '';
        $scope.model._GET['nominee_id'] = dibContainer.modelItem({
            key : 'nominee_id',
            dataType : "select", 
            create : true,
            update : true,
            service : service211382,
            itemAlias : false
        });
        $scope.model['select___beneficiary_id'] = '';
        $scope.model._GET['beneficiary_id'] = dibContainer.modelItem({
            key : 'beneficiary_id',
            dataType : "select", 
            create : true,
            update : true,
            service : service211383,
            itemAlias : false
        });
        $scope.model['select___code'] = '';
        $scope.model._GET['code'] = dibContainer.modelItem({
            key : 'code',
            dataType : "select", 
            create : true,
            update : true,
            service : service211384,
            itemAlias : false
        });
        $scope.model['unique_code_count'] = '';
        $scope.model._GET['unique_code_count'] = dibContainer.modelItem({
            key : 'unique_code_count',
            dataType : "number", 
            create : true,
            update : true,
            service : null,
            itemAlias : false
        });
        $scope.model['select___market_cap_id'] = '';
        $scope.model._GET['market_cap_id'] = dibContainer.modelItem({
            key : 'market_cap_id',
            dataType : "select", 
            create : true,
            update : true,
            service : service211386,
            itemAlias : false
        });
        $scope.model['address1'] = '';
        $scope.model._GET['address1'] = dibContainer.modelItem({
            key : 'address1',
            dataType : "text", 
            create : true,
            update : true,
            service : null,
            itemAlias : false
        });
        $scope.model['address2'] = '';
        $scope.model._GET['address2'] = dibContainer.modelItem({
            key : 'address2',
            dataType : "text", 
            create : true,
            update : true,
            service : null,
            itemAlias : false
        });
        $scope.model['address3'] = '';
        $scope.model._GET['address3'] = dibContainer.modelItem({
            key : 'address3',
            dataType : "text", 
            create : true,
            update : true,
            service : null,
            itemAlias : false
        });
        $scope.model['address4'] = '';
        $scope.model._GET['address4'] = dibContainer.modelItem({
            key : 'address4',
            dataType : "text", 
            create : true,
            update : true,
            service : null,
            itemAlias : false
        });
        $scope.model['postal_code'] = '';
        $scope.model._GET['postal_code'] = dibContainer.modelItem({
            key : 'postal_code',
            dataType : "text", 
            create : true,
            update : true,
            service : null,
            itemAlias : false
        });
        $scope.model['country_code'] = '';
        $scope.model._GET['country_code'] = dibContainer.modelItem({
            key : 'country_code',
            dataType : "text", 
            create : true,
            update : true,
            service : null,
            itemAlias : false
        });
        $scope.model['class_code'] = '';
        $scope.model._GET['class_code'] = dibContainer.modelItem({
            key : 'class_code',
            dataType : "text", 
            create : true,
            update : true,
            service : null,
            itemAlias : false
        });
        $scope.model['holdings'] = '';
        $scope.model._GET['holdings'] = dibContainer.modelItem({
            key : 'holdings',
            dataType : "text", 
            create : true,
            update : true,
            service : null,
            itemAlias : false
        });
        $scope.model['holdings2'] = '';
        $scope.model._GET['holdings2'] = dibContainer.modelItem({
            key : 'holdings2',
            dataType : "text", 
            create : true,
            update : true,
            service : null,
            itemAlias : false
        });
        $scope.model['shares'] = '';
        $scope.model._GET['shares'] = dibContainer.modelItem({
            key : 'shares',
            dataType : "number", 
            create : true,
            update : true,
            service : null,
            itemAlias : false
        });
        $scope.model['market_value'] = '';
        $scope.model._GET['market_value'] = dibContainer.modelItem({
            key : 'market_value',
            dataType : "number", 
            create : true,
            update : true,
            service : null,
            itemAlias : false
        });
        $scope.model['recon_ind'] = '';
        $scope.model._GET['recon_ind'] = dibContainer.modelItem({
            key : 'recon_ind',
            dataType : "text", 
            create : true,
            update : true,
            service : null,
            itemAlias : false
        });
        $scope.model['inst_holder'] = '';
        $scope.model._GET['inst_holder'] = dibContainer.modelItem({
            key : 'inst_holder',
            dataType : "text", 
            create : true,
            update : true,
            service : null,
            itemAlias : false
        });
        $scope.model['uniqueid'] = '';
        $scope.model._GET['uniqueid'] = dibContainer.modelItem({
            key : 'uniqueid',
            dataType : "text", 
            create : true,
            update : true,
            service : null,
            itemAlias : false
        });
        $scope.model['select___company_id'] = '';
        $scope.model._GET['company_id'] = dibContainer.modelItem({
            key : 'company_id',
            dataType : "select", 
            create : true,
            update : true,
            service : service211401,
            itemAlias : false
        });
        $scope.view = {};
            var reloadContainerFunctions = [];
            dibContainer.watchModel($scope);
	        $scope.dibCommon = dibCommon;
            $scope.primaryKeys = ["id"];
        var $dibContainer = $element.first();
        $scope.menus = {};
    $scope.dropdowns = {};
    $scope.dropdowns.service211378 = {};
    $scope.dropdowns.service211378.items = [];
    var setTimeoutCancel211378 = null;
    var $dibContainer = $element.first();
    var query211378;
    $scope.loadService211378 = function (query, skipTimeout) {
        if (query211378 != query) {
            query211378 = query;
            if (!!skipTimeout) {
                return service211378.list($scope,$dibContainer, query).then(function (items) {
                    $scope.dropdowns.service211378.items = items;
                });
            } else {
                clearTimeout(setTimeoutCancel211378);
                setTimeoutCancel211378 = setTimeout(function () { 
                    service211378.list($scope,$dibContainer, query).then(function (items) {
                        $scope.dropdowns.service211378.items = items;
                    });
                }, 100);
            }
        } 
    };
    $scope.dropdowns.service211378.searchTextChange = function (query) {
        $scope.loadService211378(query);
    };
    $scope.dropdowns.service211378.getItems = function (query,modelType) {
        return service211378.list($scope,$dibContainer, query,modelType);
    };
    $scope.select211378 = function (model,modelName,fieldName) {
        if (!!modelName == false) modelName ="model";
        var $element =  $('#ci211378');
        if (!!$element.attr('select-model') === false) { 
            $element = $element.find('[select-model]');
        }
        var modelName =  'selected___' + fieldName;
        $element.trigger('select');
        if (!!model[modelName]  === false) { 
            return  false;
        }
        angular.forEach($scope.dropdowns.service211378.items, function (item, index)   {
            if (item.id == model[modelName]['id']) {
                model[modelName]['id_display_value'] = item.id_display_value; 
                return false;
            }
        });
    };
    $scope.dropdowns.service211382 = {};
    $scope.dropdowns.service211382.items = [];
    var setTimeoutCancel211382 = null;
    var $dibContainer = $element.first();
    var query211382;
    $scope.loadService211382 = function (query, skipTimeout) {
        if (query211382 != query) {
            query211382 = query;
            if (!!skipTimeout) {
                return service211382.list($scope,$dibContainer, query).then(function (items) {
                    $scope.dropdowns.service211382.items = items;
                });
            } else {
                clearTimeout(setTimeoutCancel211382);
                setTimeoutCancel211382 = setTimeout(function () { 
                    service211382.list($scope,$dibContainer, query).then(function (items) {
                        $scope.dropdowns.service211382.items = items;
                    });
                }, 100);
            }
        } 
    };
    $scope.dropdowns.service211382.searchTextChange = function (query) {
        $scope.loadService211382(query);
    };
    $scope.dropdowns.service211382.getItems = function (query,modelType) {
        return service211382.list($scope,$dibContainer, query,modelType);
    };
    $scope.select211382 = function (model,modelName,fieldName) {
        if (!!modelName == false) modelName ="model";
        var $element =  $('#ci211382');
        if (!!$element.attr('select-model') === false) { 
            $element = $element.find('[select-model]');
        }
        var modelName =  'selected___' + fieldName;
        $element.trigger('select');
        if (!!model[modelName]  === false) { 
            return  false;
        }
        angular.forEach($scope.dropdowns.service211382.items, function (item, index)   {
            if (item.id == model[modelName]['id']) {
                model[modelName]['id_display_value'] = item.id_display_value; 
                return false;
            }
        });
    };
    $scope.dropdowns.service211383 = {};
    $scope.dropdowns.service211383.items = [];
    var setTimeoutCancel211383 = null;
    var $dibContainer = $element.first();
    var query211383;
    $scope.loadService211383 = function (query, skipTimeout) {
        if (query211383 != query) {
            query211383 = query;
            if (!!skipTimeout) {
                return service211383.list($scope,$dibContainer, query).then(function (items) {
                    $scope.dropdowns.service211383.items = items;
                });
            } else {
                clearTimeout(setTimeoutCancel211383);
                setTimeoutCancel211383 = setTimeout(function () { 
                    service211383.list($scope,$dibContainer, query).then(function (items) {
                        $scope.dropdowns.service211383.items = items;
                    });
                }, 100);
            }
        } 
    };
    $scope.dropdowns.service211383.searchTextChange = function (query) {
        $scope.loadService211383(query);
    };
    $scope.dropdowns.service211383.getItems = function (query,modelType) {
        return service211383.list($scope,$dibContainer, query,modelType);
    };
    $scope.select211383 = function (model,modelName,fieldName) {
        if (!!modelName == false) modelName ="model";
        var $element =  $('#ci211383');
        if (!!$element.attr('select-model') === false) { 
            $element = $element.find('[select-model]');
        }
        var modelName =  'selected___' + fieldName;
        $element.trigger('select');
        if (!!model[modelName]  === false) { 
            return  false;
        }
        angular.forEach($scope.dropdowns.service211383.items, function (item, index)   {
            if (item.id == model[modelName]['id']) {
                model[modelName]['id_display_value'] = item.id_display_value; 
                return false;
            }
        });
    };
    $scope.dropdowns.service211384 = {};
    $scope.dropdowns.service211384.items = [];
    var setTimeoutCancel211384 = null;
    var $dibContainer = $element.first();
    var query211384;
    $scope.loadService211384 = function (query, skipTimeout) {
        if (query211384 != query) {
            query211384 = query;
            if (!!skipTimeout) {
                return service211384.list($scope,$dibContainer, query).then(function (items) {
                    $scope.dropdowns.service211384.items = items;
                });
            } else {
                clearTimeout(setTimeoutCancel211384);
                setTimeoutCancel211384 = setTimeout(function () { 
                    service211384.list($scope,$dibContainer, query).then(function (items) {
                        $scope.dropdowns.service211384.items = items;
                    });
                }, 100);
            }
        } 
    };
    $scope.dropdowns.service211384.searchTextChange = function (query) {
        $scope.loadService211384(query);
    };
    $scope.dropdowns.service211384.getItems = function (query,modelType) {
        return service211384.list($scope,$dibContainer, query,modelType);
    };
    $scope.select211384 = function (model,modelName,fieldName) {
        if (!!modelName == false) modelName ="model";
        var $element =  $('#ci211384');
        if (!!$element.attr('select-model') === false) { 
            $element = $element.find('[select-model]');
        }
        var modelName =  'selected___' + fieldName;
        $element.trigger('select');
        if (!!model[modelName]  === false) { 
            return  false;
        }
        angular.forEach($scope.dropdowns.service211384.items, function (item, index)   {
            if (item.id == model[modelName]['id']) {
                model[modelName]['id_display_value'] = item.id_display_value; 
                return false;
            }
        });
    };
    $scope.dropdowns.service211386 = {};
    $scope.dropdowns.service211386.items = [];
    var setTimeoutCancel211386 = null;
    var $dibContainer = $element.first();
    var query211386;
    $scope.loadService211386 = function (query, skipTimeout) {
        if (query211386 != query) {
            query211386 = query;
            if (!!skipTimeout) {
                return service211386.list($scope,$dibContainer, query).then(function (items) {
                    $scope.dropdowns.service211386.items = items;
                });
            } else {
                clearTimeout(setTimeoutCancel211386);
                setTimeoutCancel211386 = setTimeout(function () { 
                    service211386.list($scope,$dibContainer, query).then(function (items) {
                        $scope.dropdowns.service211386.items = items;
                    });
                }, 100);
            }
        } 
    };
    $scope.dropdowns.service211386.searchTextChange = function (query) {
        $scope.loadService211386(query);
    };
    $scope.dropdowns.service211386.getItems = function (query,modelType) {
        return service211386.list($scope,$dibContainer, query,modelType);
    };
    $scope.select211386 = function (model,modelName,fieldName) {
        if (!!modelName == false) modelName ="model";
        var $element =  $('#ci211386');
        if (!!$element.attr('select-model') === false) { 
            $element = $element.find('[select-model]');
        }
        var modelName =  'selected___' + fieldName;
        $element.trigger('select');
        if (!!model[modelName]  === false) { 
            return  false;
        }
        angular.forEach($scope.dropdowns.service211386.items, function (item, index)   {
            if (item.id == model[modelName]['id']) {
                model[modelName]['id_display_value'] = item.id_display_value; 
                return false;
            }
        });
    };
    $scope.dropdowns.service211401 = {};
    $scope.dropdowns.service211401.items = [];
    var setTimeoutCancel211401 = null;
    var $dibContainer = $element.first();
    var query211401;
    $scope.loadService211401 = function (query, skipTimeout) {
        if (query211401 != query) {
            query211401 = query;
            if (!!skipTimeout) {
                return service211401.list($scope,$dibContainer, query).then(function (items) {
                    $scope.dropdowns.service211401.items = items;
                });
            } else {
                clearTimeout(setTimeoutCancel211401);
                setTimeoutCancel211401 = setTimeout(function () { 
                    service211401.list($scope,$dibContainer, query).then(function (items) {
                        $scope.dropdowns.service211401.items = items;
                    });
                }, 100);
            }
        } 
    };
    $scope.dropdowns.service211401.searchTextChange = function (query) {
        $scope.loadService211401(query);
    };
    $scope.dropdowns.service211401.getItems = function (query,modelType) {
        return service211401.list($scope,$dibContainer, query,modelType);
    };
    $scope.select211401 = function (model,modelName,fieldName) {
        if (!!modelName == false) modelName ="model";
        var $element =  $('#ci211401');
        if (!!$element.attr('select-model') === false) { 
            $element = $element.find('[select-model]');
        }
        var modelName =  'selected___' + fieldName;
        $element.trigger('select');
        if (!!model[modelName]  === false) { 
            return  false;
        }
        angular.forEach($scope.dropdowns.service211401.items, function (item, index)   {
            if (item.id == model[modelName]['id']) {
                model[modelName]['id_display_value'] = item.id_display_value; 
                return false;
            }
        });
    };
            $scope.openAuditTrail = function (portAlias) {
                            var primaryKeyData = dibRecord.primaryKeyAuditIds($scope.primaryKeys, $scope.model);
                            if (primaryKeyData.length > 0) {
                            dibCommon.goTo(DIB.audit_trail_container,portAlias,true,"?filter_pef_table_id=4619&filter_record_id="+primaryKeyData);
                        } else {
                            dibCommon.goTo(DIB.audit_trail_container,portAlias,true,"?filter_pef_table_id=4619");
                        }
            };
        ctrl.$onInit = function () {
            $scope.gridOptions = {};
            $scope.gridOptions.data = 'gridData';
            $scope.gridOptions.enableFiltering = true;
            $scope.gridOptions.inlineAddShow = "" == "true";
            /**
            * Inline add show/hide
            */
            $scope.toggleInlineAdd = function () { 
                dibGrid.toggleInlineAdd($scope, $element); 
            };
            /**
            * Copy the selected record to the current row.
            */
            $scope.useSelectedRow = function ($event, model) { 
                dibGrid.useSelectedRow($scope, $event, model);
            };
            $scope.selectedItems = [];
            $scope.lastSelectedItem = null;
            var arraySelected = [];
            /**
            * Select the row
            */
            $scope.selectRow = function (row,$event) { 
               dibGrid.selectRow($scope,$element, row, $event);
               if (!!$event) return;//To enable double click we cancel the event
               if (row.___selected) {
                }  else {
                }
            };
            /**
            * Save the row data
            */
            $scope.saveRow = function ($event, row) {
                var element = $($event.target).parents('[dib-inline-edit]');
                element.trigger('editClose');    
                $event.stopPropagation();
                $event.preventDefault();
            };
            /**
            * Add the row
            */
            $scope.addRow = function ($event, row) {
                var element = $($event.target).parents('[dib-inline-edit]');
                element.trigger('addRow');    
                $event.stopPropagation();
                $event.preventDefault();
            };
            /**
            * Cancel row and close editing
            */
            $scope.cancelRow = function ($event, row) {
                var element = $($event.target).parents('[dib-inline-edit]');
                row.___editing = false;
                row.___selected = true;
                element.find('[dib-edit]').hide();
                element.find('[dib-view]').show();
                $event.stopPropagation();
                $event.preventDefault();
            };
            /**
            * clean row mainly used to cancel inline add.
            */
            $scope.cleanRow = function ($event, model, $form) {
                $form.$setDirty(false);
                dibForm.clean($form,model);
                $event.stopPropagation();
                $event.preventDefault();
            };
            /**
            * Double click event gets triggered then the row can be editable
            */
            $scope.rowEdit = function (element) {
                var $rowElement = $(element).find('[dib-inline-edit]');
                if ($rowElement.length > 0) {
                    //Open
                    $rowElement.trigger('edit');
                    $rowElement.removeClass('md-accent');    
                } else {
                    //Closed
                    $containerItemElement.parents('[dib-inline-edit=open]').trigger('editClose');        
                }
                var $rowElement =$rowElement.parents('[dib-inline-edit=add-mode]');
                if ($rowElement.length>0) {
                    $rowElement.trigger('addRow');
                }
            };
            /**
            * The itemAliasData function on the scope is how we collect data from this component/dropin for submissionData, or when the component is referenced by using its itemAlias
            */
            $scope.itemAliasData = function () {
                if (!!$scope.lastSelectedItem == false) return null;
                var itemSelected = dibRecord.primaryKeyData($scope.primaryKeys, $scope.lastSelectedItem);
                angular.extend(itemSelected, dibRecord.getDataFromSelected($scope, $scope.lastSelectedItem, true).recordData);
                return itemSelected;
            };
        /**
         * Custom sorting added Cobus
         */
        $scope.gridOptions.sortFields = {};
        $scope.gridOptions.sortNr = 0;
        function applySortFromUrl() { 
            var sortUrlChange= dibContainer.urlContainer("importStrateGrid");
             var searchLength = Object.keys($location.search()).length;
            if (sortUrlChange && searchLength>0) {
                //apply search from urlContainer
                $scope.gridOptions.sortNr = 0;
                angular.forEach($location.search(), function (item,index) {
                    if (index.indexOf("sort_") !==-1) { 
                        $scope.gridOptions.sortNr ++;
                        var splitValues = item.split("::");
                        $scope.gridOptions.sortFields[index.replace('sort_','')]= {
                            "Order" : splitValues[0],
                            "Count" :  splitValues[1]
                        } 
                    } 
                });
                //apply sort from urlContainer
            }
        }
        $scope.gridOptions.toggleSort = function (fieldName) { 
            var sortUrlChange= dibContainer.urlContainer("importStrateGrid");
            if (!!$scope.gridOptions.sortFields[fieldName] && $scope.gridOptions.sortFields[fieldName]['Order'] === "ASC") { 
                $scope.gridOptions.sortFields[fieldName]['Order'] = "DESC";
                if (sortUrlChange ) $location.search("sort_"+fieldName,"DESC::"+$scope.gridOptions.sortFields[fieldName]['Count']);
            } else if (!!$scope.gridOptions.sortFields[fieldName] && $scope.gridOptions.sortFields[fieldName]['Order'] === "DESC") { 
                $scope.gridOptions.sortNr = 0;
                delete $scope.gridOptions.sortFields[fieldName];
                if (Object.keys($scope.gridOptions.sortFields).length == 0)  {
                    dibContainer.cleanUrlState();
                }
                if (sortUrlChange ) $location.search("sort_"+fieldName,null);
                angular.forEach($scope.gridOptions.sortFields, function (sort,index) { 
                    if (!!sort) { 
                        $scope.gridOptions.sortNr ++;
                        sort['Count'] = $scope.gridOptions.sortNr;
                        if (sortUrlChange ) $location.search("sort_"+index,sort['Order']+"::"+sort['Count']);
                    }
                });
                return;
            } else {
                $scope.gridOptions.sortNr ++;
                $scope.gridOptions.sortFields[fieldName] = {"Order" : "ASC", "Count" : $scope.gridOptions.sortNr };
                if (sortUrlChange ) $location.search("sort_"+fieldName,"ASC::"+$scope.gridOptions.sortNr);
            }
            loadGrid();
        };
            $scope.search = {};
$scope.clearSearch = function () { 
    $scope.search = {};
    dibContainer.cleanUrlState();
    $scope.searchGrid();
};
$scope.searchGrid = function () { 
    var searchUrlChange= dibContainer.urlContainer("importStrateGrid");
    if (searchUrlChange ) {
        //clear search
        angular.forEach($location.search(), function (item,index) {
            if (index.indexOf("filter_") ==0 || index.indexOf("filterDisplay_") ==0) { 
                $location.search(index,null);
            } 
        });
        //fill search
        angular.forEach($scope.search, function (search, index) {
            if (!!search == false) return;
            if (typeof search != 'object') {
                $location.search("filter_"+index,search.replace('&','~~~'));
            } else if (!!search.id && !!search.id_display_value) {
                var key = index.replace('selected___','');
                var urlSearch = {};
                urlSearch["filter_"+key]=search.id;
                urlSearch["filterDisplay_"+key] = dibUtility.fixedEncodeURIComponent(search.id_display_value);
                $location.search(urlSearch);
            }
        });
    }
    loadGrid();
};
$scope.$watch("showSearch", function () {
    //to ensure when the state change that the heights are calculated accordingly.
    $timeout(function () { 
        $("[dib-container=importStrateGrid]").find('.dib-grid-column-content').trigger('refreshHeight')
    },50);
    if (!!$scope.showSearch === false) {
        $scope.search = {};
        if (!!$scope.gridData) loadGrid();
    }
});
function applyFilterFromUrl() { 
    var searchUrlChange= dibContainer.urlContainer("importStrateGrid");
    var searchLength = Object.keys($location.search()).length;
    if (searchUrlChange && searchLength>0) {
        //apply search from urlContainer
        $scope.search = {};
        var urlSearch  =$location.search();
        angular.forEach(urlSearch, function (item,index) {
            if (index.indexOf('filter') === -1) return;
            if (index.indexOf("filter_") ==0) { 
                $scope.showSearch = true;
                $scope.search[index.replace('filter_','')]= item.replace('~~~','&');
            } 
            if (index.indexOf("filterDisplay_") ==0) {
                var selectKeyIndex=  index.replace('filterDisplay_','');
                var selectKey ="selected___" + selectKeyIndex; 
                $scope.search[selectKey]= {};
                $scope.search[selectKey].id = urlSearch["filter_"+selectKeyIndex];
                $scope.search[selectKey].id_display_value = decodeURI(item);
            }
        });
        //apply sort from urlContainer
    } else {
        $scope.search = {};
        $scope.showSearch = false;
    }
}
            $scope.scrollConfig = {
                autoHideScrollbar: false,
                theme: 'light',
                advanced:{
                    updateOnContentResize: true
                },
                    setHeight: 200,
                    scrollInertia: 0
            };
            $scope.createRecord = function (data) {
                $scope.loadingData = true;
                return dibCrud.create($scope, crudController,'importStrateGrid', {
                        data : data
                    }).then(function () {
                    $scope.page.number = 1;
                    loadGrid();
                    return $q.when();
                }, function () { 
                    $scope.loadingData = false;
                    return $q.reject();
                });
            };
            $scope.updateRecord = function (data) {
                $scope.loadingData = true;
                var primaryKeyData = dibRecord.primaryKeyData($scope.primaryKeys, data.recordData);
                return dibCrud.update($scope, crudController,'importStrateGrid',{
                    primaryKeyData : primaryKeyData,
                    data : data,
                    createParams: "{}"
                }).then(function (data) {
                    $scope.loadingData = false;
                    return $q.resolve();
                }, function (data) {
                    $scope.loadingData = false;
                    return $q.reject(data);
                });
            };
            $scope.deleteRecord = function (data) {
                $scope.loadingData = true;
                var primaryKeyData = dibRecord.primaryKeyData($scope.primaryKeys, data);
                return dibCrud.delete($scope,crudController,'importStrateGrid',data,$scope.primaryKeys).then(function () {
                    $scope.page.number = 1;
                    loadGrid();
                });
            };
            var deleteSelectedRecords = function () { 
                if ($scope.selectedItems.length > 0) {
                    $scope.loadingData = true;
                    var selectedRecord =  $scope.selectedItems.pop();
                    var primaryKeyData = dibRecord.primaryKeyData($scope.primaryKeys, selectedRecord);
                    dibCrud.delete($scope,crudController,'importStrateGrid',{
                        primaryKeyData : primaryKeyData
                    }).then(function (data) {
                        deleteSelectedRecords();
                        return $q.resolve();
                    }, function (data) {
                        deleteSelectedRecords();
                        return $q.reject(data);
                    });
                } else if ($scope.loadingData) { 
                    loadGrid();
                }
            };
            $scope.deleteSelected = function() { 
                dibMessage.confirm({
                    title: 'Delete selected records',
                    text : 'Warning - are you sure you want to permanently delete all the selected records?'
                }).then(function () { 
                    deleteSelectedRecords();
                });
            };
        $scope.page = {
            count : 0,
            limit : 10,
            number : 1
        };
        $scope.nextPage = function () {
           $scope.page.number++;
        };
        $scope.lastPage = function () {
            $scope.page.number = $scope.page.count;
        };
        $scope.firstPage = function () {
            $scope.page.number = 1;
        };
        $scope.previousPage = function () {
           $scope.page.number--;
        };
        $scope.$watch("page.limit", function () {
           $scope.page.number = 1;
           if (!!$scope.gridData) loadGrid();
        });
        $scope.$watch("page.number", function () {
           if (!!$scope.gridData) loadGrid();
        });
            applyFilterFromUrl();
            applySortFromUrl();
            $scope.reloadContainer  = function (options) {
                    applyFilterFromUrl();
                    applySortFromUrl();
                    loadGrid();
            };
        };
        ctrl.$postLink = function () {
                $scope.reloadContainer({ force : true });
        };
        function loadGrid() {
            $scope.loadingData = true;  
            dibCrud.list($scope, $element, crudController,'importStrateGrid',$scope.page, $scope.search, null, $scope.gridOptions.sortFields).then(function (data) {
                $scope.selectedItems = [];
                $scope.lastSelectedItem = null;
                var arraySelected = [];
                $scope.page.count = Math.ceil(data.filtertotal / $scope.page.limit, 10);
                $scope.page.records = data.filtertotal;
                $scope.page.totalRecords = data.total;
                $scope.page.fromRecord = $scope.page.number==1? 1 : ($scope.page.number-1)*$scope.page.limit;
                $scope.page.toRecord = $scope.page.fromRecord==1? $scope.page.fromRecord + data.records.length - 1 : $scope.page.fromRecord + data.records.length;
                if ($scope.page.fromRecord == 1 && data.records.length ==0 ) {
                    $scope.page.fromRecord = 0;
                }
                if ($scope.page.number != 1 && data.records.length ==0) { 
                    loadGrid();
                    $scope.page.number --;
                    return;
                }
                $scope.loadingData = false;
                $scope.gridData = data.records;
                $timeout(function () { 
                    $('[dib-container=importStrateGrid]').find('[select-default]').trigger('refreshDefault'); 
                },100);
            }, function (error) { 
                $scope.loadingData = false;
            });
        };
    }
})();
