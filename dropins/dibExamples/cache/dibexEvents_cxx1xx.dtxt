
(function() {
    var require = [ ];
    require.push('/dropins/setNgMaterial/dibGlobals/js/component/selectDefault.js');
    var files = [];
    angular.forEach(require, function (file,index) { 
        files.push(DIB.base_url+'/files'+file);
    });
    files.push( DIB.base_url + '/dropins/setNgMaterial/dibGrid/Template/controller/dibtestConsultantGrid.js');
    files.push( DIB.base_url + '/dropins/setNgMaterial/dibHtmlTemplate/Template/controller/dibtestETEventsReport.js');
    files.push( DIB.base_url + '/dropins/setNgMaterial/dibGrid/Template/controller/dibtestConsultantEventsGrid.js');
    files.push( DIB.base_url + '/dropins/setNgMaterial/dibGrid/Template/controller/dibtestCompanyGrid.js');
    files.push( DIB.base_url + '/dropins/setNgMaterial/dibForm/Template/controller/dibtestChildForm.js');
    files.push( DIB.base_url + '/dropins/setNgMaterial/dibGrid/Template/controller/dibtestCompanyConsultantGrid.js');
    var dibexEvents = angular.module('dibexEvents', [files]);
    dibexEvents.service('service155095',service155095); 
    service155095.$inject = ['dibAjax', 'dibDiscover', '$q'];
    function service155095(dibAjax, dibDiscover, $q) {
            return {
                list : list
            };       
            function list($scope, $element, query, modelType, page) {
                var $defer = $q.defer();
                var url = dibDiscover.updateQueryStringDropdown(DIB.base_url + "/peff/Crud/componentlist/dibexEvents?containerItemId=155095", query, modelType, page);
                var requestInfo = dibDiscover.addToUrl({
                    field :$('#ci155095'),
                    $scope : $scope,
                    container : $element,
                    url : url
                });
                return dibAjax.post(requestInfo, {
                    excludeFromCancels : true,
                    factoryResult : function (data) {
                        return data.records;
                    }
                });
            };
    };
    dibexEvents.service('service155121',service155121); 
    service155121.$inject = ['dibAjax', 'dibDiscover', '$q'];
    function service155121(dibAjax, dibDiscover, $q) {
            return {
                list : list
            };       
            function list($scope, $element, query, modelType, page) {
                var $defer = $q.defer();
                var url = dibDiscover.updateQueryStringDropdown(DIB.base_url + "/peff/Crud/componentlist/dibexEvents?containerItemId=155121", query, modelType, page);
                var requestInfo = dibDiscover.addToUrl({
                    field :$('#ci155121'),
                    $scope : $scope,
                    container : $element,
                    url : url
                });
                return dibAjax.post(requestInfo, {
                    excludeFromCancels : true,
                    factoryResult : function (data) {
                        return data.records;
                    }
                });
            };
    };
    dibexEvents.service('service180007',service180007); 
    service180007.$inject = ['dibAjax', 'dibDiscover', '$q'];
    function service180007(dibAjax, dibDiscover, $q) {
            return {
                list : list
            };       
            function list($scope, $element, query, modelType, page) {
                var $defer = $q.defer();
                var url = dibDiscover.updateQueryStringDropdown(DIB.base_url + "/peff/Crud/componentlist/dibexEvents?containerItemId=180007", query, modelType, page);
                var requestInfo = dibDiscover.addToUrl({
                    field :$('#ci180007'),
                    $scope : $scope,
                    container : $element,
                    url : url
                });
                return dibAjax.post(requestInfo, {
                    excludeFromCancels : true,
                    factoryResult : function (data) {
                        return data.records;
                    }
                });
            };
    };
    dibexEvents.service('service194831',service194831); 
    service194831.$inject = ['dibAjax', 'dibDiscover', '$q'];
    function service194831(dibAjax, dibDiscover, $q) {
            return {
                list : list
            };       
            function list($scope, $element, query, modelType, page) {
                var $defer = $q.defer();
                var url = dibDiscover.updateQueryStringDropdown(DIB.base_url + "/peff/Crud/componentlist/dibexEvents?containerItemId=194831", query, modelType, page);
                var requestInfo = dibDiscover.addToUrl({
                    field :$('#ci194831'),
                    $scope : $scope,
                    container : $element,
                    url : url
                });
                return dibAjax.post(requestInfo, {
                    excludeFromCancels : true,
                    factoryResult : function (data) {
                        return data.records;
                    }
                });
            };
    };
    var dibexEvents = angular.module('dibexEvents');
    dibexEvents.component('dibexEvents', {
        controllerAs: 'dibexEvents',
        templateUrl: DIB.base_url + '/dropins/setNgMaterial/dibContainer/Template/view/dibexEvents.html',
        controller : component__dibexEvents
    });
    component__dibexEvents.$inject = [ '$scope','$element','dibCrud','dibNavigation','dibAction','dibContainer','dibDiscover','dibRecord','dibUtility','dibCommon','$log','$q','$ocLazyLoad','service155095','service155121','service180007','service194831'];
    function component__dibexEvents($scope,$element,dibCrud,dibNavigation,dibAction,dibContainer,dibDiscover,dibRecord,dibUtility,dibCommon,$log,$q,$ocLazyLoad,service155095,service155121,service180007,service194831) {
        var ctrl = this;
                    $scope.container = {};
            $scope.container.Id = '7146';
            $scope.container.Name = 'dibexEvents';
            $scope.container.SubContainerItemAliases = ["dibtestConsultantGrid","subTestHtmlEvents","test_company_grid","CompanyConsultantGrid"]; 
            var crudController = "/peff/Crud";
                    $scope.model = {};
        $scope.model._GET = {};
        $scope.model['select___test_company_id'] = '';
        $scope.model._GET['test_company_id'] = dibContainer.modelItem({
            key : 'test_company_id',
            dataType : "select", 
            create : true,
            update : true,
            service : service155095,
            itemAlias : 'companyId'
        });
        $scope.model['Textfield1'] = '';
        $scope.model._GET['Textfield1'] = dibContainer.modelItem({
            key : 'Textfield1',
            dataType : "text", 
            create : true,
            update : true,
            service : null,
            itemAlias : 'Textfield1'
        });
        $scope.model['Textfield2'] = '';
        $scope.model._GET['Textfield2'] = dibContainer.modelItem({
            key : 'Textfield2',
            dataType : "text", 
            create : true,
            update : true,
            service : null,
            itemAlias : 'Textfield2'
        });
        $scope.model['select___company1Id'] = '';
        $scope.model._GET['company1Id'] = dibContainer.modelItem({
            key : 'company1Id',
            dataType : "select", 
            create : true,
            update : true,
            service : service155121,
            itemAlias : 'company1Id'
        });
        $scope.model['companyList'] = '';
        $scope.model._GET['companyList'] = dibContainer.modelItem({
            key : 'companyList',
            dataType : "text", 
            create : true,
            update : true,
            service : null,
            itemAlias : 'companyList'
        });
        $scope.model['recipientAlias'] = '';
        $scope.model._GET['recipientAlias'] = dibContainer.modelItem({
            key : 'recipientAlias',
            dataType : "text", 
            create : true,
            update : true,
            service : null,
            itemAlias : 'recipientAlias'
        });
        $scope.model['msg'] = '';
        $scope.model._GET['msg'] = dibContainer.modelItem({
            key : 'msg',
            dataType : "text", 
            create : true,
            update : true,
            service : null,
            itemAlias : 'msg'
        });
        $scope.model['text1'] = '';
        $scope.model._GET['text1'] = dibContainer.modelItem({
            key : 'text1',
            dataType : "text", 
            create : true,
            update : true,
            service : null,
            itemAlias : 'text1'
        });
        $scope.model['select___queueLoginId'] = '';
        $scope.model._GET['queueLoginId'] = dibContainer.modelItem({
            key : 'queueLoginId',
            dataType : "select", 
            create : true,
            update : true,
            service : service180007,
            itemAlias : 'queueLoginId'
        });
        $scope.model['queueMsg'] = '';
        $scope.model._GET['queueMsg'] = dibContainer.modelItem({
            key : 'queueMsg',
            dataType : "text", 
            create : true,
            update : true,
            service : null,
            itemAlias : 'queueMsg'
        });
        $scope.model['select___htmlCompanyId'] = '';
        $scope.model._GET['htmlCompanyId'] = dibContainer.modelItem({
            key : 'htmlCompanyId',
            dataType : "select", 
            create : true,
            update : true,
            service : service194831,
            itemAlias : 'htmlCompanyId'
        });
        $scope.model['containerEvents'] = '';
        $scope.model._GET['containerEvents'] = dibContainer.modelItem({
            key : 'containerEvents',
            dataType : "text", 
            create : true,
            update : true,
            service : null,
            itemAlias : 'containerEvents'
        });
        $scope.model['SelectTextEvent'] = '';
        $scope.model._GET['SelectTextEvent'] = dibContainer.modelItem({
            key : 'SelectTextEvent',
            dataType : "text", 
            create : true,
            update : true,
            service : null,
            itemAlias : false
        });
        $scope.model['CopyEvent'] = '';
        $scope.model._GET['CopyEvent'] = dibContainer.modelItem({
            key : 'CopyEvent',
            dataType : "text", 
            create : true,
            update : true,
            service : null,
            itemAlias : false
        });
        $scope.model['userAlias'] = '';
        $scope.model._GET['userAlias'] = dibContainer.modelItem({
            key : 'userAlias',
            dataType : "text", 
            create : true,
            update : true,
            service : null,
            itemAlias : 'userAlias'
        });
        $scope.view = {};
            $scope.view.mdtabs = {'disabled' : false,'visible' : true, 'class' : null, 'style' : null };
            $scope.view.colBasics = {'disabled' : false,'visible' : true, 'class' : null, 'style' : null };
            $scope.view.dibtestConsultantGrid = {'disabled' : false,'visible' : true, 'class' : null, 'style' : null };
            $scope.view.subTestHtmlEvents = {'disabled' : false,'visible' : true, 'class' : null, 'style' : null };
            $scope.view.companyId = {'disabled' : false,'visible' : true, 'class' : null, 'style' : null };
            $scope.view.btnHelloWorld = {'disabled' : false,'visible' : true, 'class' : null, 'style' : null };
            $scope.view.Textfield1 = {'disabled' : false,'visible' : true, 'class' : null, 'style' : null };
            $scope.view.Textfield2 = {'disabled' : false,'visible' : true, 'class' : null, 'style' : null };
            $scope.view.activeFilterCompany1 = {'disabled' : false,'visible' : true, 'class' : null, 'style' : null };
            $scope.view.activeFilterSupervisors = {'disabled' : false,'visible' : true, 'class' : null, 'style' : null };
            $scope.view.none = {'disabled' : false,'visible' : true, 'class' : null, 'style' : null };
            $scope.view.company1Id = {'disabled' : false,'visible' : true, 'class' : null, 'style' : null };
            $scope.view.btnPrompt = {'disabled' : false,'visible' : true, 'class' : null, 'style' : null };
            $scope.view.companyList = {'disabled' : false,'visible' : true, 'class' : null, 'style' : null };
            $scope.view.recipientAlias = {'disabled' : false,'visible' : true, 'class' : null, 'style' : null };
            $scope.view.msg = {'disabled' : false,'visible' : true, 'class' : null, 'style' : null };
            $scope.view.test_company_grid = {'disabled' : false,'visible' : true, 'class' : null, 'style' : null };
            $scope.view.hiddenPopupButton = {'disabled' : false,'visible' : true, 'class' : null, 'style' : null };
            $scope.view.hiddenPromptButton = {'disabled' : false,'visible' : true, 'class' : null, 'style' : null };
            $scope.view.text1 = {'disabled' : false,'visible' : true, 'class' : null, 'style' : null };
            $scope.view.queueLoginId = {'disabled' : false,'visible' : true, 'class' : null, 'style' : null };
            $scope.view.queueMsg = {'disabled' : false,'visible' : true, 'class' : null, 'style' : null };
            $scope.view.btnHidden = {'disabled' : false,'visible' : true, 'class' : null, 'style' : null };
            $scope.view.btnDisable = {'disabled' : false,'visible' : true, 'class' : null, 'style' : null };
            $scope.view.btnSetStyleClass = {'disabled' : false,'visible' : true, 'class' : null, 'style' : null };
            $scope.view.CompanyConsultantGrid = {'disabled' : false,'visible' : true, 'class' : null, 'style' : null };
            $scope.view.activeFilterOriginal = {'disabled' : false,'visible' : true, 'class' : null, 'style' : null };
            $scope.view.htmlCompanyId = {'disabled' : false,'visible' : true, 'class' : null, 'style' : null };
            $scope.view.containerEvents = {'disabled' : false,'visible' : true, 'class' : null, 'style' : null };
            $scope.view.userAlias = {'disabled' : false,'visible' : true, 'class' : null, 'style' : null };
            var reloadContainerFunctions = [];
            dibContainer.watchModel($scope);
	        $scope.dibCommon = dibCommon;
            $scope.primaryKeys = [];
        var $dibContainer = $element.first();
        $scope.menus = {};
    $scope.dropdowns = {};
    $scope.dropdowns.service155095 = {};
    $scope.dropdowns.service155095.items = [];
    var setTimeoutCancel155095 = null;
    var $dibContainer = $element.first();
    var query155095;
    $scope.loadService155095 = function (query, skipTimeout) {
        if (query155095 != query) {
            query155095 = query;
            if (!!skipTimeout) {
                return service155095.list($scope,$dibContainer, query).then(function (items) {
                    $scope.dropdowns.service155095.items = items;
                });
            } else {
                clearTimeout(setTimeoutCancel155095);
                setTimeoutCancel155095 = setTimeout(function () { 
                    service155095.list($scope,$dibContainer, query).then(function (items) {
                        $scope.dropdowns.service155095.items = items;
                    });
                }, 100);
            }
        } 
    };
    $scope.dropdowns.service155095.searchTextChange = function (query) {
        $scope.loadService155095(query);
    };
    $scope.dropdowns.service155095.getItems = function (query,modelType) {
        return service155095.list($scope,$dibContainer, query,modelType);
    };
    $scope.select155095 = function (model,modelName,fieldName) {
        if (!!modelName == false) modelName ="model";
        var $element =  $('#ci155095');
        if (!!$element.attr('select-model') === false) { 
            $element = $element.find('[select-model]');
        }
        var modelName =  'selected___' + fieldName;
        $element.trigger('select');
        if (!!model[modelName]  === false) { 
            return  false;
        }
        angular.forEach($scope.dropdowns.service155095.items, function (item, index)   {
            if (item.id == model[modelName]['id']) {
                model[modelName]['id_display_value'] = item.id_display_value; 
                return false;
            }
        });
    };
    $scope.dropdowns.service155121 = {};
    $scope.dropdowns.service155121.items = [];
    var setTimeoutCancel155121 = null;
    var $dibContainer = $element.first();
    var query155121;
    $scope.loadService155121 = function (query, skipTimeout) {
        if (query155121 != query) {
            query155121 = query;
            if (!!skipTimeout) {
                return service155121.list($scope,$dibContainer, query).then(function (items) {
                    $scope.dropdowns.service155121.items = items;
                });
            } else {
                clearTimeout(setTimeoutCancel155121);
                setTimeoutCancel155121 = setTimeout(function () { 
                    service155121.list($scope,$dibContainer, query).then(function (items) {
                        $scope.dropdowns.service155121.items = items;
                    });
                }, 100);
            }
        } 
    };
    $scope.dropdowns.service155121.searchTextChange = function (query) {
        $scope.loadService155121(query);
    };
    $scope.dropdowns.service155121.getItems = function (query,modelType) {
        return service155121.list($scope,$dibContainer, query,modelType);
    };
    $scope.select155121 = function (model,modelName,fieldName) {
        if (!!modelName == false) modelName ="model";
        var $element =  $('#ci155121');
        if (!!$element.attr('select-model') === false) { 
            $element = $element.find('[select-model]');
        }
        var modelName =  'selected___' + fieldName;
        $element.trigger('select');
        if (!!model[modelName]  === false) { 
            return  false;
        }
        angular.forEach($scope.dropdowns.service155121.items, function (item, index)   {
            if (item.id == model[modelName]['id']) {
                model[modelName]['id_display_value'] = item.id_display_value; 
                return false;
            }
        });
    };
    $scope.dropdowns.service180007 = {};
    $scope.dropdowns.service180007.items = [];
    var setTimeoutCancel180007 = null;
    var $dibContainer = $element.first();
    var query180007;
    $scope.loadService180007 = function (query, skipTimeout) {
        if (query180007 != query) {
            query180007 = query;
            if (!!skipTimeout) {
                return service180007.list($scope,$dibContainer, query).then(function (items) {
                    $scope.dropdowns.service180007.items = items;
                });
            } else {
                clearTimeout(setTimeoutCancel180007);
                setTimeoutCancel180007 = setTimeout(function () { 
                    service180007.list($scope,$dibContainer, query).then(function (items) {
                        $scope.dropdowns.service180007.items = items;
                    });
                }, 100);
            }
        } 
    };
    $scope.dropdowns.service180007.searchTextChange = function (query) {
        $scope.loadService180007(query);
    };
    $scope.dropdowns.service180007.getItems = function (query,modelType) {
        return service180007.list($scope,$dibContainer, query,modelType);
    };
    $scope.select180007 = function (model,modelName,fieldName) {
        if (!!modelName == false) modelName ="model";
        var $element =  $('#ci180007');
        if (!!$element.attr('select-model') === false) { 
            $element = $element.find('[select-model]');
        }
        var modelName =  'selected___' + fieldName;
        $element.trigger('select');
        if (!!model[modelName]  === false) { 
            return  false;
        }
        angular.forEach($scope.dropdowns.service180007.items, function (item, index)   {
            if (item.id == model[modelName]['id']) {
                model[modelName]['id_display_value'] = item.id_display_value; 
                return false;
            }
        });
    };
    $scope.dropdowns.service194831 = {};
    $scope.dropdowns.service194831.items = [];
    var setTimeoutCancel194831 = null;
    var $dibContainer = $element.first();
    var query194831;
    $scope.loadService194831 = function (query, skipTimeout) {
        if (query194831 != query) {
            query194831 = query;
            if (!!skipTimeout) {
                return service194831.list($scope,$dibContainer, query).then(function (items) {
                    $scope.dropdowns.service194831.items = items;
                });
            } else {
                clearTimeout(setTimeoutCancel194831);
                setTimeoutCancel194831 = setTimeout(function () { 
                    service194831.list($scope,$dibContainer, query).then(function (items) {
                        $scope.dropdowns.service194831.items = items;
                    });
                }, 100);
            }
        } 
    };
    $scope.dropdowns.service194831.searchTextChange = function (query) {
        $scope.loadService194831(query);
    };
    $scope.dropdowns.service194831.getItems = function (query,modelType) {
        return service194831.list($scope,$dibContainer, query,modelType);
    };
    $scope.select194831 = function (model,modelName,fieldName) {
        if (!!modelName == false) modelName ="model";
        var $element =  $('#ci194831');
        if (!!$element.attr('select-model') === false) { 
            $element = $element.find('[select-model]');
        }
        var modelName =  'selected___' + fieldName;
        $element.trigger('select');
        if (!!model[modelName]  === false) { 
            return  false;
        }
        angular.forEach($scope.dropdowns.service194831.items, function (item, index)   {
            if (item.id == model[modelName]['id']) {
                model[modelName]['id_display_value'] = item.id_display_value; 
                return false;
            }
        });
    };
            $scope.openAuditTrail = function (portAlias) {
                $log.warn('Audit trail not available for this container, as a table is not linked to this view');
            };
        ctrl.$onInit = function () { 
            $scope.recordStatus = "create";
            $scope.reloadContainer = function () {
                //Now we reload all the required 
                dibContainer.reloadChildren({containerName: 'dibexEvents'});
            };
        };
        //required for permissions
        ctrl.$postLink = function () {
        var additionalInfoOnEvent = null;
        dibAction.executeAction({
        scope : $scope,
        field : !!$element ? $element.first() : $('[dib-container=dibexEvents]'),
        containerName: 'dibexEvents',
        triggerType: 'postLink',
        nextActionItem: '',
        containerEventId: '118',        
        containerId: 7146,
        submitUrl: '/dropins/dibExamples/Events/containerEvents',        
        itemAlias: '',
        refreshItemId : '',
        responseType: 'actions'
    }
, additionalInfoOnEvent);
                $scope.reloadContainer({ force : true });
        };
    } 
})();
