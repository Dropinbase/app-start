(function() {var require = ['/dropins/setNgMaterial/dibTree/js/components/dibTreeNode.js','/dropins/setNgMaterial/dibTree/js/components/dibTreeChildNode.js','/dropins/setNgMaterial/dibTree/js/factory/dibNodes.js'];require.push('/dropins/setNgMaterial/dibGlobals/js/component/selectDefault.js');var files = [];angular.forEach(require, function (file,index) {files.push(DIB.base_url+'/files'+file);});var dibtestTree = angular.module('dibtestTree', [files]);dibtestTree.service('treeServicedibtestTree', treeServicedibtestTree);treeServicedibtestTree.$inject = [ 'dibAjax', '$log','dibDiscover', 'dibRecord', 'dibNodes'];function treeServicedibtestTree(dibAjax, $log,dibDiscover, dibRecord, dibNodes) {var service = {drop : drop,read : read,create : create,update : update,delete : dispose}
return service;function drop(options) {var url = DIB.base_url + '/dropins/dibExamples/Tree/drop?containerName=dibtestTree';var container = $('[dib-container=dibtestTree]');var requestInfo = dibDiscover.addToUrl({container : container,field : container,$scope : options.$scope,url : url});angular.forEach(options, function (item,index) {if (index=='$scope') return;requestInfo.url += '&' + index +"="+item;});return dibAjax.post(requestInfo);}
function read($scope, search, activeFilter, nodeId) {var url = DIB.base_url + '/dropins/dibExamples/Tree/read?containerName=dibtestTree';var container = $('[dib-container=dibtestTree]');var requestInfo = dibDiscover.addToUrl({container : container,field : container,$scope : $scope,url : url,activeFilter : activeFilter});if (!!search) {requestInfo.url += "&query="+ search;}
var node= !!nodeId? nodeId : 'root';requestInfo.url += "&node=" + node;return dibAjax.post(requestInfo,{factoryResult : dibNodes.records});}
function create($scope, data, primaryKeys) {var url = DIB.base_url + '/dropins/dibExamples/Tree/create?containerName=dibtestTree';var container = $('[dib-container=dibtestTree]');var requestInfo = dibDiscover.addToUrl({container : container,field : container,$scope : $scope,url : url,primaryKeys : primaryKeys,data : data});return dibAjax.post(requestInfo,null, data);}
function update($scope, data,primaryKeys) {var url = DIB.base_url + '/dropins/dibExamples/Tree/update?containerName=dibtestTree';var container = $('[dib-container=dibtestTree]');var requestInfo = dibDiscover.addToUrl({container : container,field : container,$scope : $scope,url : url,primaryKeys : primaryKeys,data : data});return dibAjax.post(url, null,data);}
function dispose($scope, data,primaryKeys) {var url = DIB.base_url + '/dropins/dibExamples/Tree/delete?containerName=dibtestTree';var container = $('[dib-container=dibtestTree]');var requestInfo = dibDiscover.addToUrl({container : container,field : container,$scope : $scope,url : url,primaryKeys : primaryKeys,data : data});return dibAjax.post(requestInfo,null,data);}}
dibtestTree.factory('dibtestTreeDefinition',dibtestTreeDefinition);dibtestTreeDefinition.$inject = ['dibContainer'];function dibtestTreeDefinition(dibContainer) {return {model : model,view : view,info : info,primaryKeys : primaryKeys};function model() {var model = {};model._GET = {};model['checkSomething'] = '';model._GET['checkSomething'] = dibContainer.modelItem({key : 'checkSomething',dataType : "boolean",create : true,update : true,service : null,itemAlias : 'checkSomething'});return model;};function view() {var view = {};view.pasteChildrenAllRelated1 = {'disabled' : false,'visible' : true, 'class' : null, 'style' : null };view.checkSomething = {'disabled' : false,'visible' : true, 'class' : null, 'style' : null };return view;};function info(){var container = {};container.Id = '7165';container.Name = 'dibtestTree';container.SubContainerItemAliases = [];return container;};function primaryKeys() {return [];};};dibtestTree.component('dibtestTree', {controllerAs: 'dibtestTree',templateUrl: DIB.base_url + '/dropins/setNgMaterial/dibTree/Template/view/dibtestTree.html',controller : component__dibtestTree});component__dibtestTree.$inject = [ 'dibtestTreeDefinition','$scope','$element','dibCrud','dibNavigation','dibAction','dibContainer','dibDiscover','dibRecord','dibUtility','dibCommon','$log','$q','$ocLazyLoad','$timeout', 'treeServicedibtestTree',  '$window','dibKeysPressed','dibNodes'];function component__dibtestTree(dibtestTreeDefinition,$scope,$element,dibCrud,dibNavigation,dibAction,dibContainer,dibDiscover,dibRecord,dibUtility,dibCommon,$log,$q,$ocLazyLoad,$timeout, treeServicedibtestTree,  $window,dibKeysPressed,dibNodes) {var ctrl = this;var crudController = "/peff/Crud";var $dibContainer = $element.first();$scope.container = dibtestTreeDefinition.info();$scope.model = dibtestTreeDefinition.model();$scope.view = dibtestTreeDefinition.view();$scope.primaryKeys = dibtestTreeDefinition.primaryKeys();$scope.dibCommon = dibCommon;dibContainer.watchModel($scope, function () {});var $dibContainer = $element.first();$scope.menus = {};function filterList($scope,$dibContainer,service, query, dropdown) {return service.list($scope,$dibContainer, query).then(function (items) {dropdown.items = items;return $q.when();});}
$scope.dropdowns = {};$scope.openAuditTrail = function (portAlias) {$log.warn('Audit trail not available for this container, as a table is not linked to this view');};ctrl.$onInit = function () {$scope.service = treeServicedibtestTree;$scope.searchTree = function ()  {loadGrid();};$scope.primaryKeys = ['id'];angular.element($window).trigger('resize');$scope.lastSelectedItem = null;var arraySelected = [];$scope.itemAliasData = function () {var itemSelected= angular.copy($scope.lastSelectedItem);if (!!itemSelected && !!itemSelected.children) {itemSelected.children = null;}
return itemSelected;};$scope.$on('nodeclose', function ($event) {$log.debug("Node close");});$scope.$on('nodeopen', function ($event) {$log.debug("Node open");});$scope.$on('treechange', function ($event) {$log.debug("TREECHANGE");$event.stopPropagation();$event.preventDefault();});$scope.$on('beforetreechange', function ($event) {$event.stopPropagation();$event.preventDefault();});$scope.updateSelectedNode = function (id) {function treeData(items) {angular.forEach(items, function (item, index) {if (item.id == id) {item.checked= true;$scope.$emit('selectNode',item);return;}
if (item.children) {treeData(item.children);}});}
treeData($scope.treeData);};$scope.selectedItems = [];$scope.$on('selectNode', function ($event, node) {if (!!node.id === false) return;if (dibKeysPressed.ctrlKey) {if (arraySelected.indexOf(node.id) === -1 && !node.checked) {$scope.lastSelectedItem = node;$log.debug("SELECTED NODE", node);arraySelected.push(node.id);$scope.selectedItems.push(node);$log.debug("CURRENT SELECTED ITEMS IN TREE", arraySelected);return;}
if (arraySelected.indexOf(node.id) !== -1) {arraySelected.splice(arraySelected.indexOf(node.id),1);$scope.selectedItems.splice($scope.selectedItems.indexOf(node),1);}} else if (dibKeysPressed.shiftKey) {dibNodes.shiftSelect($scope.treeData, $scope.lastSelectedItem, node, $scope,arraySelected);$scope.lastSelectedItem = node;} else {$log.debug("SELECTED NODE", node);angular.forEach($scope.selectedItems,function (treeNode,index) {if (treeNode.id != node.id) {treeNode.checked=false;}});$scope.selectedItems = [node];$scope.lastSelectedItem = node;arraySelected= [node.id];}
$log.debug("CURRENT SELECTED ITEMS IN TREE", arraySelected);$event.stopPropagation();$event.preventDefault();});$scope.reloadContainer  = function (options) {loadGrid();};};ctrl.$postLink = function () {$scope.reloadContainer({ force : true });};function loadGrid() {$scope.selectedItems = [];$scope.lastSelectedItem = null;var arraySelected = [];$scope.loadingData = true;$log.log($scope.search);treeServicedibtestTree.read($scope, $scope.search, null).then(function (data) {$scope.loadingData = false;$scope.treeData= data.records;}, function () {$scope.loadingData = false;$scope.treeData =  [{ "text" : 'No tree items returned' , "leaf" : true, 'icon' : '/files/dropins/setNgMaterial/dibTree/img/icons/warning.svg'}];});}}})();