(function() {
  var require = ['/dropins/setNgMaterial/dibForm/js/component/formPaging.js','/dropins/setNgMaterial/dibGlobals/js/component/timeDatePickerInput.js',  
		'/dropins/setNgMaterial/dibForm/js/services/dibForm.js'
	];
  require.push('/dropins/setNgMaterial/dibGlobals/js/component/selectDefault.js');
  var files = [];
  angular.forEach(require, function (file,index) { 
    files.push(DIB__base_url+'/files'+file);
  });
    var dibtestChildForm = angular.module('dibtestChildForm', [files]);
    function updateQueryStringMenu(url, node) { 
        if (!!node === true) {
            return url + "&node="+node;
        } 
        return url + "&node=root";
    };
    dibtestChildForm.service('service155266',service155266); 
    service155266.$inject = ['ajax', 'discoverService', '$q'];
    function service155266(ajax, discoverService, $q) {
            return {
                list : list
            };       
            function list(query, modelType, page) {
                var $defer = $q.defer();
                var url = updateQueryStringDropdown(DIB__base_url + "/peff/Crud/componentlist/dibtestChildForm?containerItemId=155266", query, modelType, page);
                var requestInfo = discoverService.addToUrl({
                    field :$('#ci155266'),
                    container : $('[dib-container=dibtestChildForm]'),
                    url : url
                });
                return ajax.post(requestInfo, {
                    excludeFromCancels : true,
                    factoryResult : function (data) {
                        return data.records;
                    }
                });
            };
    };
    function updateQueryStringDropdown(url, query, modelType, page) {
        url += "&limit=20&page=" + (!!page == true? page: 1);
        if (modelType=='search') { 
            url += "&showUsedOnly=true";
        }
        url += "&query=";
        if (!!query == true) {
            url += query;
        }
        return url;
    };
var dibtestChildForm = angular.module('dibtestChildForm');
dibtestChildForm.component('dibtestChildForm', {
    controllerAs: 'dibtestChildForm',
    templateUrl: DIB__base_url + '/dropins/setNgMaterial/dibForm/Template/view/dibtestChildForm.html',
    controller : component__dibtestChildForm
});
component__dibtestChildForm.$inject = [  
            'dibForm', '$scope','$element', '$ocLazyLoad', '$rootScope', '$log', 'discoverService', 'messageService','$location','actionService', '$q','utilityService', '$timeout', 'activeFilterOverride','service155266','containerService','recordFactory','crudService','utilityService'];
    function component__dibtestChildForm(dibForm, $scope,$element, $ocLazyLoad, $rootScope, $log, discoverService, messageService,$location,actionService, $q,utilityService, $timeout, activeFilterOverride,service155266,containerService,recordFactory,crudService,utilityService) {
        var ctrl = this;        
        ctrl.$postLink = function () {
        if (!!$scope) { 
                $scope.$broadcast('postLink');
        }
        };
        ctrl.$onInit = function () {
       actionService.executeAction(
       {
               scope: $scope,
               containerName: 'dibtestChildForm',
               field: !!$element ? $element.first() : $('[dib-container=dibtestChildForm]'),
               triggerType: 'onInit',
               nextActionItem: null,
               containerEventId: '121',
               submitUrl: '/dropins/dibExamples/Events/containerEvents',
               refreshItemId : '',
               containerId: '7151',
               responseType: 'actions'
        });
        if (!!$scope) { 
                $scope.$broadcast('onInit');
        }
                        $scope.container = {};
            $scope.container.Id = '7151';
            $scope.container.Name = 'dibtestChildForm';
            var crudController = "/peff/Crud";
                    $scope.model = {};
        $scope.model._GET = recordFactory.modelConstruct();
        $scope.model._GET['primkey1'] = containerService.modelItem("text", 
            true,
            true,
            null
        );
        $scope.model._GET['primkey2'] = containerService.modelItem("text", 
            true,
            true,
            null
        );
        $scope.model._GET['pef_test_id'] = containerService.modelItem("select", 
            true,
            true,
            service155266
        );
        $scope.model._GET['date_fld'] = containerService.modelItem("date", 
            true,
            true,
            null
        );
        $scope.model._GET['unique1'] = containerService.modelItem("text", 
            true,
            true,
            null
        );
        $scope.model._GET['unique2'] = containerService.modelItem("text", 
            true,
            true,
            null
        );
        $scope.model._GET['notes'] = containerService.modelItem("text", 
            true,
            true,
            null
        );
        $scope.view = {};
            var reloadContainerFunctions = [];
            containerService.watchModel($scope);
	        $scope.common = $rootScope.common;
            $scope.primaryKeys = ["primkey1","primkey2"];
        $scope.menus = {};
        $scope.dropdowns = {};
        //load all dropdowns required for this container
            $scope.dropdowns.service155266 = {};
            $scope.dropdowns.service155266.items = [];
            var setTimeoutCancel155266 = null;
            var query155266;
            $scope.loadService155266 = function (query, skipTimeout) {
                //This is to prevent to load any unnessary data as this gets triggered a few times with the multi line editing
                if (query155266 != query) {
                    query155266 = query;
                    if (!!skipTimeout) {
                        return service155266.list(query).then(function (items) {
                            $scope.dropdowns.service155266.items = items;
                        });
                    } else {
                        clearTimeout(setTimeoutCancel155266);
                        setTimeoutCancel155266 = setTimeout(function () { 
                            service155266.list(query).then(function (items) {
                                $scope.dropdowns.service155266.items = items;
                            });
                        }, 100);
                    }
                } 
            };
            $scope.dropdowns.service155266.searchTextChange = function (query) {
                $scope.loadService155266(query);
            };
            $scope.dropdowns.service155266.getItems = function (query,modelType) {
                //return promise this will asign the result to the items
                return service155266.list(query,modelType);
            };
            $scope.select155266 = function (model,modelName,fieldName) {
                if (!!modelName == false) modelName ="model";
                var $element =  $('#ci155266');
                if (!!$element.attr('select-model') === false) { 
                    $element = $element.find('[select-model]');
                }
                var modelName =  'selected___' + fieldName;
                $element.trigger('select');
                if (!!model[modelName]  === false) { 
                    return  false;
                }
                angular.forEach($scope.dropdowns.service155266.items, function (item, index)   {
                    if (item.id == model[modelName]['id']) {
                        model[modelName]['id_display_value'] = item.id_display_value; 
                        return false;
                    }
                });
            };
            var setTimeout155266 = null;
            //loadService155266();
            //reloadContainerFunctions.push($scope.loadService155266);
            $scope.openAuditTrail = function (portAlias) {
                            var primaryKeyData = recordFactory.primaryKeyAuditIds($scope.primaryKeys, $scope.model);
                            if (primaryKeyData.length > 0) {
                            $scope.common.goTo(DIB__audit_trail_container,portAlias,true,"?filter_pef_table_id=1438&filter_record_id="+primaryKeyData);
                        } else {
                            $scope.common.goTo(DIB__audit_trail_container,portAlias,true,"?filter_pef_table_id=1438");
                        }
            };
            $scope.addModel = function () { 
                dibForm.addModel($scope, "dibtestChildForm");
            };
            $scope.deleteRecord = function (options) {
                dibForm.deleteRecord('dibtestChildForm', $scope, $scope.dibtestChildForm, options, crudController).then(function (){
        if (!!$scope) { 
                $scope.$broadcast('delete');
        }
                });
            };         
            /**
            *  Saving record in this model
            */
            $scope.saveModel = function (options) {
                if ($scope.loadingData) return $q.reject('Busy loading...');
                if (dibForm.validate($scope, $scope.dibtestChildForm)) {
        if (!!$scope) { 
                $scope.$broadcast('beforeUpdate');
        }
                    $scope.loadingData =  true;
                    var primaryKeyData = recordFactory.primaryKeyData($scope.primaryKeys, $scope.model);
                    return dibForm.updateRecord('dibtestChildForm', $scope, $scope.dibtestChildForm, crudController, options).then(function () { 
                        if (Object.keys(primaryKeyData).length>0) {
        if (!!$scope) { 
                $scope.$broadcast('update');
        }
                        } else {
        if (!!$scope) { 
                $scope.$broadcast('create');
        }
                            loadForm();
                        }
                        return $q.when();
                    });
                }
            };
            var mdTabs = $("[dib-container=dibtestChildForm]").closest('md-tabs');
            var tabsScope = null;
            if (mdTabs.length === 0) {
                mdTabs = null;
            }
            else {
                tabsScope = mdTabs.scope();
            }
            $scope.$watch('dibtestChildForm.$dirty', function (newValue, oldValue) { 
                $rootScope._navigation.containerDirty = newValue;
                if ($rootScope._navigation.containerDirty && !!mdTabs && !!tabsScope) {
                    var currentIndex = tabsScope.selectedIndex;
                    $rootScope._navigation.addSaveFailedPromise(function(tabIndex) {
                        tabsScope.selectedIndex = tabIndex;
                        return $q.when();
                    }, [currentIndex]);
                }
            },true);
            $rootScope._navigation.addSavePromise($scope.saveModel);
            //Giving the form the ability to handle dependency data (if an event is trigger on another component that has a refresh item alias point to the form/child form)
            $scope.setDependencyData = function (object) { 
                return dibForm.setDependencyData($scope,object);
            };
            $scope.itemAliasData = function () {
                return angular.copy($scope.primaryKeyData);
            };
            /**
            * Clear the form from records and dependancy data
            */
            $scope.clearForm = function () {
                if ($scope.loadingData) return;
                $scope.primaryKeyData = null;
                $scope.reloadContainer();
                dibForm.clean($scope.dibtestChildForm,$scope.model);
        if (!!$scope) { 
                $scope.$broadcast('clearDependency');
        }
            };
            function loadForm () { 
                $rootScope._navigation.reset();
                $rootScope._navigation.addSavePromise($scope.saveModel);
        if (!!$scope) { 
                $scope.$broadcast('beforeLoad');
        }
                //clear the record status
                $scope.recordStatus = null;
                var isUrlContainer = containerService.urlContainer('dibtestChildForm');
                if (isUrlContainer) {
                    //check if record is first or last
                    if (!!$location.search()['record'] && $location.search()['record']!='new') {
                        return;
                    }
                }
                //check if this is a child container 
                $scope.primaryKeyData = isUrlContainer ? discoverService.getPrimaryKeysFromUrl() : $scope.primaryKeyData;
                if (!!$scope.primaryKeyData === false) {
                $scope.primaryKeyData = {};
                //set all the primaryKeys to 0
                angular.forEach($scope.primaryKeys, function (key,index) { 
                    $scope.model[key] = 0;
                });
                }
                //remove active filter if no record are available
                if (Object.keys($scope.primaryKeyData).length ==0) {
                    $scope.recordStatus = "create";
                } else {
                    $scope.recordStatus = "update";
                }
                $scope.loadingData = true;
                $scope.currentPrimaryKeyData = $scope.primaryKeyData;
                crudService.read(crudController,'dibtestChildForm',{
                    primaryKeyData : $scope.currentPrimaryKeyData,
                    createParams: "{}"
                },
                $scope
                ).then(function (model) {
                    $scope.model = model;
                    $scope.currentPrimaryKeyData = recordFactory.primaryKeyData($scope.primaryKeys, $scope.model);
       actionService.executeAction(
       {
               scope: $scope,
               containerName: 'dibtestChildForm',
               field: !!$element ? $element.first() : $('[dib-container=dibtestChildForm]'),
               triggerType: 'load',
               nextActionItem: null,
               containerEventId: '120',
               submitUrl: '/dropins/dibExamples/Events/containerEvents',
               refreshItemId : '',
               containerId: '7151',
               responseType: 'actions'
        });
        if (!!$scope) { 
                $scope.$broadcast('load');
        }
                    $scope.dibtestChildForm.$setUntouched();
                    $scope.dibtestChildForm.$setPristine();
                    //@TODO refactor start 
                    var timeoutTest = $timeout(function () { 
                        containerService.reloadChildren({containerName: 'dibtestChildForm'});
                    },500); 
                    //@FRANCOIS @TODO Maybe we can change this to a better magic number :)
                    var eventDeregister = $rootScope.$on("dibAngular.subcontainerLoaded", function () {
                        $timeout.cancel(timeoutTest);
                        timeoutTest = $timeout(function () { 
                            containerService.reloadChildren({containerName: 'dibtestChildForm'});
                            eventDeregister();
                        },500); 
                        //@FRANCOIS @TODO Maybe we can change this to a better magic number :)
                    });
                    //Refactor stop
                    $log.debug("containerName read->model",$scope.model );
                    $scope.loadingData =  false;
                }, function () {
                    $scope.loadingData =  false;
                });
            }
            $scope.reloadContainer = function (options) {
        if (!!$scope) { 
                $scope.$broadcast('beforeContainerReload');
        }
                $scope.autoRefresh = true;
                loadForm ();
       actionService.executeAction(
       {
               scope: $scope,
               containerName: 'dibtestChildForm',
               field: !!$element ? $element.first() : $('[dib-container=dibtestChildForm]'),
               triggerType: 'reloadContainer',
               nextActionItem: null,
               containerEventId: '119',
               submitUrl: '/dropins/dibExamples/Events/containerEvents',
               refreshItemId : '',
               containerId: '7151',
               responseType: 'actions'
        });
        if (!!$scope) { 
                $scope.$broadcast('reloadContainer');
        }
            };
            //var isUrlContainer = containerService.urlContainer('dibtestChildForm');
            //the if below we removed the requirement to match the url to the containerName, so we can load data into a window without the url changing. wizBuildAppAdv.
            loadForm();
            $scope.$watch('model', function (oldVal, newVal) {
        if (!!$scope) { 
                $scope.$broadcast('modelChange');
        }
            },true);  
        }
    }
})();
