(function() {var require = ['/dropins/setNgMaterial/dibForm/js/component/formPaging.js','/dropins/setNgMaterial/dibGlobals/js/component/timeDatePickerInput.js','/dropins/setNgMaterial/dibForm/js/services/dibForm.js'];require.push('/dropins/setNgMaterial/dibGlobals/js/component/selectDefault.js');var files = [];angular.forEach(require, function (file,index) {files.push(DIB.base_url+'/files'+file);});var dibtestChildForm = angular.module('dibtestChildForm', [files]);dibtestChildForm.service('service155266',service155266);service155266.$inject = ['dibAjax', 'dibDiscover', '$q'];function service155266(dibAjax, dibDiscover, $q) {return {list : list};function list($scope, $element, query, modelType, page) {var url = dibDiscover.updateQueryStringDropdown(DIB.base_url + "/peff/Crud/componentlist/dibtestChildForm?containerItemId=155266", query, modelType, page);var requestInfo = dibDiscover.addToUrl({field :$('#ci155266'),$scope : $scope,container : $element,url : url});return dibAjax.post(requestInfo, {excludeFromCancels : true,factoryResult : function (data) {return data.records;}});};};dibtestChildForm.factory('dibtestChildFormDefinition',dibtestChildFormDefinition);dibtestChildFormDefinition.$inject = ['dibContainer','service155266'];function dibtestChildFormDefinition(dibContainer,service155266) {return {model : model,view : view,info : info,primaryKeys : primaryKeys};function model() {var model = {};model._GET = {};model['primkey1'] = '';model._GET['primkey1'] = dibContainer.modelItem({key : 'primkey1',dataType : "text",create : true,update : true,service : null,itemAlias : false});model['primkey2'] = '';model._GET['primkey2'] = dibContainer.modelItem({key : 'primkey2',dataType : "text",create : true,update : true,service : null,itemAlias : false});model['select___pef_test_id'] = '';model._GET['pef_test_id'] = dibContainer.modelItem({key : 'pef_test_id',dataType : "select",create : true,update : true,service : service155266,itemAlias : false});model['date_fld'] = '';model._GET['date_fld'] = dibContainer.modelItem({key : 'date_fld',dataType : "date",create : true,update : true,service : null,itemAlias : false});model['unique1'] = '';model._GET['unique1'] = dibContainer.modelItem({key : 'unique1',dataType : "text",create : true,update : true,service : null,itemAlias : false});model['unique2'] = '';model._GET['unique2'] = dibContainer.modelItem({key : 'unique2',dataType : "text",create : true,update : true,service : null,itemAlias : false});model['notes'] = '';model._GET['notes'] = dibContainer.modelItem({key : 'notes',dataType : "text",create : true,update : true,service : null,itemAlias : false});return model;};function view() {var view = {};return view;};function info(){var container = {};container.Id = '7151';container.Name = 'dibtestChildForm';container.SubContainerItemAliases = [];return container;};function primaryKeys() {return ["primkey1","primkey2"];};};dibtestChildForm.component('dibtestChildForm', {controllerAs: 'dibtestChildForm',templateUrl: DIB.base_url + '/dropins/setNgMaterial/dibForm/Template/view/dibtestChildForm.html',controller : component__dibtestChildForm});component__dibtestChildForm.$inject = [ 'dibtestChildFormDefinition','$scope','$element','dibCrud','dibNavigation','dibAction','dibContainer','dibDiscover','dibRecord','dibUtility','dibCommon','$log','$q','$ocLazyLoad','dibForm', 'dibMessage','$location','dibAction','dibUtility', '$timeout', 'dibActiveFilterState','service155266'];function component__dibtestChildForm(dibtestChildFormDefinition,$scope,$element,dibCrud,dibNavigation,dibAction,dibContainer,dibDiscover,dibRecord,dibUtility,dibCommon,$log,$q,$ocLazyLoad,dibForm, dibMessage,$location,dibAction,dibUtility, $timeout, dibActiveFilterState,service155266) {var ctrl = this;var crudController = "/peff/Crud";var $dibContainer = $element.first();$scope.container = dibtestChildFormDefinition.info();$scope.model = dibtestChildFormDefinition.model();$scope.view = dibtestChildFormDefinition.view();$scope.primaryKeys = dibtestChildFormDefinition.primaryKeys();$scope.dibCommon = dibCommon;dibContainer.watchModel($scope, function () {});var $dibContainer = $element.first();$scope.menus = {};function filterList($scope,$dibContainer,service, query, dropdown) {return service.list($scope,$dibContainer, query).then(function (items) {dropdown.items = items;return $q.when();});}
$scope.dropdowns = {};$scope.dropdowns.service155266 = {};$scope.dropdowns.service155266.items = [];var cancelService155266 = null;var query155266 = '';$scope.loadService155266 = function (query, skipTimeout) {if (query155266 != query) {query155266 = query;if (!!skipTimeout) {return filterList($scope,$dibContainer,service155266, query, $scope.dropdowns.service155266);} else {if (!!cancelService155266) $timeout.clear(cancelService155266);cancelService155266 = $timeout(function () {return filterList($scope,$dibContainer,service155266, query, $scope.dropdowns.service155266);}, 100);return cancelService155266;}};};$scope.dropdowns.service155266.getItems = function (query,modelType) {return service155266.list($scope,$dibContainer, query,modelType);};$scope.select155266 = function (model,modelName,fieldName) {if (!!modelName == false) modelName ="model";var $element =  $('#ci155266');if (!!$element.attr('select-model') === false) {$element = $element.find('[select-model]');}
var modelName =  'selected___' + fieldName;$element.trigger('select');if (!!model[modelName]  === false) {return  false;}
angular.forEach($scope.dropdowns.service155266.items, function (item, index)   {if (item.id == model[modelName]['id']) {model[modelName]['id_display_value'] = item.id_display_value;return false;}});};$scope.openAuditTrail = function (portAlias) {var primaryKeyData = dibRecord.primaryKeyAuditIds($scope.primaryKeys, $scope.model);if (primaryKeyData.length > 0) {dibCommon.goTo(DIB.audit_trail_container,portAlias,true,"?filter_pef_table_id=%3D1438&filter_record_id=%3D"+primaryKeyData);} else {dibCommon.goTo(DIB.audit_trail_container,portAlias,true,"?filter_pef_table_id=%3D1438");}};ctrl.$onInit = function () {$scope.addModel = function () {dibForm.addModel($scope, "dibtestChildForm");};$scope.deleteRecord = function (options) {dibForm.deleteRecord('dibtestChildForm', $scope, $scope.dibtestChildForm, options, crudController).then(function (){dibNavigation.reset();}).catch(function (data) {});};$scope.saveModel = function (options) {if ($scope.loadingData) return $q.reject('Busy loading...');if (dibForm.validate($scope, $scope.dibtestChildForm)) {$scope.loadingData =  true;var primaryKeyData = dibRecord.primaryKeyData($scope.primaryKeys, $scope.model);return dibForm.updateRecord('dibtestChildForm', $scope, $scope.dibtestChildForm, crudController, options).then(function () {if (Object.keys(primaryKeyData).length>0) {} else {loadForm();}}).catch(function (data) {});}};var mdTabs = $("[dib-container=dibtestChildForm]").closest('md-tabs');var tabsScope = null;if (mdTabs.length === 0) {mdTabs = null;}
else {tabsScope = mdTabs.scope();}
$scope.$watch('dibtestChildForm.$dirty', function (newValue, oldValue) {dibNavigation.containerDirty = newValue;if (dibNavigation.containerDirty && !!mdTabs && !!tabsScope) {var currentIndex = tabsScope.selectedIndex;dibNavigation.addSaveFailedPromise(function(tabIndex) {tabsScope.selectedIndex = tabIndex;return $q.when();}, [currentIndex]);}},true);dibNavigation.addSavePromise($scope.saveModel);$scope.setDependencyData = function (object) {return dibForm.setDependencyData($scope,object);};$scope.itemAliasData = function () {return angular.copy($scope.primaryKeyData);};$scope.clearForm = function () {if ($scope.loadingData) return;$scope.primaryKeyData = null;$scope.reloadContainer();dibForm.clean($scope.dibtestChildForm,$scope.model);};$scope.reloadContainer = function (options) {$element.find('[dib-container-name=dibtestChildForm][select-default]').trigger('refreshDefault');$scope.autoRefresh = true;loadForm ();var additionalInfoOnEvent = null;dibAction.executeAction({scope : $scope,field : !!$element ? $element.first() : $('[dib-container=dibtestChildForm]'),containerName: 'dibtestChildForm',triggerType: 'reloadContainer',nextActionItem: '',containerEventId: 'dib*ly2elykga1',containerId: 7151,submitUrl: '/dropins/dibExamples/Events/containerEvents',itemAlias: '',refreshItemId : '',responseType: 'actions'}
, additionalInfoOnEvent);};};ctrl.$postLink = function () {var isUrlContainer = dibContainer.urlContainer('dibtestChildForm');if (isUrlContainer) {if (!!$location.search()['record'] && $location.search()['record']!='new') {$scope.$broadcast('load');}} else {$scope.$broadcast('load');}
$scope.reloadContainer({ force : true });};function loadForm () {dibNavigation.reset();dibNavigation.addSavePromise($scope.saveModel);$scope.recordStatus = null;var isUrlContainer = dibContainer.urlContainer('dibtestChildForm');if (isUrlContainer) {if (!!$location.search()['record'] && $location.search()['record']!='new') {return;}
if (!!$location.search()['record'] && $location.search()['record']=='new') {dibForm.clean($scope.dibtestChildForm,$scope.model);}}
$scope.primaryKeyData = isUrlContainer ? dibDiscover.getPrimaryKeysFromUrl() : $scope.primaryKeyData;if (!!$scope.primaryKeyData === false) {$scope.primaryKeyData = {};angular.forEach($scope.primaryKeys, function (key,index) {$scope.model[key] = 0;});}
if (Object.keys($scope.primaryKeyData).length ==0) {$scope.recordStatus = "create";} else {$scope.recordStatus = "update";}
$scope.loadingData = true;$scope.currentPrimaryKeyData = $scope.primaryKeyData;dibCrud.read($scope,crudController,'dibtestChildForm',{primaryKeyData : $scope.currentPrimaryKeyData,createParams: "{}"},$scope).then(function (model) {$scope.model = model;$scope.currentPrimaryKeyData = dibRecord.primaryKeyData($scope.primaryKeys, $scope.model);$scope.$broadcast('load');$scope.dibtestChildForm.$setUntouched();$scope.dibtestChildForm.$setPristine();var timeoutTest = $timeout(function () {dibContainer.reloadChildren({containerName: 'dibtestChildForm'});},500);$log.debug("containerName read->model",$scope.model );$scope.loadingData =  false;}).catch(function (error) {$scope.$broadcast('load');$scope.loadingData =  false;});}}})();