(function() {var require = ['/dropins/setNgMaterial/dibGrid/js/components/dibTableWidth.js','/dropins/setNgMaterial/dibGrid/js/components/dibInlineEdit.js','/dropins/setNgMaterial/dibGrid/js/services/dibGrid.js','/dropins/setNgMaterial/dibForm/js/services/dibForm.js'];require.push('/dropins/setNgMaterial/dibGlobals/js/component/selectDefault.js');var files = [];angular.forEach(require, function (file,index) {files.push(DIB__base_url+'/files'+file);});var dibtestConsultantPortGrid = angular.module('dibtestConsultantPortGrid', [files]);function updateQueryStringMenu(url, node) {if (!!node === true) {return url + "&node="+node;}
return url + "&node=root";};dibtestConsultantPortGrid.service('service155622',service155622);service155622.$inject = ['ajax', 'discoverService', '$q'];function service155622(ajax, discoverService, $q) {return {list : list};function list(query, modelType, page) {var $defer = $q.defer();var url = updateQueryStringDropdown(DIB__base_url + "/peff/Crud/componentlist/dibtestConsultantPortGrid?containerItemId=155622", query, modelType, page);var requestInfo = discoverService.addToUrl({field :$('#ci155622'),container : $('[dib-container=dibtestConsultantPortGrid]'),url : url});return ajax.post(requestInfo, {excludeFromCancels : true,factoryResult : function (data) {return data.records;}});};};function updateQueryStringDropdown(url, query, modelType, page) {url += "&limit=20&page=" + (!!page == true? page: 1);if (modelType=='search') {url += "&showUsedOnly=true";}
url += "&query=";if (!!query == true) {url += query;}
return url;};function updateQueryStringMenu(url, node) {if (!!node === true) {return url + "&node="+node;}
return url + "&node=root";};dibtestConsultantPortGrid.service('service155622',service155622);service155622.$inject = ['ajax', 'discoverService', '$q'];function service155622(ajax, discoverService, $q) {return {list : list};function list(query, modelType, page) {var $defer = $q.defer();var url = updateQueryStringDropdown(DIB__base_url + "/peff/Crud/componentlist/dibtestConsultantPortGrid?containerItemId=155622", query, modelType, page);var requestInfo = discoverService.addToUrl({field :$('#ci155622'),container : $('[dib-container=dibtestConsultantPortGrid]'),url : url});return ajax.post(requestInfo, {excludeFromCancels : true,factoryResult : function (data) {return data.records;}});};};function updateQueryStringDropdown(url, query, modelType, page) {url += "&limit=20&page=" + (!!page == true? page: 1);if (modelType=='search') {url += "&showUsedOnly=true";}
url += "&query=";if (!!query == true) {url += query;}
return url;};})();(function() {var dibtestConsultantPortGrid = angular.module('dibtestConsultantPortGrid');dibtestConsultantPortGrid.component('dibtestConsultantPortGrid', {controllerAs: 'dibtestConsultantPortGrid',templateUrl: DIB__base_url + '/dropins/setNgMaterial/dibGrid/Template/view/dibtestConsultantPortGrid.html',controller : component__dibtestConsultantPortGrid});component__dibtestConsultantPortGrid.$inject = ['$element', 'dibGrid', 'dibForm', '$location', '$timeout', '$scope', '$ocLazyLoad', '$rootScope', '$log', 'containerService', '$q', 'recordFactory', 'messageService','keysPressed','service155622','containerService','recordFactory','crudService','utilityService'];function component__dibtestConsultantPortGrid($element, dibGrid, dibForm, $location, $timeout, $scope, $ocLazyLoad, $rootScope, $log, containerService, $q, recordFactory, messageService,keysPressed,service155622,containerService,recordFactory,crudService,utilityService) {var vm = this;vm.$postLink = function () {$("[dib-container=dibtestConsultantPortGrid]").trigger('onInit');};vm.$onInit = function () {$scope.container = {};$scope.container.Id = '7166';$scope.container.Name = 'dibtestConsultantPortGrid';var crudController = "/peff/Crud";$scope.model = {};$scope.model._GET = recordFactory.modelConstruct();$scope.model._GET['id'] = containerService.modelItem("number",false,false,null);$scope.model._GET['name'] = containerService.modelItem("text",true,true,null);$scope.model._GET['notes'] = containerService.modelItem("text",true,true,null);$scope.model._GET['email'] = containerService.modelItem("text",true,true,null);$scope.model._GET['address1'] = containerService.modelItem("text",true,true,null);$scope.model._GET['address2'] = containerService.modelItem("text",true,true,null);$scope.model._GET['city_town'] = containerService.modelItem("text",true,true,null);$scope.model._GET['country'] = containerService.modelItem("text",true,true,null);$scope.model._GET['employed_at_id'] = containerService.modelItem("select",true,true,service155622);$scope.view = {};var reloadContainerFunctions = [];containerService.watchModel($scope);$scope.common = $rootScope.common;$scope.primaryKeys = ["id"];$scope.menus = {};$scope.dropdowns = {};$scope.dropdowns.service155622 = {};$scope.dropdowns.service155622.items = [];var setTimeoutCancel155622 = null;var query155622;$scope.loadService155622 = function (query, skipTimeout) {if (query155622 != query) {query155622 = query;if (!!skipTimeout) {return service155622.list(query).then(function (items) {$scope.dropdowns.service155622.items = items;});} else {clearTimeout(setTimeoutCancel155622);setTimeoutCancel155622 = setTimeout(function () {service155622.list(query).then(function (items) {$scope.dropdowns.service155622.items = items;});}, 100);}}};$scope.dropdowns.service155622.searchTextChange = function (query) {$scope.loadService155622(query);};$scope.dropdowns.service155622.getItems = function (query,modelType) {return service155622.list(query,modelType);};$scope.select155622 = function (model,modelName,fieldName) {if (!!modelName == false) modelName ="model";var $element =  $('#ci155622');if (!!$element.attr('select-model') === false) {$element = $element.find('[select-model]');}
var modelName =  'selected___' + fieldName;$element.trigger('select');if (!!model[modelName]  === false) {return  false;}
angular.forEach($scope.dropdowns.service155622.items, function (item, index)   {if (item.id == model[modelName]['id']) {model[modelName]['id_display_value'] = item.id_display_value;return false;}});};var setTimeout155622 = null;$scope.openAuditTrail = function (portAlias) {var primaryKeyData = recordFactory.primaryKeyAuditIds($scope.primaryKeys, $scope.model);if (primaryKeyData.length > 0) {$scope.common.goTo(DIB__audit_trail_container,portAlias,true,"?filter_pef_table_id=1442&filter_record_id="+primaryKeyData);} else {$scope.common.goTo(DIB__audit_trail_container,portAlias,true,"?filter_pef_table_id=1442");}};$scope.gridOptions = {};$scope.gridOptions.data = 'gridData';$scope.gridOptions.enableFiltering = true;$scope.gridOptions.inlineAddShow = "" == "true";$scope.toggleInlineAdd = function () {dibGrid.toggleInlineAdd($scope, $element);};$scope.useSelectedRow = function ($event, model) {dibGrid.useSelectedRow($scope, $event, model);}
$scope.selectedItems = [];$scope.lastSelectedItem = null;var arraySelected = [];$scope.selectRow = function (row,$event) {dibGrid.selectRow($scope,$element, row, $event);};$scope.saveRow = function ($event, row) {var element = $($event.target).parents('[dib-inline-edit]');element.trigger('editClose');$event.stopPropagation();$event.preventDefault();};$scope.addRow = function ($event, row) {var element = $($event.target).parents('[dib-inline-edit]');element.trigger('addRow');$event.stopPropagation();$event.preventDefault();};$scope.cancelRow = function ($event, row) {var element = $($event.target).parents('[dib-inline-edit]');row.___editing = false;row.___selected = true;element.find('[dib-edit]').hide();element.find('[dib-view]').show();$event.stopPropagation();$event.preventDefault();};$scope.cleanRow = function ($event, model, $form) {$form.$setDirty(false);dibForm.clean($form,model);$event.stopPropagation();$event.preventDefault();};$scope.rowEdit = function (element) {var $rowElement = $(element).find('[dib-inline-edit]');if ($rowElement.length > 0) {$rowElement.trigger('edit');$rowElement.removeClass('md-accent');} else {$containerItemElement.parents('[dib-inline-edit=open]').trigger('editClose');}
var $rowElement =$rowElement.parents('[dib-inline-edit=add-mode]');if ($rowElement.length>0) {$rowElement.trigger('addRow');}};$scope.itemAliasData = function () {var itemSelected= angular.copy($scope.lastSelectedItem);return itemSelected;};$scope.gridOptions.sortFields = {};$scope.gridOptions.sortNr = 0;function applySortFromUrl() {var sortUrlChange= containerService.urlContainer("dibtestConsultantPortGrid");var searchLength = Object.keys($location.search()).length;if (sortUrlChange && searchLength>0) {$scope.gridOptions.sortNr = 0;angular.forEach($location.search(), function (item,index) {if (index.indexOf("sort_") !==-1) {$scope.gridOptions.sortNr ++;var splitValues = item.split("::");$scope.gridOptions.sortFields[index.replace('sort_','')]= {"Order" : splitValues[0],"Count" :  splitValues[1]}}});}}
$scope.gridOptions.toggleSort = function (fieldName) {var sortUrlChange= containerService.urlContainer("dibtestConsultantPortGrid");if (!!$scope.gridOptions.sortFields[fieldName] && $scope.gridOptions.sortFields[fieldName]['Order'] === "ASC") {$scope.gridOptions.sortFields[fieldName]['Order'] = "DESC";if (sortUrlChange ) $location.search("sort_"+fieldName,"DESC::"+$scope.gridOptions.sortFields[fieldName]['Count']);} else if (!!$scope.gridOptions.sortFields[fieldName] && $scope.gridOptions.sortFields[fieldName]['Order'] === "DESC") {$scope.gridOptions.sortNr = 0;delete $scope.gridOptions.sortFields[fieldName];if (Object.keys($scope.gridOptions.sortFields).length == 0)  {containerService.cleanUrlState();}
if (sortUrlChange ) $location.search("sort_"+fieldName,null);angular.forEach($scope.gridOptions.sortFields, function (sort,index) {if (!!sort) {$scope.gridOptions.sortNr ++;sort['Count'] = $scope.gridOptions.sortNr;if (sortUrlChange ) $location.search("sort_"+index,sort['Order']+"::"+sort['Count']);}});return;} else {$scope.gridOptions.sortNr ++;$scope.gridOptions.sortFields[fieldName] = {"Order" : "ASC", "Count" : $scope.gridOptions.sortNr };if (sortUrlChange ) $location.search("sort_"+fieldName,"ASC::"+$scope.gridOptions.sortNr);}
loadGrid();};$scope.search = {};$scope.clearSearch = function () {$scope.search = {};containerService.cleanUrlState();$scope.searchGrid();};$scope.searchGrid = function () {var searchUrlChange= containerService.urlContainer("dibtestConsultantPortGrid");if (searchUrlChange ) {angular.forEach($location.search(), function (item,index) {if (index.indexOf("filter_") ==0 || index.indexOf("filterDisplay_") ==0) {$location.search(index,null);}});angular.forEach($scope.search, function (search, index) {if (!!search == false) return;if (typeof search != 'object') {$location.search("filter_"+index,search.replace('&','~~~'));} else if (!!search.id && !!search.id_display_value) {var key = index.replace('selected___','');var urlSearch = {};urlSearch["filter_"+key]=search.id;urlSearch["filterDisplay_"+key] = utilityService.fixedEncodeURIComponent(search.id_display_value);$location.search(urlSearch);}});}
loadGrid();};$scope.$watch("showSearch", function () {$timeout(function () {$("[dib-container=dibtestConsultantPortGrid]").find('.dib-grid-column-content').trigger('refreshHeight')},50);if (!!$scope.showSearch === false) {$scope.search = {};if (!!$scope.gridData) loadGrid();}});function applyFilterFromUrl() {var searchUrlChange= containerService.urlContainer("dibtestConsultantPortGrid");var searchLength = Object.keys($location.search()).length;if (searchUrlChange && searchLength>0) {$scope.search = {};var urlSearch  =$location.search();angular.forEach(urlSearch, function (item,index) {if (index.indexOf('filter') === -1) return;if (index.indexOf("filter_") ==0) {$scope.showSearch = true;$scope.search[index.replace('filter_','')]= item.replace('~~~','&');}
if (index.indexOf("filterDisplay_") ==0) {var selectKeyIndex=  index.replace('filterDisplay_','');var selectKey ="selected___" + selectKeyIndex;$scope.search[selectKey]= {};$scope.search[selectKey].id = urlSearch["filter_"+selectKeyIndex];$scope.search[selectKey].id_display_value = decodeURI(item);}});} else {$scope.search = {};$scope.showSearch = false;}}
$scope.scrollConfig = {autoHideScrollbar: false,theme: 'light',advanced:{updateOnContentResize: true},setHeight: 200,scrollInertia: 0};function loadGrid() {$scope.loadingData = true;crudService.list(crudController,'dibtestConsultantPortGrid',$scope.page, $scope.search, null, $scope.gridOptions.sortFields).then(function (data) {$scope.selectedItems = [];$scope.lastSelectedItem = null;var arraySelected = [];$scope.page.count = Math.ceil(data.filtertotal / $scope.page.limit, 10);$scope.page.records = data.filtertotal;$scope.page.totalRecords = data.total;$scope.page.fromRecord = $scope.page.number==1? 1 : ($scope.page.number-1)*$scope.page.limit;$scope.page.toRecord = $scope.page.fromRecord==1? $scope.page.fromRecord + data.records.length - 1 : $scope.page.fromRecord + data.records.length;if ($scope.page.fromRecord == 1 && data.records.length ==0 ) {$scope.page.fromRecord = 0;}
if ($scope.page.number != 1 && data.records.length ==0) {loadGrid();$scope.page.number --;return;}
$scope.loadingData = false;$scope.gridData= data.records;$("[dib-container=dibtestConsultantPortGrid]").trigger('load');$timeout(function () {$('[dib-container=dibtestConsultantPortGrid]').find('[select-default]').trigger('refreshDefault');},100);$scope.$emit('load');}, function (error) {$scope.loadingData = false;});}
$scope.createRecord = function (data) {$scope.loadingData = true;return crudService.create(crudController,'dibtestConsultantPortGrid', {data : data,}).then(function () {$("[dib-container=dibtestConsultantPortGrid]").trigger('afterSave');$scope.page.number = 1;loadGrid();return $q.when();}, function () {$scope.loadingData = false;return $q.reject();});};$scope.updateRecord = function (data) {$scope.loadingData = true;var primaryKeyData = recordFactory.primaryKeyData($scope.primaryKeys, data.recordData);return crudService.update(crudController,'dibtestConsultantPortGrid',{primaryKeyData : primaryKeyData,data : data,createParams: "{}"}).then(function (data) {$scope.loadingData = false;$("[dib-container=dibtestConsultantPortGrid]").trigger('afterSave');return $q.resolve();}, function (data) {$scope.loadingData = false;return $q.reject(data);});};$scope.deleteRecord = function (data) {$scope.loadingData = true;var primaryKeyData = recordFactory.primaryKeyData($scope.primaryKeys, data);return crudService.delete(crudController,'dibtestConsultantPortGrid',data,$scope.primaryKeys).then(function () {$("[dib-container=dibtestConsultantPortGrid]").trigger('afterDelete');$scope.page.number = 1;loadGrid();});};var deleteSelectedRecords = function () {if ($scope.selectedItems.length > 0) {$scope.loadingData = true;var selectedRecord =  $scope.selectedItems.pop();var primaryKeyData = recordFactory.primaryKeyData($scope.primaryKeys, selectedRecord);crudService.delete(crudController,'dibtestConsultantPortGrid',{primaryKeyData : primaryKeyData}).then(function (data) {deleteSelectedRecords();return $q.resolve();}, function (data) {deleteSelectedRecords();return $q.reject(data);});} else if ($scope.loadingData) {$("[dib-container=dibtestConsultantPortGrid]").trigger('afterDelete');loadGrid();}}
$scope.deleteSelected = function() {messageService.confirm({title: 'Delete selected records',text : 'Warning - are you sure you want to permanently delete all the selected records?'}).then(function () {deleteSelectedRecords();});};$scope.page = {count : 0,limit : 10,number : 1};$scope.nextPage = function () {$scope.page.number++;};$scope.lastPage = function () {$scope.page.number = $scope.page.count;};$scope.firstPage = function () {$scope.page.number = 1;};$scope.previousPage = function () {$scope.page.number--;};$scope.$watch("page.limit", function () {$scope.page.number = 1;if (!!$scope.gridData) loadGrid();});$scope.$watch("page.number", function () {if (!!$scope.gridData) loadGrid();});applyFilterFromUrl();applySortFromUrl();loadGrid();$scope.reloadContainer  = function (options) {$("[dib-container=dibtestConsultantPortGrid]").trigger('beforeReloadContainer');applyFilterFromUrl();applySortFromUrl();loadGrid();if (!!$scope) {$scope.$broadcast('reload container');}};};}})();