(function() {var require = ['/dropins/setNgMaterial/dibGlobals/js/component/timeDatePickerInput.js','/dropins/setNgMaterial/dibGlobals/js/component/taScrollWindow.js','/dropins/setNgMaterial/dibForm/js/component/formPaging.js','/dropins/setNgMaterial/dibGlobals/js/component/dibImgPreview.js','/dropins/setNgMaterial/dibGlobals/js/component/dibFileUploader.js','/dropins/setNgMaterial/dibMenu/js/components/dibSideBarStatus.js','/dropins/setNgMaterial/dibGlobals/js/component/dibIframe.js','/dropins/setNgMaterial/dibForm/js/services/dibForm.js'];require.push('/dropins/setNgMaterial/dibGlobals/js/component/selectDefault.js');var files = [];angular.forEach(require, function (file,index) {files.push(DIB.base_url+'/files'+file);});files.push( DIB.base_url + '/dropins/setNgMaterial/dibGrid/Template/controller/dibexComponentGrid.js');var dibexComponents = angular.module('dibexComponents', [files]);dibexComponents.service('service179858',service179858);service179858.$inject = ['dibAjax', 'dibDiscover'];function service179858(dibAjax,  dibDiscover) {return {list : list};function list($scope, $element, node) {var url = dibDiscover.updateQueryStringMenu(DIB.base_url + "/dropins/setNgMaterial/dibMenu/menu/list.json?containerName=dibexComponents&rootMenuId=188605", node);var requestInfo = dibDiscover.addToUrl({field : $('#ci179858'),$scope : $scope,container : $element,url : url});return dibAjax.post(requestInfo, {excludeFromCancels : true,factoryResult : function (data) {return data.records;}})};};dibexComponents.service('service154791',service154791);service154791.$inject = ['dibAjax', 'dibDiscover', '$q'];function service154791(dibAjax, dibDiscover, $q) {return {list : list};function list($scope, $element, query, modelType, page) {var url = dibDiscover.updateQueryStringDropdown(DIB.base_url + "/peff/Crud/componentlist/dibexComponents?containerItemId=154791", query, modelType, page);var requestInfo = dibDiscover.addToUrl({field :$('#ci154791'),$scope : $scope,container : $element,url : url});return dibAjax.post(requestInfo, {excludeFromCancels : true,factoryResult : function (data) {return data.records;}});};};dibexComponents.service('service154824',service154824);service154824.$inject = ['dibAjax', 'dibDiscover', '$q'];function service154824(dibAjax, dibDiscover, $q) {return {list : list};function list($scope, $element, query, modelType, page) {var url = dibDiscover.updateQueryStringDropdown(DIB.base_url + "/peff/Crud/componentlist/dibexComponents?containerItemId=154824", query, modelType, page);var requestInfo = dibDiscover.addToUrl({activeFilter : 'parentCompanyId',field :$('#ci154824'),$scope : $scope,container : $element,url : url});return dibAjax.post(requestInfo, {excludeFromCancels : true,factoryResult : function (data) {return data.records;}});};};dibexComponents.service('service154825',service154825);service154825.$inject = ['dibAjax', 'dibDiscover', '$q'];function service154825(dibAjax, dibDiscover, $q) {return {list : list};function list($scope, $element, query, modelType, page) {var url = dibDiscover.updateQueryStringDropdown(DIB.base_url + "/peff/Crud/componentlist/dibexComponents?containerItemId=154825", query, modelType, page);var requestInfo = dibDiscover.addToUrl({activeFilter : 'companyId',field :$('#ci154825'),$scope : $scope,container : $element,url : url});return dibAjax.post(requestInfo, {excludeFromCancels : true,factoryResult : function (data) {return data.records;}});};};dibexComponents.factory('dibexComponentsDefinition',dibexComponentsDefinition);dibexComponentsDefinition.$inject = ['dibContainer','service154791','service154824','service154825','service179858'];function dibexComponentsDefinition(dibContainer,service154791,service154824,service154825,service179858) {return {model : model,view : view,info : info,primaryKeys : primaryKeys};function model() {var model = {};model._GET = {};model['inputtext'] = '';model._GET['inputtext'] = dibContainer.modelItem({key : 'inputtext',dataType : "text",create : true,update : true,service : null,itemAlias : false});model['inputnumber'] = '';model._GET['inputnumber'] = dibContainer.modelItem({key : 'inputnumber',dataType : "number",create : true,update : true,service : null,itemAlias : false});model['datepickerinput'] = '';model._GET['datepickerinput'] = dibContainer.modelItem({key : 'datepickerinput',dataType : "date",create : true,update : true,service : null,itemAlias : false});model['inputemail'] = '';model._GET['inputemail'] = dibContainer.modelItem({key : 'inputemail',dataType : "text",create : true,update : true,service : null,itemAlias : false});model['inputurl'] = '';model._GET['inputurl'] = dibContainer.modelItem({key : 'inputurl',dataType : "text",create : true,update : true,service : null,itemAlias : false});model['mdcheckbox'] = '';model._GET['mdcheckbox'] = dibContainer.modelItem({key : 'mdcheckbox',dataType : "boolean",create : true,update : true,service : null,itemAlias : false});model['mdselectenum'] = '';model._GET['mdselectenum'] = dibContainer.modelItem({key : 'mdselectenum',dataType : "text",create : true,update : true,service : null,itemAlias : false});model['select___mdautocomplete'] = '';model._GET['mdautocomplete'] = dibContainer.modelItem({key : 'mdautocomplete',dataType : "select",create : true,update : true,service : service154791,itemAlias : false});model['inputtextarea'] = '';model._GET['inputtextarea'] = dibContainer.modelItem({key : 'inputtextarea',dataType : "text",create : true,update : true,service : null,itemAlias : false});model['htmleditor'] = '';model._GET['htmleditor'] = dibContainer.modelItem({key : 'htmleditor',dataType : "text",create : true,update : true,service : null,itemAlias : false});model['inputnumberdecimal'] = '';model._GET['inputnumberdecimal'] = dibContainer.modelItem({key : 'inputnumberdecimal',dataType : "number",create : true,update : true,service : null,itemAlias : false});model['varchar10_required'] = '';model._GET['varchar10_required'] = dibContainer.modelItem({key : 'varchar10_required',dataType : "text",create : true,update : true,service : null,itemAlias : false});model['id'] = '';model._GET['id'] = dibContainer.modelItem({key : 'id',dataType : "number",create : false,update : false,service : null,itemAlias : false});model['datetime_fld'] = '';model._GET['datetime_fld'] = dibContainer.modelItem({key : 'datetime_fld',dataType : "dateTime",create : true,update : true,service : null,itemAlias : false});model['image_fld'] = '';model._GET['image_fld'] = dibContainer.modelItem({key : 'image_fld',dataType : "text",create : true,update : true,service : null,itemAlias : false});model['file_fld'] = '';model._GET['file_fld'] = dibContainer.modelItem({key : 'file_fld',dataType : "text",create : true,update : true,service : null,itemAlias : false});model['select___test_company_id'] = '';model._GET['test_company_id'] = dibContainer.modelItem({key : 'test_company_id',dataType : "select",create : true,update : true,service : service154824,itemAlias : 'parentCompanyId'});model['select___test_company2_id'] = '';model._GET['test_company2_id'] = dibContainer.modelItem({key : 'test_company2_id',dataType : "select",create : true,update : true,service : service154825,itemAlias : 'companyId'});model['mddatefield'] = '';model._GET['mddatefield'] = dibContainer.modelItem({key : 'mddatefield',dataType : "date",create : true,update : true,service : null,itemAlias : false});model['timedatepickerinput'] = '';model._GET['timedatepickerinput'] = dibContainer.modelItem({key : 'timedatepickerinput',dataType : "dateTime",create : true,update : true,service : null,itemAlias : false});model['inputcheckbox'] = '';model._GET['inputcheckbox'] = dibContainer.modelItem({key : 'inputcheckbox',dataType : "text",create : true,update : true,service : null,itemAlias : false});model['inputdate'] = '';model._GET['inputdate'] = dibContainer.modelItem({key : 'inputdate',dataType : "text",create : true,update : true,service : null,itemAlias : false});model['inputtime'] = '';model._GET['inputtime'] = dibContainer.modelItem({key : 'inputtime',dataType : "time",create : true,update : true,service : null,itemAlias : false});model['inputdatetimelocal'] = '';model._GET['inputdatetimelocal'] = dibContainer.modelItem({key : 'inputdatetimelocal',dataType : "text",create : true,update : true,service : null,itemAlias : false});model['inputmonth'] = '';model._GET['inputmonth'] = dibContainer.modelItem({key : 'inputmonth',dataType : "text",create : true,update : true,service : null,itemAlias : false});model['inputradio'] = '';model._GET['inputradio'] = dibContainer.modelItem({key : 'inputradio',dataType : "text",create : true,update : true,service : null,itemAlias : false});model['inputweek'] = '';model._GET['inputweek'] = dibContainer.modelItem({key : 'inputweek',dataType : "text",create : true,update : true,service : null,itemAlias : false});model['inputrange'] = '';model._GET['inputrange'] = dibContainer.modelItem({key : 'inputrange',dataType : "text",create : true,update : true,service : null,itemAlias : false});model['mdcheckboxRt'] = '';model._GET['mdcheckboxRt'] = dibContainer.modelItem({key : 'mdcheckboxRt',dataType : "boolean",create : true,update : true,service : null,itemAlias : false});model['mdswitch'] = '';model._GET['mdswitch'] = dibContainer.modelItem({key : 'mdswitch',dataType : "boolean",create : true,update : true,service : null,itemAlias : false});return model;};function view() {var view = {};view.parentCompanyId = {'disabled' : false,'visible' : true, 'class' : null, 'style' : null };view.companyId = {'disabled' : false,'visible' : true, 'class' : null, 'style' : null };view.openMenu = {'disabled' : false,'visible' : true, 'class' : null, 'style' : null };view.sidenavMenuEg = {'disabled' : false,'visible' : true, 'class' : null, 'style' : null };return view;};function info(){var container = {};container.Id = '7142';container.Name = 'dibexComponents';container.SubContainerItemAliases = [];return container;};function primaryKeys() {return ["id"];};};dibexComponents.component('dibexComponents', {controllerAs: 'dibexComponents',templateUrl: DIB.base_url + '/dropins/setNgMaterial/dibForm/Template/view/dibexComponents.html',controller : component__dibexComponents});component__dibexComponents.$inject = [ 'dibexComponentsDefinition','$scope','$element','dibCrud','dibNavigation','dibAction','dibContainer','dibDiscover','dibRecord','dibUtility','dibCommon','$log','$q','$ocLazyLoad','dibForm', 'dibMessage','$location','dibAction','dibUtility', '$timeout', 'dibActiveFilterState','service154791','service154824','service154825','service179858'];function component__dibexComponents(dibexComponentsDefinition,$scope,$element,dibCrud,dibNavigation,dibAction,dibContainer,dibDiscover,dibRecord,dibUtility,dibCommon,$log,$q,$ocLazyLoad,dibForm, dibMessage,$location,dibAction,dibUtility, $timeout, dibActiveFilterState,service154791,service154824,service154825,service179858) {var ctrl = this;var crudController = "/peff/Crud";var $dibContainer = $element.first();$scope.container = dibexComponentsDefinition.info();$scope.model = dibexComponentsDefinition.model();$scope.view = dibexComponentsDefinition.view();$scope.primaryKeys = dibexComponentsDefinition.primaryKeys();$scope.dibCommon = dibCommon;dibContainer.watchModel($scope, function () {});var $dibContainer = $element.first();$scope.menus = {};$scope.menus.service179858 = {};$scope.menus.service179858.update = function (node,force){$scope.menus.service179858.loading = true;service179858.list($scope,$dibContainer, !!node? node.id : null).then(function (menu) {$scope.menus.service179858.loading = false;if (!!node === false || !!force) {$scope.menus.service179858.menu = menu;} else {node.children = menu;}}, function () {$scope.menus.service179858.loading = false;});};$scope.menus.service179858.update();function filterList($scope,$dibContainer,service, query, dropdown) {return service.list($scope,$dibContainer, query).then(function (items) {dropdown.items = items;return $q.when();});}
$scope.dropdowns = {};$scope.dropdowns.service154791 = {};$scope.dropdowns.service154791.items = [];var cancelService154791 = null;var query154791 = '';$scope.loadService154791 = function (query, skipTimeout) {if (query154791 != query) {query154791 = query;if (!!skipTimeout) {return filterList($scope,$dibContainer,service154791, query, $scope.dropdowns.service154791);} else {if (!!cancelService154791) $timeout.clear(cancelService154791);cancelService154791 = $timeout(function () {return filterList($scope,$dibContainer,service154791, query, $scope.dropdowns.service154791);}, 100);return cancelService154791;}};};$scope.dropdowns.service154791.getItems = function (query,modelType) {return service154791.list($scope,$dibContainer, query,modelType);};$scope.select154791 = function (model,modelName,fieldName) {if (!!modelName == false) modelName ="model";var $element =  $('#ci154791');if (!!$element.attr('select-model') === false) {$element = $element.find('[select-model]');}
var modelName =  'selected___' + fieldName;$element.trigger('select');if (!!model[modelName]  === false) {return  false;}
angular.forEach($scope.dropdowns.service154791.items, function (item, index)   {if (item.id == model[modelName]['id']) {model[modelName]['id_display_value'] = item.id_display_value;return false;}});};$scope.dropdowns.service154824 = {};$scope.dropdowns.service154824.items = [];var cancelService154824 = null;var query154824 = '';$scope.loadService154824 = function (query, skipTimeout) {if (query154824 != query) {query154824 = query;if (!!skipTimeout) {return filterList($scope,$dibContainer,service154824, query, $scope.dropdowns.service154824);} else {if (!!cancelService154824) $timeout.clear(cancelService154824);cancelService154824 = $timeout(function () {return filterList($scope,$dibContainer,service154824, query, $scope.dropdowns.service154824);}, 100);return cancelService154824;}};};$scope.dropdowns.service154824.getItems = function (query,modelType) {return service154824.list($scope,$dibContainer, query,modelType);};$scope.select154824 = function (model,modelName,fieldName) {if (!!modelName == false) modelName ="model";var $element =  $('#ci154824');if (!!$element.attr('select-model') === false) {$element = $element.find('[select-model]');}
var modelName =  'selected___' + fieldName;$element.trigger('select');if (!!model[modelName]  === false) {return  false;}
if (!!model.selected___test_company2_id && !!model.selected___test_company2_id.id) {delete model.selected___test_company2_id;}
angular.forEach($scope.dropdowns.service154824.items, function (item, index)   {if (item.id == model[modelName]['id']) {model[modelName]['id_display_value'] = item.id_display_value;return false;}});};$scope.dropdowns.service154825 = {};$scope.dropdowns.service154825.items = [];var cancelService154825 = null;var query154825 = '';$scope.loadService154825 = function (query, skipTimeout) {if (query154825 != query) {query154825 = query;if (!!skipTimeout) {return filterList($scope,$dibContainer,service154825, query, $scope.dropdowns.service154825);} else {if (!!cancelService154825) $timeout.clear(cancelService154825);cancelService154825 = $timeout(function () {return filterList($scope,$dibContainer,service154825, query, $scope.dropdowns.service154825);}, 100);return cancelService154825;}};};$scope.dropdowns.service154825.getItems = function (query,modelType) {return service154825.list($scope,$dibContainer, query,modelType);};$scope.select154825 = function (model,modelName,fieldName) {if (!!modelName == false) modelName ="model";var $element =  $('#ci154825');if (!!$element.attr('select-model') === false) {$element = $element.find('[select-model]');}
var modelName =  'selected___' + fieldName;$element.trigger('select');if (!!model[modelName]  === false) {return  false;}
angular.forEach($scope.dropdowns.service154825.items, function (item, index)   {if (item.id == model[modelName]['id']) {model[modelName]['id_display_value'] = item.id_display_value;return false;}});};$scope.openAuditTrail = function (portAlias) {var primaryKeyData = dibRecord.primaryKeyAuditIds($scope.primaryKeys, $scope.model);if (primaryKeyData.length > 0) {dibCommon.goTo(DIB.audit_trail_container,portAlias,true,"?filter_pef_table_id=%3D1437&filter_record_id=%3D"+primaryKeyData);} else {dibCommon.goTo(DIB.audit_trail_container,portAlias,true,"?filter_pef_table_id=%3D1437");}};ctrl.$onInit = function () {$scope.addModel = function () {dibForm.addModel($scope, "dibexComponents");};$scope.deleteRecord = function (options) {dibForm.deleteRecord('dibexComponents', $scope, $scope.dibexComponents, options, crudController).then(function (){dibNavigation.reset();}).catch(function (data) {});};$scope.saveModel = function (options) {if ($scope.loadingData) return $q.reject('Busy loading...');if (dibForm.validate($scope, $scope.dibexComponents)) {$scope.loadingData =  true;var primaryKeyData = dibRecord.primaryKeyData($scope.primaryKeys, $scope.model);return dibForm.updateRecord('dibexComponents', $scope, $scope.dibexComponents, crudController, options).then(function () {if (Object.keys(primaryKeyData).length>0) {} else {loadForm();}}).catch(function (data) {});}};var mdTabs = $("[dib-container=dibexComponents]").closest('md-tabs');var tabsScope = null;if (mdTabs.length === 0) {mdTabs = null;}
else {tabsScope = mdTabs.scope();}
$scope.$watch('dibexComponents.$dirty', function (newValue, oldValue) {dibNavigation.containerDirty = newValue;if (dibNavigation.containerDirty && !!mdTabs && !!tabsScope) {var currentIndex = tabsScope.selectedIndex;dibNavigation.addSaveFailedPromise(function(tabIndex) {tabsScope.selectedIndex = tabIndex;return $q.when();}, [currentIndex]);}},true);dibNavigation.addSavePromise($scope.saveModel);$scope.setDependencyData = function (object) {return dibForm.setDependencyData($scope,object);};$scope.itemAliasData = function () {return angular.copy($scope.primaryKeyData);};$scope.clearForm = function () {if ($scope.loadingData) return;$scope.primaryKeyData = null;$scope.reloadContainer();dibForm.clean($scope.dibexComponents,$scope.model);};$scope.reloadContainer = function (options) {$element.find('[dib-container-name=dibexComponents][select-default]').trigger('refreshDefault');$scope.autoRefresh = true;loadForm ();};};ctrl.$postLink = function () {var isUrlContainer = dibContainer.urlContainer('dibexComponents');if (isUrlContainer) {if (!!$location.search()['record'] && $location.search()['record']!='new') {$scope.$broadcast('load');}} else {$scope.$broadcast('load');}
$scope.reloadContainer({ force : true });};function loadForm () {dibNavigation.reset();dibNavigation.addSavePromise($scope.saveModel);$scope.recordStatus = null;var isUrlContainer = dibContainer.urlContainer('dibexComponents');if (isUrlContainer) {if (!!$location.search()['record'] && $location.search()['record']!='new') {return;}
if (!!$location.search()['record'] && $location.search()['record']=='new') {dibForm.clean($scope.dibexComponents,$scope.model);}}
$scope.primaryKeyData = isUrlContainer ? dibDiscover.getPrimaryKeysFromUrl() : $scope.primaryKeyData;if (!!$scope.primaryKeyData === false) {$scope.primaryKeyData = {};angular.forEach($scope.primaryKeys, function (key,index) {$scope.model[key] = 0;});}
if (Object.keys($scope.primaryKeyData).length ==0) {$scope.recordStatus = "create";} else {$scope.recordStatus = "update";}
$scope.loadingData = true;$scope.currentPrimaryKeyData = $scope.primaryKeyData;dibCrud.read($scope,crudController,'dibexComponents',{primaryKeyData : $scope.currentPrimaryKeyData,createParams: "{}"},$scope).then(function (model) {$scope.model = model;$scope.currentPrimaryKeyData = dibRecord.primaryKeyData($scope.primaryKeys, $scope.model);$scope.$broadcast('load');$scope.dibexComponents.$setUntouched();$scope.dibexComponents.$setPristine();var timeoutTest = $timeout(function () {dibContainer.reloadChildren({containerName: 'dibexComponents'});},500);$log.debug("containerName read->model",$scope.model );$scope.loadingData =  false;}).catch(function (error) {$scope.$broadcast('load');$scope.loadingData =  false;});}}})();