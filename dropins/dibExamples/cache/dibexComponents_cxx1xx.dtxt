(function() {
    var require = ['/dropins/setNgMaterial/dibGlobals/js/component/timeDatePickerInput.js','/dropins/setNgMaterial/dibGlobals/js/component/taScrollWindow.js','/dropins/setNgMaterial/dibForm/js/component/formPaging.js','/dropins/setNgMaterial/dibGlobals/js/component/dibImgPreview.js','/dropins/setNgMaterial/dibGlobals/js/component/dibFileUploader.js','/dropins/setNgMaterial/dibMenu/js/components/dibSideBarStatus.js','/dropins/setNgMaterial/dibGlobals/js/component/dibIframe.js',  
		'/dropins/setNgMaterial/dibForm/js/services/dibForm.js'
	];
    require.push('/dropins/setNgMaterial/dibGlobals/js/component/selectDefault.js');
    var files = [];
    angular.forEach(require, function (file,index) { 
        files.push(DIB.base_url+'/files'+file);
    });
    files.push( DIB.base_url + '/dropins/setNgMaterial/dibGrid/Template/controller/dibexComponentGrid.js');
    var dibexComponents = angular.module('dibexComponents', [files]);
    dibexComponents.service('service179858',service179858);
    service179858.$inject = ['dibAjax', 'dibDiscover'];
    function service179858(dibAjax,  dibDiscover) {
            return {
                list : list
            };
            function list($scope, $element, node) {
                var url = dibDiscover.updateQueryStringMenu(DIB.base_url + "/dropins/setNgMaterial/dibMenu/menu/list.json?containerName=dibexComponents&rootMenuId=188605", node);
                var requestInfo = dibDiscover.addToUrl({
                    field : $('#ci179858'),
                    $scope : $scope,
                    container : $element,
                    url : url
                });
                return dibAjax.post(requestInfo, {
                    excludeFromCancels : true,
                    factoryResult : function (data) {
                        return data.records;
                    }
                })
            };
    };
    dibexComponents.service('service154791',service154791); 
    service154791.$inject = ['dibAjax', 'dibDiscover', '$q'];
    function service154791(dibAjax, dibDiscover, $q) {
            return {
                list : list
            };       
            function list($scope, $element, query, modelType, page) {
                var $defer = $q.defer();
                var url = dibDiscover.updateQueryStringDropdown(DIB.base_url + "/peff/Crud/componentlist/dibexComponents?containerItemId=154791", query, modelType, page);
                var requestInfo = dibDiscover.addToUrl({
                    field :$('#ci154791'),
                    $scope : $scope,
                    container : $element,
                    url : url
                });
                return dibAjax.post(requestInfo, {
                    excludeFromCancels : true,
                    factoryResult : function (data) {
                        return data.records;
                    }
                });
            };
    };
    dibexComponents.service('service154824',service154824); 
    service154824.$inject = ['dibAjax', 'dibDiscover', '$q'];
    function service154824(dibAjax, dibDiscover, $q) {
            return {
                list : list
            };       
            function list($scope, $element, query, modelType, page) {
                var $defer = $q.defer();
                var url = dibDiscover.updateQueryStringDropdown(DIB.base_url + "/peff/Crud/componentlist/dibexComponents?containerItemId=154824", query, modelType, page);
                var requestInfo = dibDiscover.addToUrl({
                    activeFilter : 'parentCompanyId',
                    field :$('#ci154824'),
                    $scope : $scope,
                    container : $element,
                    url : url
                });
                return dibAjax.post(requestInfo, {
                    excludeFromCancels : true,
                    factoryResult : function (data) {
                        return data.records;
                    }
                });
            };
    };
    dibexComponents.service('service154825',service154825); 
    service154825.$inject = ['dibAjax', 'dibDiscover', '$q'];
    function service154825(dibAjax, dibDiscover, $q) {
            return {
                list : list
            };       
            function list($scope, $element, query, modelType, page) {
                var $defer = $q.defer();
                var url = dibDiscover.updateQueryStringDropdown(DIB.base_url + "/peff/Crud/componentlist/dibexComponents?containerItemId=154825", query, modelType, page);
                var requestInfo = dibDiscover.addToUrl({
                    activeFilter : 'companyId',
                    field :$('#ci154825'),
                    $scope : $scope,
                    container : $element,
                    url : url
                });
                return dibAjax.post(requestInfo, {
                    excludeFromCancels : true,
                    factoryResult : function (data) {
                        return data.records;
                    }
                });
            };
    };
    var dibexComponents = angular.module('dibexComponents');
    dibexComponents.component('dibexComponents', {
        controllerAs: 'dibexComponents',
        templateUrl: DIB.base_url + '/dropins/setNgMaterial/dibForm/Template/view/dibexComponents.html',
        controller : component__dibexComponents
    });
    component__dibexComponents.$inject = [ '$scope','$element','dibCrud','dibNavigation','dibAction','dibContainer','dibDiscover','dibRecord','dibUtility','dibCommon','$log','$q','$ocLazyLoad', 
            'dibForm', 'dibMessage','$location','dibAction','dibUtility', '$timeout', 'dibActiveFilterState','service154791','service154824','service154825','service179858'];
    function component__dibexComponents($scope,$element,dibCrud,dibNavigation,dibAction,dibContainer,dibDiscover,dibRecord,dibUtility,dibCommon,$log,$q,$ocLazyLoad, 
            dibForm, dibMessage,$location,dibAction,dibUtility, $timeout, dibActiveFilterState,service154791,service154824,service154825,service179858) {
        var ctrl = this;        
                    $scope.container = {};
            $scope.container.Id = '7142';
            $scope.container.Name = 'dibexComponents';
            $scope.container.SubContainerItemAliases = []; 
            var crudController = "/peff/Crud";
                    $scope.model = {};
        $scope.model._GET = {};
        $scope.model['inputtext'] = '';
        $scope.model._GET['inputtext'] = dibContainer.modelItem({
            key : 'inputtext',
            dataType : "text", 
            create : true,
            update : true,
            service : null,
            itemAlias : false
        });
        $scope.model['inputnumber'] = '';
        $scope.model._GET['inputnumber'] = dibContainer.modelItem({
            key : 'inputnumber',
            dataType : "number", 
            create : true,
            update : true,
            service : null,
            itemAlias : false
        });
        $scope.model['datepickerinput'] = '';
        $scope.model._GET['datepickerinput'] = dibContainer.modelItem({
            key : 'datepickerinput',
            dataType : "date", 
            create : true,
            update : true,
            service : null,
            itemAlias : false
        });
        $scope.model['inputemail'] = '';
        $scope.model._GET['inputemail'] = dibContainer.modelItem({
            key : 'inputemail',
            dataType : "text", 
            create : true,
            update : true,
            service : null,
            itemAlias : false
        });
        $scope.model['inputurl'] = '';
        $scope.model._GET['inputurl'] = dibContainer.modelItem({
            key : 'inputurl',
            dataType : "text", 
            create : true,
            update : true,
            service : null,
            itemAlias : false
        });
        $scope.model['mdcheckbox'] = '';
        $scope.model._GET['mdcheckbox'] = dibContainer.modelItem({
            key : 'mdcheckbox',
            dataType : "boolean", 
            create : true,
            update : true,
            service : null,
            itemAlias : false
        });
        $scope.model['mdselectenum'] = '';
        $scope.model._GET['mdselectenum'] = dibContainer.modelItem({
            key : 'mdselectenum',
            dataType : "text", 
            create : true,
            update : true,
            service : null,
            itemAlias : false
        });
        $scope.model['select___mdautocomplete'] = '';
        $scope.model._GET['mdautocomplete'] = dibContainer.modelItem({
            key : 'mdautocomplete',
            dataType : "select", 
            create : true,
            update : true,
            service : service154791,
            itemAlias : false
        });
        $scope.model['inputtextarea'] = '';
        $scope.model._GET['inputtextarea'] = dibContainer.modelItem({
            key : 'inputtextarea',
            dataType : "text", 
            create : true,
            update : true,
            service : null,
            itemAlias : false
        });
        $scope.model['htmleditor'] = '';
        $scope.model._GET['htmleditor'] = dibContainer.modelItem({
            key : 'htmleditor',
            dataType : "text", 
            create : true,
            update : true,
            service : null,
            itemAlias : false
        });
        $scope.model['inputnumberdecimal'] = '';
        $scope.model._GET['inputnumberdecimal'] = dibContainer.modelItem({
            key : 'inputnumberdecimal',
            dataType : "number", 
            create : true,
            update : true,
            service : null,
            itemAlias : false
        });
        $scope.model['varchar10_required'] = '';
        $scope.model._GET['varchar10_required'] = dibContainer.modelItem({
            key : 'varchar10_required',
            dataType : "text", 
            create : true,
            update : true,
            service : null,
            itemAlias : false
        });
        $scope.model['id'] = '';
        $scope.model._GET['id'] = dibContainer.modelItem({
            key : 'id',
            dataType : "number", 
            create : false,
            update : false,
            service : null,
            itemAlias : false
        });
        $scope.model['datetime_fld'] = '';
        $scope.model._GET['datetime_fld'] = dibContainer.modelItem({
            key : 'datetime_fld',
            dataType : "dateTime", 
            create : true,
            update : true,
            service : null,
            itemAlias : false
        });
        $scope.model['image_fld'] = '';
        $scope.model._GET['image_fld'] = dibContainer.modelItem({
            key : 'image_fld',
            dataType : "text", 
            create : true,
            update : true,
            service : null,
            itemAlias : false
        });
        $scope.model['file_fld'] = '';
        $scope.model._GET['file_fld'] = dibContainer.modelItem({
            key : 'file_fld',
            dataType : "text", 
            create : true,
            update : true,
            service : null,
            itemAlias : false
        });
        $scope.model['select___test_company_id'] = '';
        $scope.model._GET['test_company_id'] = dibContainer.modelItem({
            key : 'test_company_id',
            dataType : "select", 
            create : true,
            update : true,
            service : service154824,
            itemAlias : 'parentCompanyId'
        });
        $scope.model['select___test_company2_id'] = '';
        $scope.model._GET['test_company2_id'] = dibContainer.modelItem({
            key : 'test_company2_id',
            dataType : "select", 
            create : true,
            update : true,
            service : service154825,
            itemAlias : 'companyId'
        });
        $scope.model['mddatefield'] = '';
        $scope.model._GET['mddatefield'] = dibContainer.modelItem({
            key : 'mddatefield',
            dataType : "date", 
            create : true,
            update : true,
            service : null,
            itemAlias : false
        });
        $scope.model['timedatepickerinput'] = '';
        $scope.model._GET['timedatepickerinput'] = dibContainer.modelItem({
            key : 'timedatepickerinput',
            dataType : "dateTime", 
            create : true,
            update : true,
            service : null,
            itemAlias : false
        });
        $scope.model['inputcheckbox'] = '';
        $scope.model._GET['inputcheckbox'] = dibContainer.modelItem({
            key : 'inputcheckbox',
            dataType : "text", 
            create : true,
            update : true,
            service : null,
            itemAlias : false
        });
        $scope.model['inputdate'] = '';
        $scope.model._GET['inputdate'] = dibContainer.modelItem({
            key : 'inputdate',
            dataType : "text", 
            create : true,
            update : true,
            service : null,
            itemAlias : false
        });
        $scope.model['inputtime'] = '';
        $scope.model._GET['inputtime'] = dibContainer.modelItem({
            key : 'inputtime',
            dataType : "time", 
            create : true,
            update : true,
            service : null,
            itemAlias : false
        });
        $scope.model['inputdatetimelocal'] = '';
        $scope.model._GET['inputdatetimelocal'] = dibContainer.modelItem({
            key : 'inputdatetimelocal',
            dataType : "text", 
            create : true,
            update : true,
            service : null,
            itemAlias : false
        });
        $scope.model['inputmonth'] = '';
        $scope.model._GET['inputmonth'] = dibContainer.modelItem({
            key : 'inputmonth',
            dataType : "text", 
            create : true,
            update : true,
            service : null,
            itemAlias : false
        });
        $scope.model['inputradio'] = '';
        $scope.model._GET['inputradio'] = dibContainer.modelItem({
            key : 'inputradio',
            dataType : "text", 
            create : true,
            update : true,
            service : null,
            itemAlias : false
        });
        $scope.model['inputweek'] = '';
        $scope.model._GET['inputweek'] = dibContainer.modelItem({
            key : 'inputweek',
            dataType : "text", 
            create : true,
            update : true,
            service : null,
            itemAlias : false
        });
        $scope.model['inputrange'] = '';
        $scope.model._GET['inputrange'] = dibContainer.modelItem({
            key : 'inputrange',
            dataType : "text", 
            create : true,
            update : true,
            service : null,
            itemAlias : false
        });
        $scope.model['mdcheckboxRt'] = '';
        $scope.model._GET['mdcheckboxRt'] = dibContainer.modelItem({
            key : 'mdcheckboxRt',
            dataType : "boolean", 
            create : true,
            update : true,
            service : null,
            itemAlias : false
        });
        $scope.model['mdswitch'] = '';
        $scope.model._GET['mdswitch'] = dibContainer.modelItem({
            key : 'mdswitch',
            dataType : "boolean", 
            create : true,
            update : true,
            service : null,
            itemAlias : false
        });
        $scope.view = {};
            $scope.view.parentCompanyId = {'disabled' : false,'visible' : true, 'class' : null, 'style' : null };
            $scope.view.companyId = {'disabled' : false,'visible' : true, 'class' : null, 'style' : null };
            $scope.view.openMenu = {'disabled' : false,'visible' : true, 'class' : null, 'style' : null };
            $scope.view.sidenavMenuEg = {'disabled' : false,'visible' : true, 'class' : null, 'style' : null };
            var reloadContainerFunctions = [];
            dibContainer.watchModel($scope);
	        $scope.dibCommon = dibCommon;
            $scope.primaryKeys = ["id"];
        var $dibContainer = $element.first();
        $scope.menus = {};
            $scope.menus.service179858 = {};
            $scope.menus.service179858.update = function (node){
                $scope.menus.service179858.loading = true;
                service179858.list($scope,$dibContainer, !!node? node.id : null).then(function (menu) {
                    $scope.menus.service179858.loading = false;
                    if (!!node === false) { 
                        $scope.menus.service179858.menu = menu;
                    } else { 
                        node.children = menu;
                    }
                }, function () {
                    $scope.menus.service179858.loading = false;
                });
            };
            $scope.menus.service179858.update();
    $scope.dropdowns = {};
    $scope.dropdowns.service154791 = {};
    $scope.dropdowns.service154791.items = [];
    var setTimeoutCancel154791 = null;
    var $dibContainer = $element.first();
    var query154791;
    $scope.loadService154791 = function (query, skipTimeout) {
        if (query154791 != query) {
            query154791 = query;
            if (!!skipTimeout) {
                return service154791.list($scope,$dibContainer, query).then(function (items) {
                    $scope.dropdowns.service154791.items = items;
                });
            } else {
                clearTimeout(setTimeoutCancel154791);
                setTimeoutCancel154791 = setTimeout(function () { 
                    service154791.list($scope,$dibContainer, query).then(function (items) {
                        $scope.dropdowns.service154791.items = items;
                    });
                }, 100);
            }
        } 
    };
    $scope.dropdowns.service154791.searchTextChange = function (query) {
        $scope.loadService154791(query);
    };
    $scope.dropdowns.service154791.getItems = function (query,modelType) {
        return service154791.list($scope,$dibContainer, query,modelType);
    };
    $scope.select154791 = function (model,modelName,fieldName) {
        if (!!modelName == false) modelName ="model";
        var $element =  $('#ci154791');
        if (!!$element.attr('select-model') === false) { 
            $element = $element.find('[select-model]');
        }
        var modelName =  'selected___' + fieldName;
        $element.trigger('select');
        if (!!model[modelName]  === false) { 
            return  false;
        }
        angular.forEach($scope.dropdowns.service154791.items, function (item, index)   {
            if (item.id == model[modelName]['id']) {
                model[modelName]['id_display_value'] = item.id_display_value; 
                return false;
            }
        });
    };
    $scope.dropdowns.service154824 = {};
    $scope.dropdowns.service154824.items = [];
    var setTimeoutCancel154824 = null;
    var $dibContainer = $element.first();
    var query154824;
    $scope.loadService154824 = function (query, skipTimeout) {
        if (query154824 != query) {
            query154824 = query;
            if (!!skipTimeout) {
                return service154824.list($scope,$dibContainer, query).then(function (items) {
                    $scope.dropdowns.service154824.items = items;
                });
            } else {
                clearTimeout(setTimeoutCancel154824);
                setTimeoutCancel154824 = setTimeout(function () { 
                    service154824.list($scope,$dibContainer, query).then(function (items) {
                        $scope.dropdowns.service154824.items = items;
                    });
                }, 100);
            }
        } 
    };
    $scope.dropdowns.service154824.searchTextChange = function (query) {
        $scope.loadService154824(query);
    };
    $scope.dropdowns.service154824.getItems = function (query,modelType) {
        return service154824.list($scope,$dibContainer, query,modelType);
    };
    $scope.select154824 = function (model,modelName,fieldName) {
        if (!!modelName == false) modelName ="model";
        var $element =  $('#ci154824');
        if (!!$element.attr('select-model') === false) { 
            $element = $element.find('[select-model]');
        }
        var modelName =  'selected___' + fieldName;
        $element.trigger('select');
        if (!!model[modelName]  === false) { 
            return  false;
        }
        angular.forEach($scope.dropdowns.service154824.items, function (item, index)   {
            if (item.id == model[modelName]['id']) {
                model[modelName]['id_display_value'] = item.id_display_value; 
                return false;
            }
        });
    };
    $scope.dropdowns.service154825 = {};
    $scope.dropdowns.service154825.items = [];
    var setTimeoutCancel154825 = null;
    var $dibContainer = $element.first();
    var query154825;
    $scope.loadService154825 = function (query, skipTimeout) {
        if (query154825 != query) {
            query154825 = query;
            if (!!skipTimeout) {
                return service154825.list($scope,$dibContainer, query).then(function (items) {
                    $scope.dropdowns.service154825.items = items;
                });
            } else {
                clearTimeout(setTimeoutCancel154825);
                setTimeoutCancel154825 = setTimeout(function () { 
                    service154825.list($scope,$dibContainer, query).then(function (items) {
                        $scope.dropdowns.service154825.items = items;
                    });
                }, 100);
            }
        } 
    };
    $scope.dropdowns.service154825.searchTextChange = function (query) {
        $scope.loadService154825(query);
    };
    $scope.dropdowns.service154825.getItems = function (query,modelType) {
        return service154825.list($scope,$dibContainer, query,modelType);
    };
    $scope.select154825 = function (model,modelName,fieldName) {
        if (!!modelName == false) modelName ="model";
        var $element =  $('#ci154825');
        if (!!$element.attr('select-model') === false) { 
            $element = $element.find('[select-model]');
        }
        var modelName =  'selected___' + fieldName;
        $element.trigger('select');
        if (!!model[modelName]  === false) { 
            return  false;
        }
        angular.forEach($scope.dropdowns.service154825.items, function (item, index)   {
            if (item.id == model[modelName]['id']) {
                model[modelName]['id_display_value'] = item.id_display_value; 
                return false;
            }
        });
    };
            $scope.openAuditTrail = function (portAlias) {
                            var primaryKeyData = dibRecord.primaryKeyAuditIds($scope.primaryKeys, $scope.model);
                            if (primaryKeyData.length > 0) {
                            dibCommon.goTo(DIB.audit_trail_container,portAlias,true,"?filter_pef_table_id=1437&filter_record_id="+primaryKeyData);
                        } else {
                            dibCommon.goTo(DIB.audit_trail_container,portAlias,true,"?filter_pef_table_id=1437");
                        }
            };
        ctrl.$onInit = function () {
            $scope.addModel = function () { 
                dibForm.addModel($scope, "dibexComponents");
            };
            $scope.deleteRecord = function (options) {
                dibForm.deleteRecord('dibexComponents', $scope, $scope.dibexComponents, options, crudController).then(function (){
                });
            };         
            /**
            *  Saving record in this model
            */
            $scope.saveModel = function (options) {
                if ($scope.loadingData) return $q.reject('Busy loading...');
                if (dibForm.validate($scope, $scope.dibexComponents)) {
                    $scope.loadingData =  true;
                    var primaryKeyData = dibRecord.primaryKeyData($scope.primaryKeys, $scope.model);
                    return dibForm.updateRecord('dibexComponents', $scope, $scope.dibexComponents, crudController, options).then(function () { 
                        if (Object.keys(primaryKeyData).length>0) {
                        } else {
                            loadForm();
                        }
                        return $q.when();
                    });
                }
            };
            var mdTabs = $("[dib-container=dibexComponents]").closest('md-tabs');
            var tabsScope = null;
            if (mdTabs.length === 0) {
                mdTabs = null;
            }
            else {
                tabsScope = mdTabs.scope();
            }
            $scope.$watch('dibexComponents.$dirty', function (newValue, oldValue) { 
                dibNavigation.containerDirty = newValue;
                if (dibNavigation.containerDirty && !!mdTabs && !!tabsScope) {
                    var currentIndex = tabsScope.selectedIndex;
                    dibNavigation.addSaveFailedPromise(function(tabIndex) {
                        tabsScope.selectedIndex = tabIndex;
                        return $q.when();
                    }, [currentIndex]);
                }
            },true);
            dibNavigation.addSavePromise($scope.saveModel);
            //Giving the form the ability to handle dependency data (if an event is trigger on another component that has a refresh item alias point to the form/child form)
            $scope.setDependencyData = function (object) { 
                return dibForm.setDependencyData($scope,object);
            };
            $scope.itemAliasData = function () {
                return angular.copy($scope.primaryKeyData);
            };
            /**
            * Clear the form from records and dependancy data
            */
            $scope.clearForm = function () {
                if ($scope.loadingData) return;
                $scope.primaryKeyData = null;
                $scope.reloadContainer();
                dibForm.clean($scope.dibexComponents,$scope.model);
            };
            $scope.reloadContainer = function (options) {
                $scope.autoRefresh = true;
                loadForm ();
            };
            $scope.$watch('model', function (oldVal, newVal) {
            },true);  
        };
        ctrl.$postLink = function () {
            var isUrlContainer = dibContainer.urlContainer('dibexComponents');
            if (isUrlContainer) {
                //check if record is first or last
                if (!!$location.search()['record'] && $location.search()['record']!='new') {
                    $scope.$broadcast('load');
                }
            } else {
                $scope.$broadcast('load');
            }
            //var isUrlContainer = dibContainer.urlContainer('dibexComponents');
            //the if below we removed the requirement to match the url to the containerName, so we can load data into a window without the url changing. wizBuildAppAdv.
                $scope.reloadContainer({ force : true });
        };
        function loadForm () { 
            dibNavigation.reset();
            dibNavigation.addSavePromise($scope.saveModel);
            //clear the record status
            $scope.recordStatus = null;
            var isUrlContainer = dibContainer.urlContainer('dibexComponents');
            if (isUrlContainer) {
                //check if record is first or last
                if (!!$location.search()['record'] && $location.search()['record']!='new') {
                    return;
                }
            }
            //check if this is a child container 
            $scope.primaryKeyData = isUrlContainer ? dibDiscover.getPrimaryKeysFromUrl() : $scope.primaryKeyData;
            if (!!$scope.primaryKeyData === false) {
            $scope.primaryKeyData = {};
            //set all the primaryKeys to 0
            angular.forEach($scope.primaryKeys, function (key,index) { 
                $scope.model[key] = 0;
            });
            }
            //remove active filter if no record are available
            if (Object.keys($scope.primaryKeyData).length ==0) {
                $scope.recordStatus = "create";
            } else {
                $scope.recordStatus = "update";
            }
            $scope.loadingData = true;
            $scope.currentPrimaryKeyData = $scope.primaryKeyData;
            dibCrud.read($scope,crudController,'dibexComponents',{
                primaryKeyData : $scope.currentPrimaryKeyData,
                createParams: "{}"
            },
            $scope
            ).then(function (model) {
                $scope.model = model;
                $scope.currentPrimaryKeyData = dibRecord.primaryKeyData($scope.primaryKeys, $scope.model);
                $scope.$broadcast('load');
                $scope.dibexComponents.$setUntouched();
                $scope.dibexComponents.$setPristine();
                //@TODO refactor start 
                var timeoutTest = $timeout(function () { 
                    dibContainer.reloadChildren({containerName: 'dibexComponents'});
                },500); 
                //@FRANCOIS @TODO Maybe we can change this to a better magic number :)
                // var eventDeregister = $rootScope.$on("dibAngular.subcontainerLoaded", function () {
                //     $timeout.cancel(timeoutTest);
                //     timeoutTest = $timeout(function () { 
                //         dibContainer.reloadChildren({containerName: 'dibexComponents'});
                //         eventDeregister();
                //     },500); 
                //     //@FRANCOIS @TODO Maybe we can change this to a better magic number :)
                // });
                //Refactor stop
                $log.debug("containerName read->model",$scope.model );
                $scope.loadingData =  false;
            }).catch(function (error) {
                $scope.$broadcast('load');
                $scope.loadingData =  false;
            });
        }
    }
})();
