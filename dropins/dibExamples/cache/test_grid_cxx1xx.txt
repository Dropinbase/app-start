(function() {
  var require = ['Dropins.setSencha.dibGrid.js.app.grid.column.Int','Dropins.setSencha.dibGrid.js.app.grid.column.String','Ext.ux.form.DateTimeField','Ext.grid.column.CheckColumn','Ext.grid.column.Date','Ext.ux.form.field.PComboBox', 
		'/dropins/setNgMaterial/dibGrid/js/components/dibTableWidth.js',
  		'/dropins/setNgMaterial/dibGrid/js/components/dibInlineEdit.js'
  ];
  require.push('/dropins/setNgMaterial/dibGlobals/js/component/selectDefault.js');
  var files = [];
  angular.forEach(require, function (file,index) { 
    files.push(DIB__base_url+'/files'+file);
  });
    var test_grid = angular.module('test_grid', [files]).run(['$rootScope', 'actionLoaderService', function($rootScope, actionLoaderService) {
            var actions = ['dibGlobals.action.OpenContainer','dibGlobals.action.ToggleMenu'];
            if (!actions || actions.length === 0) {
                return;
            }
            actionLoaderService.loadDibActionDefinitions(actions);
    }]);
    test_grid.factory('service145997',['ajax', '$log', 'discoverService', '$q', function (ajax, $log,discoverService, $q) {
            var list = function (query, modelType, page) {
                var $defer = $q.defer();
                var url = DIB__base_url + "/peff/Crud/componentlist/test_grid?containerItemId=145997";
               if (!!page === false) {
                   url += "&page=1&limit=20";
               } else {
                   url += "&limit=20&page="+ page;
               }
               if (modelType=='search') { 
                   url += "&showUsedOnly=true";
               }
               if (!!query === false) { 
                   url += "&query=";
               } else {
                   url += "&query="+query;
               }
                var requestInfo = discoverService.addToUrl({
                    field :$('#ci145997'),
                    container : $('[dib-container=test_grid]'),
                    url : url
                });
               return ajax.post(requestInfo, {
                    excludeFromCancels : true,
                    factoryResult : function (data) {
                        return data.records;
                    }
                })
            };
            return {
                list : list
            };         
    }]);
    test_grid.factory('service146001',['ajax', '$log', 'discoverService', '$q', function (ajax, $log,discoverService, $q) {
            var list = function (query, modelType, page) {
                var $defer = $q.defer();
                var url = DIB__base_url + "/peff/Crud/componentlist/test_grid?containerItemId=146001";
               if (!!page === false) {
                   url += "&page=1&limit=20";
               } else {
                   url += "&limit=20&page="+ page;
               }
               if (modelType=='search') { 
                   url += "&showUsedOnly=true";
               }
               if (!!query === false) { 
                   url += "&query=";
               } else {
                   url += "&query="+query;
               }
                var requestInfo = discoverService.addToUrl({
                    field :$('#ci146001'),
                    container : $('[dib-container=test_grid]'),
                    url : url
                });
               return ajax.post(requestInfo, {
                    excludeFromCancels : true,
                    factoryResult : function (data) {
                        return data.records;
                    }
                })
            };
            return {
                list : list
            };         
    }]);
    test_grid.factory('service145997',['ajax', '$log', 'discoverService', '$q', function (ajax, $log,discoverService, $q) {
            var list = function (query, modelType, page) {
                var $defer = $q.defer();
                var url = DIB__base_url + "/peff/Crud/componentlist/test_grid?containerItemId=145997";
               if (!!page === false) {
                   url += "&page=1&limit=20";
               } else {
                   url += "&limit=20&page="+ page;
               }
               if (modelType=='search') { 
                   url += "&showUsedOnly=true";
               }
               if (!!query === false) { 
                   url += "&query=";
               } else {
                   url += "&query="+query;
               }
                var requestInfo = discoverService.addToUrl({
                    field :$('#ci145997'),
                    container : $('[dib-container=test_grid]'),
                    url : url
                });
               return ajax.post(requestInfo, {
                    excludeFromCancels : true,
                    factoryResult : function (data) {
                        return data.records;
                    }
                })
            };
            return {
                list : list
            };         
    }]);
    test_grid.factory('service146001',['ajax', '$log', 'discoverService', '$q', function (ajax, $log,discoverService, $q) {
            var list = function (query, modelType, page) {
                var $defer = $q.defer();
                var url = DIB__base_url + "/peff/Crud/componentlist/test_grid?containerItemId=146001";
               if (!!page === false) {
                   url += "&page=1&limit=20";
               } else {
                   url += "&limit=20&page="+ page;
               }
               if (modelType=='search') { 
                   url += "&showUsedOnly=true";
               }
               if (!!query === false) { 
                   url += "&query=";
               } else {
                   url += "&query="+query;
               }
                var requestInfo = discoverService.addToUrl({
                    field :$('#ci146001'),
                    container : $('[dib-container=test_grid]'),
                    url : url
                });
               return ajax.post(requestInfo, {
                    excludeFromCancels : true,
                    factoryResult : function (data) {
                        return data.records;
                    }
                })
            };
            return {
                list : list
            };         
    }]);
})();
(function() {
var test_grid = angular.module('test_grid');
test_grid.component('test_grid', {
    controllerAs: 'test_grid',
    templateUrl: DIB__base_url + '/dropins/setNgMaterial/dibGrid/Template/view/test_grid.html',
    controller : component__test_grid
});
component__test_grid.$inject = [  
            '$location', '$timeout', '$scope', '$ocLazyLoad', '$rootScope', '$log', 'containerService', '$q', 'recordFactory', 'messageService','keysPressed','service145997','service146001','containerService','recordFactory','crudService','utilityService'];
    function component__test_grid($location, $timeout, $scope, $ocLazyLoad, $rootScope, $log, containerService, $q, recordFactory, messageService,keysPressed,service145997,service146001,containerService,recordFactory,crudService,utilityService) {
                    $scope.container = {};
            $scope.container.Id = '3396';
            $scope.container.Name = 'test_grid';
            $("[dib-container='test_grid']").trigger('load');
            var crudController = "/peff/Crud";
                    $scope.model = {};
        $scope.model._GET = recordFactory.modelConstruct();
        $scope.model._GET['id'] = containerService.modelItem("text");
        $scope.model._GET['varchar10_required'] = containerService.modelItem("text");
        $scope.model._GET['has_default'] = containerService.modelItem("text");
        $scope.model._GET['time_stamp'] = containerService.modelItem("text");
        $scope.model._GET['unique_fld'] = containerService.modelItem("text");
        $scope.model._GET['nvarchar80'] = containerService.modelItem("text");
        $scope.model._GET['text_fld'] = containerService.modelItem("text");
        $scope.model._GET['tinytext_fld'] = containerService.modelItem("text");
        $scope.model._GET['mediumtext_fld'] = containerService.modelItem("text");
        $scope.model._GET['longtext_fld'] = containerService.modelItem("text");
        $scope.model._GET['bit_fld'] = containerService.modelItem("text");
        $scope.model._GET['tinyint_fld'] = containerService.modelItem("text");
        $scope.model._GET['smallint_fld'] = containerService.modelItem("text");
        $scope.model._GET['int_fld'] = containerService.modelItem("text");
        $scope.model._GET['bigint_fld'] = containerService.modelItem("text");
        $scope.model._GET['float_fld'] = containerService.modelItem("text");
        $scope.model._GET['double_fld'] = containerService.modelItem("text");
        $scope.model._GET['decimal_fld'] = containerService.modelItem("text");
        $scope.model._GET['date_fld'] = containerService.modelItem("text");
        $scope.model._GET['time_fld'] = containerService.modelItem("text");
        $scope.model._GET['datetime_fld'] = containerService.modelItem("text");
        $scope.model._GET['year_fld'] = containerService.modelItem("text");
        $scope.model._GET['enum_fld'] = containerService.modelItem("text");
        $scope.model._GET['set_fld'] = containerService.modelItem("text");
        $scope.model._GET['email'] = containerService.modelItem("text");
        $scope.model._GET['url'] = containerService.modelItem("text");
        $scope.model._GET['longitude'] = containerService.modelItem("text");
        $scope.model._GET['lattitude'] = containerService.modelItem("text");
        $scope.model._GET['file_fld'] = containerService.modelItem("text");
        $scope.model._GET['image_fld'] = containerService.modelItem("text");
        $scope.model._GET['document_fld'] = containerService.modelItem("text");
        $scope.model._GET['expression_fld'] = containerService.modelItem("text");
        $scope.model._GET['notes'] = containerService.modelItem("text");
        $scope.model._GET['test_company_id'] = containerService.modelItem("text");
        $scope.model._GET['test_company2_id'] = containerService.modelItem("text");
        $scope.model._GET['uid'] = containerService.modelItem("text");
            var reloadContainerFunctions = [];
            containerService.watchModel($scope);
	        $scope.common = $rootScope.common;
            $scope.primaryKeys = ["id"];
        $scope.menus = {};
        $scope.dropdowns = {};
        //load all dropdowns required for this container
            $scope.dropdowns.service145997 = {};
            $scope.dropdowns.service145997.items = [];
            var setTimeoutCancel145997 = null;
            var query145997;
            $scope.loadService145997 = function (query, skipTimeout) {
                //This is to prevent to load any unnessary data as this gets triggered a few times with the multi line editing
                if (query145997 != query) {
                    query145997 = query;
                    if (!!skipTimeout) {
                        return service145997.list(query).then(function (items) {
                            $scope.dropdowns.service145997.items = items;
                        });
                    } else {
                        clearTimeout(setTimeoutCancel145997);
                        setTimeoutCancel145997 = setTimeout(function () { 
                            service145997.list(query).then(function (items) {
                                $scope.dropdowns.service145997.items = items;
                            });
                        }, 100);
                    }
                } 
            };
            $scope.dropdowns.service145997.searchTextChange = function (query) {
                $scope.loadService145997(query);
            };
            $scope.dropdowns.service145997.getItems = function (query,modelType) {
                //return promise this will asign the result to the items
                return service145997.list(query,modelType);
            };
            $scope.select145997 = function (model,modelName) {
                if (!!modelName == false) modelName ="model";
                var $element =  $('#ci145997');
                if (!!$element.attr('select-model') === false) { 
                    $element = $element.find('[select-model]');
                }
                var modelName =  $element.attr('select-model').replace(modelName+'.','').replace('.id', '');
                $element.trigger('select');
                if (!!model[modelName]  === false) { 
                    return  false;
                }
                angular.forEach($scope.dropdowns.service145997.items, function (item, index)   {
                    if (item.id == model[modelName]['id']) {
                        model[modelName]['id_display_value'] = item.id_display_value; 
                        return false;
                    }
                });
            };
            var setTimeout145997 = null;
            //loadService145997();
            //reloadContainerFunctions.push($scope.loadService145997);
            $scope.dropdowns.service146001 = {};
            $scope.dropdowns.service146001.items = [];
            var setTimeoutCancel146001 = null;
            var query146001;
            $scope.loadService146001 = function (query, skipTimeout) {
                //This is to prevent to load any unnessary data as this gets triggered a few times with the multi line editing
                if (query146001 != query) {
                    query146001 = query;
                    if (!!skipTimeout) {
                        return service146001.list(query).then(function (items) {
                            $scope.dropdowns.service146001.items = items;
                        });
                    } else {
                        clearTimeout(setTimeoutCancel146001);
                        setTimeoutCancel146001 = setTimeout(function () { 
                            service146001.list(query).then(function (items) {
                                $scope.dropdowns.service146001.items = items;
                            });
                        }, 100);
                    }
                } 
            };
            $scope.dropdowns.service146001.searchTextChange = function (query) {
                $scope.loadService146001(query);
            };
            $scope.dropdowns.service146001.getItems = function (query,modelType) {
                //return promise this will asign the result to the items
                return service146001.list(query,modelType);
            };
            $scope.select146001 = function (model,modelName) {
                if (!!modelName == false) modelName ="model";
                var $element =  $('#ci146001');
                if (!!$element.attr('select-model') === false) { 
                    $element = $element.find('[select-model]');
                }
                var modelName =  $element.attr('select-model').replace(modelName+'.','').replace('.id', '');
                $element.trigger('select');
                if (!!model[modelName]  === false) { 
                    return  false;
                }
                angular.forEach($scope.dropdowns.service146001.items, function (item, index)   {
                    if (item.id == model[modelName]['id']) {
                        model[modelName]['id_display_value'] = item.id_display_value; 
                        return false;
                    }
                });
            };
            var setTimeout146001 = null;
            //loadService146001();
            //reloadContainerFunctions.push($scope.loadService146001);
            $scope.openAuditTrail = function (portAlias) {
                            var primaryKeyData = recordFactory.primaryKeyAuditIds($scope.primaryKeys, $scope.model);
                            if (primaryKeyData.length > 0) {
                            $scope.common.goTo(DIB__audit_trail_container,portAlias,true,"?filter_pef_table_id=1437&filter_record_id="+primaryKeyData);
                        } else {
                            $scope.common.goTo(DIB__audit_trail_container,portAlias,true,"?filter_pef_table_id=1437");
                        }
            };
        $scope.gridOptions = {};
        $scope.gridOptions.data = 'gridData';
        $scope.gridOptions.enableFiltering = true;
        $scope.gridOptions.inlineAddShow = "" == "true";
        /**
         * Inline add show/hide
         */
        $scope.toggleInlineAdd = function () { 
            $scope.gridOptions.inlineAddShow = !$scope.gridOptions.inlineAddShow;
            //ensuring edit buttons is on the correct place by triggering the scroll event
            var $content = $('[dib-container=test_grid]').find('.dib-grid-column-content');
            $timeout(function () { 
                $content.trigger('scroll');
                $content.trigger('refreshHeight');
            },100);
        }
        $scope.$on('dib-select', function ($event, $row) { 
            $log.debug("Selected Row", $row);
        });
        $scope.selectedItems = [];
        $scope.lastSelectedItem = null;
        var arraySelected = [];
        /**
         * Copy the selected record to the current row.
         */
        $scope.useSelectedRow = function ($event, model) {
              var scope = angular.element($event.currentTarget).scope().$parent;
              model = recordFactory.getModel(angular.copy($scope.lastSelectedItem), scope);
              angular.forEach($scope.primaryKeys, function (key, index) { 
                  model[key] = 0;
              });
        };
        /**
         * Select the row
         */
        $scope.selectRow = function (row,$event) { 
            //check if inline editing is busy then ignore
            if (row.___editing) { 
                return;
            }
            //If the even is passed in then we should not select row. 
            if (!!$event) return;
            row.___selected = !row.___selected;
            //add to array if not checked, as this means the item will be checked.
            if (row.___selected) { 
                //Setting the last selected node
                $scope.lastSelectedItem = row;
                $log.debug("SELECTED NODE", row);
                //trigger selected item event
                $("[dib-container='test_grid']").trigger('itemSelect', [row]);
            } else {
                $scope.lastSelectedItem = null;
                $("[dib-container='test_grid']").trigger('itemDeselect', [row]);
            }
            //update the selected items
            $scope.selectedItems = []; 
            angular.forEach($scope.gridData, function (gridRow, index) { 
                if (gridRow.___selected) {
                    $scope.selectedItems.push(gridRow);
                }
            });
            $log.debug("CURRENT SELECTED ITEMS IN GRID", $scope.selectedItems);
        };
        /**
         * Save the row data
         */
        $scope.saveRow = function ($event, row) {
            var element = $($event.target).parents('[dib-inline-edit]');
            element.trigger('editClose');    
            $event.stopPropagation();
            $event.preventDefault();
        };
        /**
         * Add the row
         */
        $scope.addRow = function ($event, row) {
            var element = $($event.target).parents('[dib-inline-edit]');
            element.trigger('addRow');    
            $event.stopPropagation();
            $event.preventDefault();
        };
        /**
         * Cancel row and close editing
         */
        $scope.cancelRow = function ($event, row) {
            var element = $($event.target).parents('[dib-inline-edit]')
            row.___editing = false;
            row.___selected = true;
            element.find('[dib-edit]').hide();
            element.find('[dib-view]').show();
            $event.stopPropagation();
            $event.preventDefault();
        };
        /**
         * clean row mainly used to cancel inline add.
         */
        $scope.cleanRow = function ($event, model, $form) {
            $form.$setDirty(false);
            containerService.cleanForm($form,model);
            $event.stopPropagation();
            $event.preventDefault();
        };
        /**
         * Double click event gets triggered then the row can be editable
         */
        $scope.rowEdit = function (element) {
            var $rowElement = $(element).find('[dib-inline-edit]');
            if ($rowElement.length > 0) {
                //Open
                $rowElement.trigger('edit');
                $rowElement.removeClass('md-accent');    
            } else {
                //Closed
                $containerItemElement.parents('[dib-inline-edit=open]').trigger('editClose');        
            }
            var $rowElement =$rowElement.parents('[dib-inline-edit=add-mode]');
            if ($rowElement.length>0) {
                $rowElement.trigger('addRow');
            }
        };
        /**
         * The itemAliasData function on the scope is how we collect data from this component/dropin for submissionData, or when the component is referenced by using its itemAlias
         */
        $scope.itemAliasData = function () {
              var itemSelected= angular.copy($scope.lastSelectedItem);
              return itemSelected;
        };
        /**
         * Custom sorting added Cobus
         */
        $scope.gridOptions.sortFields = {};
        $scope.gridOptions.sortNr = 0;
        function applySortFromUrl() { 
            var sortUrlChange= containerService.urlContainer("test_grid");
             var searchLength = Object.keys($location.search()).length;
            if (sortUrlChange && searchLength>0) {
                //apply search from urlContainer
                $scope.gridOptions.sortNr = 0;
                angular.forEach($location.search(), function (item,index) {
                    if (index.indexOf("sort_") !==-1) { 
                        $scope.gridOptions.sortNr ++;
                        var splitValues = item.split("::");
                        $scope.gridOptions.sortFields[index.replace('sort_','')]= {
                            "Order" : splitValues[0],
                            "Count" :  splitValues[1]
                        } 
                    } 
                });
                //apply sort from urlContainer
            }
        }
        $scope.gridOptions.toggleSort = function (fieldName) { 
            var sortUrlChange= containerService.urlContainer("test_grid");
            if (!!$scope.gridOptions.sortFields[fieldName] && $scope.gridOptions.sortFields[fieldName]['Order'] === "ASC") { 
                $scope.gridOptions.sortFields[fieldName]['Order'] = "DESC";
                if (sortUrlChange ) $location.search("sort_"+fieldName,"DESC::"+$scope.gridOptions.sortFields[fieldName]['Count']);
            } else if (!!$scope.gridOptions.sortFields[fieldName] && $scope.gridOptions.sortFields[fieldName]['Order'] === "DESC") { 
                $scope.gridOptions.sortNr = 0;
                delete $scope.gridOptions.sortFields[fieldName];
                if (Object.keys($scope.gridOptions.sortFields).length == 0)  {
                    containerService.cleanUrlState();
                }
                if (sortUrlChange ) $location.search("sort_"+fieldName,null);
                angular.forEach($scope.gridOptions.sortFields, function (sort,index) { 
                    if (!!sort) { 
                        $scope.gridOptions.sortNr ++;
                        sort['Count'] = $scope.gridOptions.sortNr;
                        if (sortUrlChange ) $location.search("sort_"+index,sort['Order']+"::"+sort['Count']);
                    }
                });
                return;
            } else {
                $scope.gridOptions.sortNr ++;
                $scope.gridOptions.sortFields[fieldName] = {"Order" : "ASC", "Count" : $scope.gridOptions.sortNr };
                if (sortUrlChange ) $location.search("sort_"+fieldName,"ASC::"+$scope.gridOptions.sortNr);
            }
            loadGrid();
        };
        $scope.search = {};
$scope.clearSearch = function () { 
    $scope.search = {};
    containerService.cleanUrlState();
    $scope.searchGrid();
};
$scope.searchGrid = function () { 
    var searchUrlChange= containerService.urlContainer("test_grid");
    if (searchUrlChange ) {
        //clear search
        angular.forEach($location.search(), function (item,index) {
            if (index.indexOf("filter_") ==0 || index.indexOf("filterDisplay_") ==0) { 
                $location.search(index,null);
            } 
        });
        //fill search
        angular.forEach($scope.search, function (search, index) {
            if (!!search == false) return;
            if (typeof search != 'object') {
                $location.search("filter_"+index,search.replace('&','~~~'));
            } else if (!!search.id && !!search.id_display_value) {
                var key = index.replace('selected___','');
                var urlSearch = {};
                urlSearch["filter_"+key]=search.id;
                urlSearch["filterDisplay_"+key] = utilityService.fixedEncodeURIComponent(search.id_display_value);
                $location.search(urlSearch);
            }
        });
    }
    loadGrid();
};
$scope.$watch("showSearch", function () {
    //to ensure when the state change that the heights are calculated accordingly.
    $timeout(function () { 
        $("[dib-container=test_grid]").find('.dib-grid-column-content').trigger('refreshHeight')
    },50);
    if (!!$scope.showSearch === false) {
        $scope.search = {};
        if (!!$scope.gridData) loadGrid();
    }
});
function applyFilterFromUrl() { 
    var searchUrlChange= containerService.urlContainer("test_grid");
    var searchLength = Object.keys($location.search()).length;
    if (searchUrlChange && searchLength>0) {
        //apply search from urlContainer
        $scope.search = {};
        var urlSearch  =$location.search();
        angular.forEach(urlSearch, function (item,index) {
            if (index.indexOf('filter') === -1) return;
            if (index.indexOf("filter_") ==0) { 
                $scope.showSearch = true;
                $scope.search[index.replace('filter_','')]= item.replace('~~~','&');
            } 
            if (index.indexOf("filterDisplay_") ==0) {
                var selectKeyIndex=  index.replace('filterDisplay_','');
                var selectKey ="selected___" + selectKeyIndex; 
                $scope.search[selectKey]= {};
                $scope.search[selectKey].id = urlSearch[selectKeyIndex];
                $scope.search[selectKey].id_display_value = decodeURI(item);
            }
        });
        //apply sort from urlContainer
    } else {
        $scope.search = {};
        $scope.showSearch = false;
    }
}
        $scope.scrollConfig = {
            autoHideScrollbar: false,
            theme: 'light',
            advanced:{
                updateOnContentResize: true
            },
                setHeight: 200,
                scrollInertia: 0
        };
        function loadGrid() {
            $scope.loadingData = true;
            crudService.list(crudController,'test_grid',$scope.page, $scope.search, null, $scope.gridOptions.sortFields).then(function (data) {
                $scope.selectedItems = [];
                $scope.lastSelectedItem = null;
                var arraySelected = [];
                var t1 = performance.now();
                $("[dib-container=test_grid]").trigger('load');
                $scope.page.count = Math.ceil(data.filtertotal / $scope.page.limit, 10);
                $scope.page.records = data.filtertotal;
                $scope.page.totalRecords = data.total;
                $scope.page.fromRecord = $scope.page.number==1? 1 : ($scope.page.number-1)*$scope.page.limit;
                $scope.page.toRecord = $scope.page.fromRecord==1? $scope.page.fromRecord + data.records.length - 1 : $scope.page.fromRecord + data.records.length;
                if ($scope.page.fromRecord == 1 && data.records.length ==0 ) {
                    $scope.page.fromRecord = 0;
                }
                if ($scope.page.number != 1 && data.records.length ==0) { 
                    loadGrid();
                    $scope.page.number --;
                    return;
                }
                $scope.loadingData = false;
                $scope.gridData= data.records;
                $timeout(function () { 
                    $('[dib-container=test_grid]').find('[select-default]').trigger('refreshDefault'); 
                },100);
                $scope.$emit('load');
                var t2 = performance.now();
                $log.error(t2-t1);
            });
        }
        $scope.createRecord = function (data) {
            $scope.loadingData = true;
            return crudService.create(crudController,'test_grid', {
                    data : data,
                }).then(function () {
                $("[dib-container=test_grid]").trigger('afterSave');
                $scope.page.number = 1;
                loadGrid();
            });
        };
        $scope.updateRecord = function (data) {
            $scope.loadingData = true;
            var primaryKeyData = recordFactory.primaryKeyData($scope.primaryKeys, data.recordData);
            return crudService.update(crudController,'test_grid',{
                primaryKeyData : primaryKeyData,
                data : data,
                createParams: "{}"
            }).then(function (data) {
                 $scope.loadingData = false;
                $("[dib-container=test_grid]").trigger('afterSave');
                 return $q.resolve();
            }, function (data) {
                 $scope.loadingData = false;
                 return $q.reject(data);
            });
        };
        $scope.deleteRecord = function (data) {
            $scope.loadingData = true;
            return crudService.delete(crudController,'test_grid',data,$scope.primaryKeys).then(function () {
                $("[dib-container=test_grid]").trigger('afterSave');
                $scope.page.number = 1;
                loadGrid();
            });
        };
        var deleteSelectedRecords = function () { 
            if ($scope.selectedItems.length > 0) {
                $scope.loadingData = true;
                gridOptionstest_grid.delete($scope.selectedItems.pop(),$scope.primaryKeys).then(function (data) {
                    deleteSelectedRecords();
                    return $q.resolve();
                }, function (data) {
                    deleteSelectedRecords();
                    return $q.reject(data);
                });
            } else if ($scope.loadingData) { 
                $("[dib-container=test_grid]").trigger('afterDelete');
                loadGrid();
            }
        }
        $scope.deleteSelected = function() { 
            messageService.confirm({
                title: 'Delete selected records',
                text : 'Warning - are you sure you want to permanently delete all the selected records?'
            }).then(function () { 
                deleteSelectedRecords();
            });
        };
        $scope.page = {
            count : 0,
            limit : 10,
            number : 1
        };
        $scope.nextPage = function () {
           $scope.page.number++;
        };
        $scope.lastPage = function () {
            $scope.page.number = $scope.page.count;
        };
        $scope.firstPage = function () {
            $scope.page.number = 1;
        };
        $scope.previousPage = function () {
           $scope.page.number--;
        };
        $scope.$watch("page.limit", function () {
           $scope.page.number = 1;
           if (!!$scope.gridData) loadGrid();
        });
        $scope.$watch("page.number", function () {
           if (!!$scope.gridData) loadGrid();
        });
        applyFilterFromUrl();
        applySortFromUrl();
            loadGrid();
        $scope.reloadContainer  = function (options) {
            $("[dib-container=test_grid]").trigger('beforeReloadContainer');
                applyFilterFromUrl();
                applySortFromUrl();
                loadGrid();
        };
    }
})();
