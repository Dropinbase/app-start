
(function() {
  var require = ['Ext.button.Split','Ext.ux.system.action.MenuItem',  
		'/dropins/setNgMaterial/dibTree/js/components/dibTreeNode.js',
		'/dropins/setNgMaterial/dibTree/js/components/dibTreeChildNode.js',
		'/dropins/setNgMaterial/dibTree/js/factory/dibNodes.js'
	];
  require.push('/dropins/setNgMaterial/dibGlobals/js/component/selectDefault.js');
  var files = [];
  angular.forEach(require, function (file,index) { 
    files.push(DIB__base_url+'/files'+file);
  });
    var testTree = angular.module('testTree', [files]).run(['$rootScope', 'actionLoaderService', function($rootScope, actionLoaderService) {
            var actions = ['dibGlobals.action.OpenContainer','dibGlobals.action.ToggleMenu'];
            if (!actions || actions.length === 0) {
                return;
            }
            actionLoaderService.loadDibActionDefinitions(actions);
    }]);
	testTree.service('treeServicetestTree', treeServicetestTree);
treeServicetestTree.$inject = [ 'ajax', '$log','discoverService', 'recordFactory', 'dibNodes'];
function treeServicetestTree(ajax, $log,discoverService, recordFactory, dibNodes) {
    var service = { 
        drop : drop,
        read : read,
        create : create,
        update : update,
        delete : dispose
    }
    return service;
    function drop(options) { 
        var url = DIB__base_url + '/dropins/dibExamples/Tree/drop?containerName=testTree';
        var container = $('[dib-container=testTree]');
        var requestInfo = discoverService.addToUrl({
            container : container,
            field : container,
            url : url
        });
        angular.forEach(options, function (item,index) { 
            requestInfo.url += '&' + index +"="+item;
        });
        return ajax.post(requestInfo);
    }
    function read(search, activeFilter, nodeId) {
        var url = DIB__base_url + '/dropins/dibExamples/Tree/read?containerName=testTree';
        var container = $('[dib-container=testTree]');
        var requestInfo = discoverService.addToUrl({
            container : container,
            field : container,
            url : url,
            activeFilter : activeFilter
        });
        if (!!search) { 
            requestInfo.url += "&query="+ search; 
        }
        //Adding the root node for a request
        var node= !!nodeId? nodeId : 'root';
        requestInfo.url += "&node=" + node; 
        return ajax.post(requestInfo,{
            factoryResult : dibNodes.records
        });
    }
    function create(data, primaryKeys) {
        var url = DIB__base_url + '/dropins/dibExamples/Tree/create?containerName=testTree';
        var container = $('[dib-container=testTree]');
        var requestInfo = discoverService.addToUrl({
            container : container,
            field : container,
            url : url,
            primaryKeys : primaryKeys,
            data : data
        });
        return ajax.post(requestInfo,null, data);
    }
    function update(data,primaryKeys) {
        var url = DIB__base_url + '/dropins/dibExamples/Tree/update?containerName=testTree';
        var container = $('[dib-container=testTree]');
        var requestInfo = discoverService.addToUrl({
            container : container,
            field : container,
            url : url,
            primaryKeys : primaryKeys,
            data : data
        });
        return ajax.post(url, null,data);
    }
    function dispose(data,primaryKeys) {
        var url = DIB__base_url + '/dropins/dibExamples/Tree/delete?containerName=testTree';
        var container = $('[dib-container=testTree]');
        var requestInfo = discoverService.addToUrl({
            container : container,
            field : container,
            url : url,
            primaryKeys : primaryKeys,
            data : data
        });
        return ajax.post(requestInfo,null,data);
    }
}
})();
(function() {
var testTree = angular.module('testTree');
testTree.component('testTree', {
    controllerAs: 'testTree',
    templateUrl: DIB__base_url + '/dropins/setNgMaterial/dibTree/Template/view/testTree.html',
    controller : component__testTree
});
component__testTree.$inject = [  
            '$scope', '$ocLazyLoad', '$rootScope', '$log', 'containerService','treeServicetestTree', '$q', '$window','keysPressed','containerService','recordFactory','crudService','utilityService'];
    function component__testTree($scope, $ocLazyLoad, $rootScope, $log, containerService,treeServicetestTree, $q, $window,keysPressed,containerService,recordFactory,crudService,utilityService) {
                    $scope.container = {};
            $scope.container.Id = '7094';
            $scope.container.Name = 'testTree';
            $("[dib-container='testTree']").trigger('load');
            var crudController = "/dropins/dibExamples/Tree";
                    $scope.model = {};
        $scope.model._GET = recordFactory.modelConstruct();
        $scope.model._GET['buttontreerefresh'] = containerService.modelItem("text", 
            false,
            false
        );
        $scope.model._GET['buttontreeexpandall'] = containerService.modelItem("text", 
            false,
            false
        );
        $scope.model._GET['buttontreecollapseall'] = containerService.modelItem("text", 
            false,
            false
        );
        $scope.model._GET['buttontreedelete'] = containerService.modelItem("text", 
            false,
            false
        );
            var reloadContainerFunctions = [];
            containerService.watchModel($scope);
	        $scope.common = $rootScope.common;
            $scope.primaryKeys = [];
        $scope.menus = {};
        $scope.dropdowns = {};
        //load all dropdowns required for this container
            $scope.openAuditTrail = function (portAlias) {
                $log.warn('Audit trail not available for this container, as a table is not linked to this view');
            };
        $scope.service = treeServicetestTree;
        function loadGrid() {
            $scope.selectedItems = [];
            $scope.lastSelectedItem = null;
            var arraySelected = [];
            $scope.loadingData = true;
            $log.log($scope.search);
            treeServicetestTree.read($scope.search, null).then(function (data) {
                $scope.loadingData = false;
                $scope.treeData= data.records;
                $("[dib-container='testTree']").trigger('treechange');
            }, function () { 
                $scope.loadingData = false;
                $scope.treeData =  [{ "text" : 'No tree items returned' , "leaf" : true, 'icon' : '/files/dropins/setNgMaterial/dibTree/img/icons/warning.svg'}];
            });
        }
        $scope.searchTree = function ()  {
            loadGrid();
        };
        //override primary keys 
        $scope.primaryKeys = ['id'];
        //resize window to ensure everything fits onto the window screen especially when window height has been implemented
        angular.element($window).trigger('resize');
        //Last selected node object will always be stored here
        $scope.lastSelectedItem = null;
        var arraySelected = [];
        /**
         * The itemAliasData function on the scope is how we collect data from this component/dropin for submissionData, or when the component is referenced by using its itemAlias
         */
        $scope.itemAliasData = function () {
              var itemSelected= angular.copy($scope.lastSelectedItem);
              //remove the children as this is not relevant information
              if (!!itemSelected && !!itemSelected.children) { 
                itemSelected.children = null; 
              }
              return itemSelected;
        };
        /**
         *  After the tree has changed it will trigger the event on the container
         */
        $scope.$on('nodeclose', function ($event) { 
            $log.debug("Node close");
            $("[dib-container='testTree']").trigger('nodeclose');
        });
        /**
         *  After the tree has changed it will trigger the event on the container
         */
        $scope.$on('nodeopen', function ($event) { 
            $log.debug("Node open");
            $("[dib-container='testTree']").trigger('nodeopen');
        });
        /**
         *  After the tree has changed it will trigger the event on the container
         */
        $scope.$on('treechange', function ($event) { 
            $log.debug("TREECHANGE");
            $("[dib-container='testTree']").trigger('treechange');
            $event.stopPropagation();
            $event.preventDefault();
        });
        /**
         * Trigger event on container before tree change
         */
        $scope.$on('beforetreechange', function ($event) { 
            $("[dib-container='testTree']").trigger('beforetreechange');
            $event.stopPropagation();
            $event.preventDefault();
        });
        /**
         *  ability to select a node if the node is in the tree and the id match
         */
        $scope.updateSelectedNode = function (id) { 
            function treeData(items) {
                angular.forEach(items, function (item, index) {
                    if (item.id == id) {
                        item.checked= true;
                        $scope.$emit('selectNode',item);
                        return;
                    } 
                    if (item.children) {
                        treeData(item.children);
                    }
                });   
            }
            treeData($scope.treeData);
        };
        $scope.selectedItems = [];
        /**
         * Manage the selected node id''s
         * Listen if a node is being selected and trigger to tree parent
         */
        $scope.$on('selectNode', function ($event, node) { 
                //Dont do anything if the node, dont have an id attached to it
                if (!!node.id === false) return;
                if (keysPressed.ctrlKey) {
                    //add to array if not checked, as this means the item will be checked.
                    if (arraySelected.indexOf(node.id) === -1 && !node.checked) { 
                        //Setting the last selected node
                        $scope.lastSelectedItem = node;
                        $log.debug("SELECTED NODE", node);
                        //trigger selected item event
                        $("[dib-container='testTree']").trigger('itemclick', [node]);
                        arraySelected.push(node.id);
                        $scope.selectedItems.push(node);
                        $log.debug("CURRENT SELECTED ITEMS IN TREE", arraySelected);
                        return;
                    }
                    //remove from the array as the item in the tree is checked and marked for unselection 
                    if (arraySelected.indexOf(node.id) !== -1) {
                        arraySelected.splice(arraySelected.indexOf(node.id),1);
                        $scope.selectedItems.splice($scope.selectedItems.indexOf(node),1);
                        $("[dib-container='testTree']").trigger('itemdeselect', [node]);
                    }      
                } else if (keysPressed.shiftKey) {
                    dibNodes.shiftSelect($scope.treeData, $scope.lastSelectedItem, node, $scope,arraySelected);
                    $("[dib-container='testTree']").trigger('itemclick', [node]);
                    $scope.lastSelectedItem = node;
                } else {
                    $log.debug("SELECTED NODE", node);
                    angular.forEach($scope.selectedItems,function (treeNode,index) { 
                        if (treeNode.id != node.id) {
                            treeNode.checked=false;
                        }
                    });
                    $scope.selectedItems = [node];
                    $scope.lastSelectedItem = node;
                    arraySelected= [node.id];
                    $("[dib-container='testTree']").trigger('itemselect', [node]);
                    $("[dib-container='testTree']").trigger('itemclick', [node]);
                }
                $log.debug("CURRENT SELECTED ITEMS IN TREE", arraySelected);
                $event.stopPropagation();
                $event.preventDefault();
        });
            loadGrid();
        $scope.reloadContainer  = function (options) {
                loadGrid();
        };
     }
})();
