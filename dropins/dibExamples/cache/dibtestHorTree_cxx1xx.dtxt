(function() {
    var require = [  
		'/dropins/setNgMaterial/dibHorizontalTree/js/components/dibHorizontalTreeNode.js',
		'/dropins/setNgMaterial/dibHorizontalTree/js/components/dibHorizontalTreeChildNode.js',
		'/dropins/setNgMaterial/dibTree/js/factory/dibNodes.js'
	];
    require.push('/dropins/setNgMaterial/dibGlobals/js/component/selectDefault.js');
    var files = [];
    angular.forEach(require, function (file,index) { 
        files.push(DIB.base_url+'/files'+file);
    });
    var dibtestHorTree = angular.module('dibtestHorTree', [files]);
	dibtestHorTree.service('treeServicedibtestHorTree', treeServicedibtestHorTree);
treeServicedibtestHorTree.$inject = [ 'dibAjax', '$log','dibDiscover', 'dibRecord', 'dibNodes'];
function treeServicedibtestHorTree(dibAjax, $log,dibDiscover, dibRecord, dibNodes) {
    var service = { 
        drop : drop,
        read : read,
        create : create,
        update : update,
        delete : dispose
    }
    return service;
    function drop(options) { 
        var url = DIB.base_url + '/dropins/dibExamples/Tree/drop?containerName=dibtestHorTree';
        var container = $('[dib-container=dibtestHorTree]');
        var requestInfo = dibDiscover.addToUrl({
            container : container,
            field : container,
            $scope : options.$scope,
            url : url
        });
        angular.forEach(options, function (item,index) { 
            if (index=='$scope') return;
            requestInfo.url += '&' + index +"="+item;
        });
        return dibAjax.post(requestInfo);
    }
    function read($scope, search, activeFilter, nodeId) {
        var url = DIB.base_url + '/dropins/dibExamples/Tree/read?containerName=dibtestHorTree';
        var container = $('[dib-container=dibtestHorTree]');
        var requestInfo = dibDiscover.addToUrl({
            container : container,
            field : container,
            $scope : $scope,
            url : url,
            activeFilter : activeFilter
        });
        if (!!search) { 
            requestInfo.url += "&query="+ search; 
        }
        //Adding the root node for a request
        var node= !!nodeId? nodeId : 'root';
        requestInfo.url += "&node=" + node; 
        return dibAjax.post(requestInfo,{
            factoryResult : dibNodes.records
        });
    }
    function create($scope, data, primaryKeys) {
        var url = DIB.base_url + '/dropins/dibExamples/Tree/create?containerName=dibtestHorTree';
        var container = $('[dib-container=dibtestHorTree]');
        var requestInfo = dibDiscover.addToUrl({
            container : container,
            field : container,
            $scope : $scope,
            url : url,
            primaryKeys : primaryKeys,
            data : data
        });
        return dibAjax.post(requestInfo,null, data);
    }
    function update($scope, data,primaryKeys) {
        var url = DIB.base_url + '/dropins/dibExamples/Tree/update?containerName=dibtestHorTree';
        var container = $('[dib-container=dibtestHorTree]');
        var requestInfo = dibDiscover.addToUrl({
            container : container,
            field : container,
            $scope : $scope,
            url : url,
            primaryKeys : primaryKeys,
            data : data
        });
        return dibAjax.post(url, null,data);
    }
    function dispose($scope, data,primaryKeys) {
        var url = DIB.base_url + '/dropins/dibExamples/Tree/delete?containerName=dibtestHorTree';
        var container = $('[dib-container=dibtestHorTree]');
        var requestInfo = dibDiscover.addToUrl({
            container : container,
            field : container,
            $scope : $scope,
            url : url,
            primaryKeys : primaryKeys,
            data : data
        });
        return dibAjax.post(requestInfo,null,data);
    }
}
})();
(function() {
    var dibtestHorTree = angular.module('dibtestHorTree');
    dibtestHorTree.component('dibtestHorTree', {
        controllerAs: 'dibtestHorTree',
        templateUrl: DIB.base_url + '/dropins/setNgMaterial/dibHorizontalTree/Template/view/dibtestHorTree.html',
        controller : component__dibtestHorTree
    });
    component__dibtestHorTree.$inject = [ '$scope','$element','dibCrud','dibNavigation','dibAction','dibContainer','dibDiscover','dibRecord','dibUtility','dibCommon','$log','$q','$ocLazyLoad', 
            '$timeout','treeServicedibtestHorTree'];
    function component__dibtestHorTree($scope,$element,dibCrud,dibNavigation,dibAction,dibContainer,dibDiscover,dibRecord,dibUtility,dibCommon,$log,$q,$ocLazyLoad, 
            $timeout,treeServicedibtestHorTree) {
        var ctrl = this;        
        ctrl.$onInit = function () {
                        $scope.container = {};
            $scope.container.Id = '8178';
            $scope.container.Name = 'dibtestHorTree';
            $scope.container.SubContainerItemAliases = []; 
            var crudController = "/peff/Crud";
                    $scope.model = {};
        $scope.model._GET = {};
        $scope.view = {};
            var reloadContainerFunctions = [];
            dibContainer.watchModel($scope);
	        $scope.dibCommon = dibCommon;
            $scope.primaryKeys = [];
        var $dibContainer = $element.first();
        $scope.menus = {};
    $scope.dropdowns = {};
            $scope.openAuditTrail = function (portAlias) {
                $log.warn('Audit trail not available for this container, as a table is not linked to this view');
            };
            $scope.service = treeServicedibtestHorTree;
            $scope.search = "";        
            $scope.searchTree = function ()  {
                loadGrid();
            };
            $scope.createRecord = function (data) {
                $scope.loadingData = true;
                return gridOptionsdibtestHorTree.create(data,$scope.primaryKeys).then(function () {
                    $scope.page.number = 1;
                    loadGrid();
                });
            };
            $scope.updateRecord = function (data) {
                $scope.loadingData = true;
                return gridOptionsdibtestHorTree.update(data,$scope.primaryKeys).then(function (data) {
                    $scope.loadingData = false;
                    return $q.resolve();
                }, function (data) {
                    $scope.loadingData = false;
                    return $q.reject(data);
                });
            };
            /**
             *  After the tree has changed it will trigger the event on the container
             */
            $scope.$on('nodeclose', function ($event) { 
                $log.debug("Node close");
        var additionalInfoOnEvent = null;
        dibAction.executeAction({
        scope : $scope,
        field : !!$element ? $element.first() : $('[dib-container=dibtestHorTree]'),
        containerName: 'dibtestHorTree',
        triggerType: 'nodeclose',
        nextActionItem: '',
        containerEventId: 'dib*h-1t2018m01',        
        containerId: 8178,
        submitUrl: 'dibGlobals.action.RefreshHeight?itemAlias=designerPreview',        
        itemAlias: '',
        refreshItemId : '',
        responseType: 'actions'
    }
, additionalInfoOnEvent);
            });
            /**
             *  After the tree has changed it will trigger the event on the container
             */
            $scope.$on('nodeopen', function ($event) { 
                $log.debug("Node open");
        var additionalInfoOnEvent = null;
        dibAction.executeAction({
        scope : $scope,
        field : !!$element ? $element.first() : $('[dib-container=dibtestHorTree]'),
        containerName: 'dibtestHorTree',
        triggerType: 'nodeopen',
        nextActionItem: '',
        containerEventId: 'dib*n-7ixbsnf',        
        containerId: 8178,
        submitUrl: 'dibGlobals.action.RefreshHeight?itemAlias=designerPreview',        
        itemAlias: '',
        refreshItemId : '',
        responseType: 'actions'
    }
, additionalInfoOnEvent);
            });
            /**
             *  After the tree has changed it will trigger the event on the container
             */
            $scope.$on('treechange', function ($event) { 
                $log.debug("TREECHANGE");
                $event.stopPropagation();
                $event.preventDefault();
            });
            /**
             * Trigger event on container before tree change
             */
            $scope.$on('beforetreechange', function ($event) { 
                $event.stopPropagation();
                $event.preventDefault();
            });
            $scope.reloadContainer  = function (options) {
                if (!!options && options.force) {
                    loadGrid();
                }
            };
        };
        ctrl.$postLink = function () {
                $scope.reloadContainer({ force : true });
        };
        function loadGrid() {
            $scope.loadingData = true;
            treeServicedibtestHorTree.read($scope, $scope.search, null).then(function (data) {
                $scope.loadingData = false;
                $scope.treeData= data.records;
            }, function () { 
                $scope.loadingData = false;
                $scope.treeData =  [{ "text" : 'No items returned' , "leaf" : true, 'icon' : '/files/dropins/setNgMaterial/dibTree/img/icons/warning.svg'}];
            });
        };
    }
})();
