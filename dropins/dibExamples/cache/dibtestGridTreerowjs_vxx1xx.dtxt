(function () { 
    var dibtestGridTree = angular.module('dibtestGridTree');
    dibtestGridTree.directive('dibtestGridTreeRow', function () {
        return {
            restrict: 'E',
            scope: {
                row:'=',
                treeLevel: '<',
                search: '=',
                view: '=',
                model: '=',
            },
            templateUrl: DIB.base_url + '/dropins/setNgMaterial/dibGridTree/Template/row.html?containerName=dibtestGridTree',
            controller :  component__dibRowdibtestGridTree
        };
    });
    component__dibRowdibtestGridTree.$inject = ['$scope','dibCrud','$element','dibCommon','dibtestGridTreeDefinition'];
    function component__dibRowdibtestGridTree($scope, dibCrud, $element, dibCommon,dibtestGridTreeDefinition ) {
        var ctrl = this;
        $scope.dibCommon = dibCommon;
        ctrl.$postLink = function () { 
            /**
             * This triggers after the row has been loaded. We want to signal the row has been loaded in order to fix the alignment on the column headers
             */
            $scope.$emit('load');
        };
        var crudController = "/peff/Crud";
        $scope.page = {
            count : 0,
            limit : 10,
            number : 1,
            lastLoad : 1
        };
        $scope.nextPage = function () {
           $scope.page.number++;
        };
        $scope.lastPage = function () {
            $scope.page.number = $scope.page.count;
        };
        $scope.firstPage = function () {
            $scope.page.number = 1;
        };
        $scope.previousPage = function () {
           $scope.page.number--;
        };
        $scope.$watch("page.limit", function () {
           $scope.page.number = 1;
           if (!!$scope.gridData) loadGrid();
        });
        $scope.$watch("page.number", function () {
            if ($scope.page.number == 0) { 
                $scope.page.number = 1;
            }
            if (!!$scope.page.number === false) { 
                return;
            }
            if ($scope.page.number < 1) { 
                $scope.page.number = 1;
            }
            if ($scope.page.count <$scope.page.number && $scope.page.count!=0 ) {
                $scope.page.number = $scope.page.count;
                return;
            }
            if ($scope.page.lastLoad != $scope.page.number && !!$scope.gridData){
                loadGrid();
                $scope.page.lastLoad = $scope.page.number;
            }
        });
        /*Calculating the depth*/
        if (!!$scope.treeLevel === false) {
            $scope.treeLevel = 1;
        } else {
            $scope.treeLevel++;
        }
        var spacingIndent = 29;
        $scope.nodeIndent = { "width": !$scope.treeLevel === 1 ? "0px" : (($scope.treeLevel - 1) * spacingIndent) + "px" };
        /**Icons for the grid tree */
        $scope.icons = {};
        $scope.icons.parent = DIB.base_url + "/files/dropins/setNgMaterial/dibTree/img/icons/no-children.svg";
        $scope.icons.noChild = DIB.base_url + "/files/dropins/setNgMaterial/dibTree/img/icons/parent.svg";
        $scope.icons.closed = DIB.base_url + "/files/dropins/setNgMaterial/dibTree/img/icons/closed.svg";
        $scope.icons.open = DIB.base_url + "/files/dropins/setNgMaterial/dibTree/img/icons/open.svg";
        /**
         * Load the list for a specific node
         */
        $scope.load = function (node) {
            $scope.row.loading = true;
            dibCrud.list($scope, $element, crudController,'dibtestGridTree',$scope.page, null, null, null, node[dibtestGridTreeDefinition.primaryKeys()[0]]).then(function (data) {
                $scope.row.children = data.records;
                $scope.row.opened = true;
                $scope.row.loading = false;
            }).catch(function () { 
                $scope.row.loading = false;                
            }) ;
        };
        if (!$scope.row.leaf) {
            //$scope.load($scope.row);
        } 
    }
}());
