(function() {
  var require = [  
		'/dropins/setNgMaterial/dibHorizontalTree/js/components/dibHorizontalTreeNode.js',
		'/dropins/setNgMaterial/dibHorizontalTree/js/components/dibHorizontalTreeChildNode.js',
		'/dropins/setNgMaterial/dibTree/js/factory/dibNodes.js'
	];
  require.push('/dropins/setNgMaterial/dibGlobals/js/component/selectDefault.js');
  var files = [];
  angular.forEach(require, function (file,index) { 
    files.push(DIB__base_url+'/files'+file);
  });
    var dibtestHorTree = angular.module('dibtestHorTree', [files]);
    function updateQueryStringMenu(url, node) { 
        if (!!node === true) {
            return url + "&node="+node;
        } 
        return url + "&node=root";
    };
    function updateQueryStringDropdown(url, query, modelType, page) {
        url += "&limit=20&page=" + (!!page == true? page: 1);
        if (modelType=='search') { 
            url += "&showUsedOnly=true";
        }
        url += "&query=";
        if (!!query == true) {
            url += query;
        }
        return url;
    };
	dibtestHorTree.service('treeServicedibtestHorTree', treeServicedibtestHorTree);
treeServicedibtestHorTree.$inject = [ 'ajax', '$log','discoverService', 'recordFactory', 'dibNodes'];
function treeServicedibtestHorTree(ajax, $log,discoverService, recordFactory, dibNodes) {
    var service = { 
        drop : drop,
        read : read,
        create : create,
        update : update,
        delete : dispose
    }
    return service;
    function drop(options) { 
        var url = DIB__base_url + '/dropins/dibExamples/Tree/drop?containerName=dibtestHorTree';
        var container = $('[dib-container=dibtestHorTree]');
        var requestInfo = discoverService.addToUrl({
            container : container,
            field : container,
            url : url
        });
        angular.forEach(options, function (item,index) { 
            requestInfo.url += '&' + index +"="+item;
        });
        return ajax.post(requestInfo);
    }
    function read(search, activeFilter, nodeId) {
        var url = DIB__base_url + '/dropins/dibExamples/Tree/read?containerName=dibtestHorTree';
        var container = $('[dib-container=dibtestHorTree]');
        var requestInfo = discoverService.addToUrl({
            container : container,
            field : container,
            url : url,
            activeFilter : activeFilter
        });
        if (!!search) { 
            requestInfo.url += "&query="+ search; 
        }
        //Adding the root node for a request
        var node= !!nodeId? nodeId : 'root';
        requestInfo.url += "&node=" + node; 
        return ajax.post(requestInfo,{
            factoryResult : dibNodes.records
        });
    }
    function create(data, primaryKeys) {
        var url = DIB__base_url + '/dropins/dibExamples/Tree/create?containerName=dibtestHorTree';
        var container = $('[dib-container=dibtestHorTree]');
        var requestInfo = discoverService.addToUrl({
            container : container,
            field : container,
            url : url,
            primaryKeys : primaryKeys,
            data : data
        });
        return ajax.post(requestInfo,null, data);
    }
    function update(data,primaryKeys) {
        var url = DIB__base_url + '/dropins/dibExamples/Tree/update?containerName=dibtestHorTree';
        var container = $('[dib-container=dibtestHorTree]');
        var requestInfo = discoverService.addToUrl({
            container : container,
            field : container,
            url : url,
            primaryKeys : primaryKeys,
            data : data
        });
        return ajax.post(url, null,data);
    }
    function dispose(data,primaryKeys) {
        var url = DIB__base_url + '/dropins/dibExamples/Tree/delete?containerName=dibtestHorTree';
        var container = $('[dib-container=dibtestHorTree]');
        var requestInfo = discoverService.addToUrl({
            container : container,
            field : container,
            url : url,
            primaryKeys : primaryKeys,
            data : data
        });
        return ajax.post(requestInfo,null,data);
    }
}
})();
(function() {
var dibtestHorTree = angular.module('dibtestHorTree');
dibtestHorTree.component('dibtestHorTree', {
    controllerAs: 'dibtestHorTree',
    templateUrl: DIB__base_url + '/dropins/setNgMaterial/dibHorizontalTree/Template/view/dibtestHorTree.html',
    controller : component__dibtestHorTree
});
component__dibtestHorTree.$inject = [  
            '$timeout', '$scope', '$ocLazyLoad', '$rootScope', '$log', 'containerService','treeServicedibtestHorTree', '$q','containerService','recordFactory','crudService','utilityService'];
    function component__dibtestHorTree($timeout, $scope, $ocLazyLoad, $rootScope, $log, containerService,treeServicedibtestHorTree, $q,containerService,recordFactory,crudService,utilityService) {
        var ctrl = this;        
        ctrl.$postLink = function () {
            $("[dib-container=dibtestHorTree]").trigger('onInit');
        };
        ctrl.$onInit = function () {
                        $scope.container = {};
            $scope.container.Id = '8178';
            $scope.container.Name = 'dibtestHorTree';
            var crudController = "/peff/Crud";
                    $scope.model = {};
        $scope.model._GET = recordFactory.modelConstruct();
        $scope.view = {};
            var reloadContainerFunctions = [];
            containerService.watchModel($scope);
	        $scope.common = $rootScope.common;
            $scope.primaryKeys = [];
        $scope.menus = {};
        $scope.dropdowns = {};
        //load all dropdowns required for this container
            $scope.openAuditTrail = function (portAlias) {
                $log.warn('Audit trail not available for this container, as a table is not linked to this view');
            };
            $scope.service = treeServicedibtestHorTree;
            $scope.search = "";        
            $scope.searchTree = function ()  {
                loadGrid();
            };
            $scope.createRecord = function (data) {
                $scope.loadingData = true;
                return gridOptionsdibtestHorTree.create(data,$scope.primaryKeys).then(function () {
                    $("[dib-container=dibtestHorTree]").trigger('afterSave');
                    $scope.page.number = 1;
                    loadGrid();
                });
            };
            $scope.updateRecord = function (data) {
                $scope.loadingData = true;
                return gridOptionsdibtestHorTree.update(data,$scope.primaryKeys).then(function (data) {
                    $scope.loadingData = false;
                    $("[dib-container=dibtestHorTree]").trigger('afterSave');
                    return $q.resolve();
                }, function (data) {
                    $scope.loadingData = false;
                    return $q.reject(data);
                });
            };
            /**
             *  After the tree has changed it will trigger the event on the container
             */
            $scope.$on('nodeclose', function ($event) { 
                $log.debug("Node close");
                $("[dib-container='dibtestHorTree']").trigger('nodeclose');
            });
            /**
             *  After the tree has changed it will trigger the event on the container
             */
            $scope.$on('nodeopen', function ($event) { 
                $log.debug("Node open");
                $("[dib-container='dibtestHorTree']").trigger('nodeopen');
            });
            /**
             *  After the tree has changed it will trigger the event on the container
             */
            $scope.$on('treechange', function ($event) { 
                $log.debug("TREECHANGE");
                $("[dib-container='dibtestHorTree']").trigger('treechange');
                $event.stopPropagation();
                $event.preventDefault();
            });
            /**
             * Trigger event on container before tree change
             */
            $scope.$on('beforetreechange', function ($event) { 
                $("[dib-container='dibtestHorTree']").trigger('beforetreechange');
                $event.stopPropagation();
                $event.preventDefault();
            });
            $timeout(function () { 
                    loadGrid();
            },500);
            $scope.reloadContainer  = function (options) {
                if (!!options && options.force) {
                    loadGrid();
                }
        if (!!$scope) { 
                $scope.$broadcast('reload container');
        }
            };
            function loadGrid() {
                $scope.loadingData = true;
                $log.log($scope.search);
                treeServicedibtestHorTree.read($scope.search, null).then(function (data) {
                    $scope.loadingData = false;
                    $scope.treeData= data.records;
                }, function () { 
                    $scope.loadingData = false;
                    $scope.treeData =  [{ "text" : 'No items returned' , "leaf" : true, 'icon' : '/files/dropins/setNgMaterial/dibTree/img/icons/warning.svg'}];
                });
            }
        };
    }
})();
